settings
{
	main
	{
		Description: "Please contact me on discord (ItsZen_EXE#0057), twitter (@ItsZen_EXE), or even email me at ItsZenEXE@pm.me with \"OWStrife\" at the start of the subject line if you have any questions!"
	}

	lobby
	{
		Match Voice Chat: Enabled
	}

	modes
	{
		Deathmatch
		{
			enabled maps
			{
				Workshop Island Night
			}
		}

		disabled Elimination
		{
			Limited Choice Pool: Team Size
			Score To Win: 5
		}

		General
		{
			Game Mode Start: Manual
			Hero Limit: Off
			Spawn Health Packs: Enabled
		}
	}

	heroes
	{
		General
		{
			Ultimate Generation: 140%

			Ana
			{
				Sleep Dart Cooldown Time: 75%
			}

			Ashe
			{
				Ammunition Clip Size Scalar: 133%
				Coach Gun Knockback Scalar Enemy: 50%
				Coach Gun Knockback Scalar Self: 85%
				Damage Dealt: 85%
				Ultimate Duration: 45%
				Ultimate Generation - Combat B.O.B.: 175%
			}

			Baptiste
			{
				Damage Dealt: 80%
			}

			Bastion
			{
				Ammunition Clip Size Scalar: 71%
				Configuration: Tank Weapon Knockback Scalar: 150%
				Damage Dealt: 75%
				Self-Repair Recharge Rate: 0%
				Ultimate Duration: 50%
				Ultimate Generation Configuration: Tank: 70%
			}

			Brigitte
			{
				Barrier Shield Cooldown Time: 120%
				Barrier Shield Recharge Rate: 118%
				Health: 80%
				Repair Pack Cooldown Time: 150%
				Shield Bash Knockback Scalar: 120%
				Whip Shot Cooldown Time: 125%
				Whip Shot Knockback Scalar: 117%
			}

			Hanzo
			{
				Lunge Distance Scalar: 114%
				Sonic Arrow Cooldown Time: 84%
				Storm Arrows Cooldown Time: 80%
				Storm Arrows Quantity: 3
			}

			Lúcio
			{
				Ultimate Generation - Combat Sound Barrier: 135%
			}

			McCree
			{
				Combat Roll Cooldown Time: 80%
			}

			Mei
			{
				Cryo-Freeze Cooldown Time: 91%
				Damage Dealt: 86%
				Healing Dealt: 170%
				Health: 62%
				Ice Wall Cooldown Time: 77%
			}

			Pharah
			{
				Hover Jets Maximum Time: 95%
				Jump Jet Cooldown Time: 87%
			}

			Zarya
			{
				Healing Received: 125%
				Particle Barrier Cooldown Time: 80%
				Projected Barrier Cooldown Time: 200%
			}

			enabled heroes
			{
				Ana
				Ashe
				Baptiste
				Bastion
				Brigitte
				Lúcio
				McCree
				Mei
				Pharah
				Zarya
			}
		}
	}

	workshop
	{
		Enable Ruler: On
		Enable Server Load Text: On
		Enable Short Cooldowns: On
	}
}

variables
{
	global:
		0: DebugEnabled
		1: DmgTestBotSpawnerPos
		2: HostCheatsEnabled
		3: StatusTestBotSpawnerPos
		5: RulerEnabled
		8: antiCrashActive

	player:
		0: HudText
		1: IsUsingAbility
		3: AbilityVariables
		4: AbilityEffects
		5: AbilityVariableChase_I
		6: AbilityVariableChase_II
		7: IsStatsChanged
		8: InfoHUDText
		9: FastCooldownsToggle
		30: RulerPointer
		31: RulerMode
		32: RulerState
		33: RulerPos1
		34: RulerPos2
		35: RulerPos3
		36: RulerAngle
}

subroutines
{
	0: SpawnStatsReset
	1: EffectHandler
	2: HUDHandler
	3: InfoHUDDespawner
	4: InfoHUDHandler
}

rule("[Toggleable Options and More] (most require debug scripts added)")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		"Greatly reduces server lag"
		Disable Inspector Recording;
		"Enable Host Cheats"
		Global.HostCheatsEnabled = Workshop Setting Toggle(Custom String("DEBUG OPTIONS"), Custom String("Enable Host Cheats"), False);
		"Enable Ruler"
		Global.RulerEnabled = Workshop Setting Toggle(Custom String("DEBUG OPTIONS"), Custom String("Enable Ruler"), False);
	}
}

rule("========================[] Debug")
{
	event
	{
		Ongoing - Global;
	}
}

rule("[Enable Debug On Workshop Maps & Check for if Debug needs Disabled due to number of players]")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		"Workshop Maps Required for Debug (Chamber, Expanse, or Island) "
		(Current Map == Map(Workshop Chamber) || Current Map == Map(Workshop Expanse) || Current Map == Map(Workshop Island)
			|| Current Map == Map(Workshop Expanse Night) || Current Map == Map(Workshop Island Night)) == True;
	}

	actions
	{
		If(Has Spawned(Host Player) == False);
			Wait(1, Ignore Condition);
			Loop;
		Else;
		End;
		"Host Player ONLY Check (Excludes dummy bots)"
		If(Remove From Array(Filtered Array(All Players(All Teams), !Is Dummy Bot(Current Array Element)), Host Player) == Empty Array);
			Global.DebugEnabled = True;
			Big Message(Host Player, Custom String("Debug Enabled"));
		Else;
			Big Message(Host Player, Custom String("{0} Debug Auto-Disabled {0}", Icon String(Warning)));
	}
}

rule("[Ruler] HUD text")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Global.RulerEnabled == True;
	}

	actions
	{
		Create HUD Text(Filtered Array(Event Player, Event Player.RulerMode == True), Null, Null, Custom String(
			"Interact = Enable/Disable Ruler Mode"), Left, -1, White, White, White, Visible To and String, Default Visibility);
		"p1"
		Create HUD Text(Filtered Array(Event Player, Event Player.RulerMode == True), Event Player.RulerPos1, Custom String(
			"Primary Fire"), Custom String("p1"), Left, 1, Orange, Orange, Orange, Visible To and String, Default Visibility);
		"p2"
		Create HUD Text(Filtered Array(Event Player, Event Player.RulerMode == True), Event Player.RulerPos2, Custom String(
			"Primary fire"), Custom String("p2"), Left, 2, Aqua, Aqua, Aqua, Visible To and String, Default Visibility);
		"p3"
		Create HUD Text(Filtered Array(Event Player, Event Player.RulerMode == True), Event Player.RulerPos3, Custom String(
			"Secondary Fire"), Custom String("p3"), Left, 3, Green, Green, Green, Visible To and String, Default Visibility);
		Create HUD Text(Filtered Array(Event Player, Event Player.RulerMode == True), Null, Custom String("Reload = p3 == p1 UP"), Null,
			Left, 4, Green, Green, Green, Visible To and String, Default Visibility);
		Create HUD Text(Filtered Array(Event Player, Event Player.RulerMode == True), Null, Custom String(
			"Reload + Crouch = p3 == p1 DOWN"), Null, Left, 5, Green, Green, Green, Visible To and String, Default Visibility);
		Create HUD Text(Filtered Array(Event Player, Event Player.RulerMode == True), Null, Custom String(
			"Melee = p3 on opposite wall of p1 & p2"), Null, Left, 6, Green, Green, Green, Visible To and String, Default Visibility);
		"Dist"
		Create HUD Text(Filtered Array(Event Player, Event Player.RulerMode == True), Distance Between(Event Player.RulerPos1,
			Event Player.RulerPos2), Custom String("distance from"), Custom String("p1 to p2"), Top, 1, White, White, White,
			Visible To and String, Default Visibility);
		Create HUD Text(Filtered Array(Event Player, Event Player.RulerMode == True), Distance Between(Event Player.RulerPos1,
			Event Player.RulerPos3), Custom String("distance from"), Custom String("p1 to p3"), Top, 2, White, White, White,
			Visible To and String, Default Visibility);
		"angle"
		Create HUD Text(Filtered Array(Event Player, Event Player.RulerMode == True), Event Player.RulerAngle, Null, Custom String(
			"Angle"), Right, 0, Orange, White, Orange, Visible To and String, Default Visibility);
		Create HUD Text(Filtered Array(Event Player, Event Player.RulerMode == True), Null, Custom String("Ability 1 = horizontal angle"),
			Null, Right, 1, Orange, Orange, Orange, Visible To and String, Default Visibility);
		Create HUD Text(Filtered Array(Event Player, Event Player.RulerMode == True), Null, Custom String("Ability 2 = vertical angle"),
			Null, Right, 2, Orange, Orange, Orange, Visible To and String, Default Visibility);
		Create HUD Text(Filtered Array(Event Player, Event Player.RulerMode == True), Null, Custom String("Ult = Set p2Y & p3Y == p1Y "),
			Null, Right, 3, White, White, White, Visible To and String, Default Visibility);
	}
}

rule("[Ruler] Enable Ruler Mode")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Interact) == True;
		Event Player.RulerMode == 0;
		Global.RulerEnabled == True;
	}

	actions
	{
		Wait(0.250, Ignore Condition);
		Loop If Condition Is True;
		Event Player.RulerMode = 1;
		Disallow Button(Event Player, Primary Fire);
		Disallow Button(Event Player, Secondary Fire);
		Disallow Button(Event Player, Ability 1);
		Disallow Button(Event Player, Ability 2);
		Disallow Button(Event Player, Ultimate);
		Disallow Button(Event Player, Melee);
	}
}

rule("[Ruler] Disable Ruler Mode")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Interact) == True;
		Event Player.RulerMode == 1;
	}

	actions
	{
		Wait(0.250, Ignore Condition);
		Loop If Condition Is True;
		Event Player.RulerMode = 0;
		Allow Button(Event Player, Primary Fire);
		Allow Button(Event Player, Secondary Fire);
		Allow Button(Event Player, Ability 1);
		Allow Button(Event Player, Ability 2);
		Allow Button(Event Player, Ultimate);
		Allow Button(Event Player, Melee);
	}
}

rule("[Ruler] Turn Ruler On")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.RulerMode == 1;
		Is Button Held(Event Player, Primary Fire) == True;
		Event Player.RulerState == 0;
	}

	actions
	{
		Wait(0.250, Ignore Condition);
		Loop If Condition Is True;
		Event Player.RulerState = 1;
		Create Beam Effect(Filtered Array(Event Player, Event Player.RulerMode == True), Grapple Beam, Eye Position(Event Player) + Vector(
			Sine From Degrees(-90 + Horizontal Facing Angle Of(Event Player)), 0.500, Cosine From Degrees(-90 + Horizontal Facing Angle Of(
			Event Player))), Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player) + Facing Direction Of(
			Event Player) * 1000, All Players(All Teams), Event Player, True), White, Visible To Position and Radius);
		Event Player.RulerPointer[0] = Last Created Entity;
		Create Effect(Filtered Array(All Players(All Teams), Event Player.RulerMode == True), Sphere, White, Ray Cast Hit Position(
			Eye Position(Event Player), Eye Position(Event Player) + Facing Direction Of(Event Player) * 1000, All Players(All Teams),
			Event Player, True), 0.200, Visible To Position and Radius);
		Event Player.RulerPointer[1] = Last Created Entity;
	}
}

rule("[Ruler] Place p1")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.RulerMode == 1;
		Is Button Held(Event Player, Primary Fire) == True;
		Event Player.RulerState == 1;
	}

	actions
	{
		Wait(0.250, Ignore Condition);
		Loop If Condition Is True;
		Event Player.RulerPos1[0] = Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player) + Facing Direction Of(
			Event Player) * 1000, All Players(All Teams), Event Player, True);
		Event Player.RulerState = 2;
		Create Effect(Event Player, Orb, Orange, Event Player.RulerPos1, 1, Visible To Position and Radius);
		Event Player.RulerPos1[2] = Last Created Entity;
	}
}

rule("[Ruler] Place p2")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.RulerMode == 1;
		Is Button Held(Event Player, Primary Fire) == True;
		Event Player.RulerState == 2;
	}

	actions
	{
		Wait(0.250, Ignore Condition);
		Loop If Condition Is True;
		Event Player.RulerPos2[0] = Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player) + Facing Direction Of(
			Event Player) * 1000, All Players(All Teams), Event Player, True);
		Event Player.RulerState = 3;
		Create Effect(Event Player, Orb, Aqua, Event Player.RulerPos2, 1, Visible To Position and Radius);
		Event Player.RulerPos2[1] = Last Created Entity;
		Create Beam Effect(All Players(All Teams), Good Beam, Event Player.RulerPos1, Event Player.RulerPos2, Aqua,
			Visible To Position and Radius);
		Event Player.RulerPos2[2] = Last Created Entity;
	}
}

rule("[Ruler] Destroy Ruler")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.RulerMode == 1;
		Is Button Held(Event Player, Primary Fire) == True;
		Event Player.RulerState == 3;
	}

	actions
	{
		Wait(0.250, Ignore Condition);
		Loop If Condition Is True;
		Destroy Effect(Event Player.RulerPos1[2]);
		Destroy Effect(Event Player.RulerPos2[1]);
		Destroy Effect(Event Player.RulerPos2[2]);
		Destroy Effect(Event Player.RulerPos3[1]);
		Destroy Effect(Event Player.RulerPos3[2]);
		Destroy Effect(Event Player.RulerPointer[0]);
		Destroy Effect(Event Player.RulerPointer[1]);
		Wait(0.016, Ignore Condition);
		Event Player.RulerState = 0;
		Event Player.RulerPos1 = Null;
		Event Player.RulerPos2 = Null;
		Event Player.RulerPos3 = Null;
		Event Player.RulerAngle = 0;
	}
}

rule("[Ruler] Set Y of p2 & p3 to Y of P1")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.RulerMode == 1;
		Is Button Held(Event Player, Ultimate) == True;
		Event Player.RulerState == 3;
	}

	actions
	{
		Wait(0.250, Ignore Condition);
		Loop If Condition Is True;
		Event Player.RulerPos2[0] = Vector(X Component Of(Event Player.RulerPos2), Y Component Of(Event Player.RulerPos1), Z Component Of(
			Event Player.RulerPos2));
		Event Player.RulerPos3[0] = Vector(X Component Of(Event Player.RulerPos3), Y Component Of(Event Player.RulerPos1), Z Component Of(
			Event Player.RulerPos3));
	}
}

rule("[Ruler] Place p3")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.RulerMode == 1;
		Is Button Held(Event Player, Secondary Fire) == True;
		Event Player.RulerState == 3;
	}

	actions
	{
		Wait(0.250, Ignore Condition);
		Loop If Condition Is True;
		Skip If(Event Player.RulerPos3 != Null, 4);
		Create Effect(Event Player, Orb, Green, Event Player.RulerPos3, 1, Visible To Position and Radius);
		Event Player.RulerPos3[1] = Last Created Entity;
		Create Beam Effect(All Players(All Teams), Good Beam, Event Player.RulerPos1, Event Player.RulerPos3, Green,
			Visible To Position and Radius);
		Event Player.RulerPos3[2] = Last Created Entity;
		Event Player.RulerPos3[0] = Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player) + Facing Direction Of(
			Event Player) * 1000, All Players(All Teams), Event Player, True);
	}
}

rule("[Ruler] Measure Angles Between p1 & p2")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.RulerMode == 1;
		Is Button Held(Event Player, Ability 1) == True;
		Event Player.RulerState == 3;
		Event Player.RulerPos3 != 0;
	}

	actions
	{
		Event Player.RulerAngle = Vertical Angle From Direction(Direction Towards(Event Player.RulerPos1, Event Player.RulerPos2))
			- Vertical Angle From Direction(Direction Towards(Event Player.RulerPos1, Event Player.RulerPos3));
	}
}

rule("[Ruler] Measure Angles (part 2)")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.RulerAngle < -0.001;
	}

	actions
	{
		Event Player.RulerAngle = Event Player.RulerAngle * -1;
	}
}

rule("[Ruler] Measure Angles Between p1 & p3")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.RulerMode == 1;
		Is Button Held(Event Player, Ability 2) == True;
		Event Player.RulerState == 3;
		Event Player.RulerPos3 != 0;
	}

	actions
	{
		Event Player.RulerAngle = Horizontal Angle From Direction(Direction Towards(Event Player.RulerPos1, Event Player.RulerPos2))
			- Horizontal Angle From Direction(Direction Towards(Event Player.RulerPos1, Event Player.RulerPos3));
	}
}

rule("[Ruler] Place p3 on opposite wall of p1 and p2")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.RulerMode == 1;
		Is Button Held(Event Player, Melee) == True;
		Event Player.RulerState == 3;
		Event Player.RulerPos3 != Null;
	}

	actions
	{
		Wait(0.250, Ignore Condition);
		Loop If Condition Is True;
		Event Player.RulerPos3[0] = Ray Cast Hit Position(Event Player.RulerPos1, Event Player.RulerPos1 + Direction From Angles(
			-90 + Horizontal Angle From Direction(Direction Towards(Event Player.RulerPos1, Event Player.RulerPos2)), 0) * 1000,
			All Players(All Teams), Event Player, True);
		disabled Create Effect(Event Player, Orb, Green, Event Player.RulerPos3, 1, Visible To Position and Radius);
		disabled Create Beam Effect(All Players(All Teams), Good Beam, Event Player.RulerPos1, Event Player.RulerPos3, Green,
			Visible To Position and Radius);
	}
}

rule("[Ruler] Place p3 on floor below p1")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.RulerMode == 1;
		Is Button Held(Event Player, Reload) == True;
		Event Player.RulerState == 3;
		Is Crouching(Event Player) == True;
		Event Player.RulerPos3 != Null;
	}

	actions
	{
		Wait(0.250, Ignore Condition);
		Loop If Condition Is True;
		disabled Create Effect(Event Player, Orb, Green, Event Player.RulerPos3, 1, Visible To Position and Radius);
		disabled Create Beam Effect(All Players(All Teams), Good Beam, Event Player.RulerPos1, Event Player.RulerPos3, Green,
			Visible To Position and Radius);
		Event Player.RulerPos3[0] = Ray Cast Hit Position(Event Player.RulerPos1, Event Player.RulerPos1 + Direction From Angles(0, 90)
			* 1000, All Players(All Teams), Event Player, True);
	}
}

rule("[Ruler] Place p3 on ceiling above p1")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.RulerMode == 1;
		Is Button Held(Event Player, Reload) == True;
		Event Player.RulerState == 3;
		Is Crouching(Event Player) == False;
		Event Player.RulerPos3 != Null;
	}

	actions
	{
		Wait(0.250, Ignore Condition);
		Loop If Condition Is True;
		disabled Create Effect(Event Player, Orb, Green, Event Player.RulerPos3, 1, Visible To Position and Radius);
		disabled Create Beam Effect(All Players(All Teams), Good Beam, Event Player.RulerPos1, Event Player.RulerPos3, Green,
			Visible To Position and Radius);
		Event Player.RulerPos3[0] = Ray Cast Hit Position(Event Player.RulerPos1, Event Player.RulerPos1 + Direction From Angles(0, -90)
			* 1000, All Players(All Teams), Event Player, True);
	}
}

rule("[ShortCooldowns] Enable/Disable using ult charge saying")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Communicating(Event Player, Ultimate Status) == True;
		Workshop Setting Toggle(Custom String("DEBUG OPTIONS"), Custom String("Enable Short Cooldowns"), False) == True;
	}

	actions
	{
		If(Is In Spawn Room(Event Player));
			Small Message(Event Player, Custom String("Unable to enable short cooldowns (In Spawn)"));
		Else;
			If(Event Player.FastCooldownsToggle == False);
				Small Message(Event Player, Custom String("Short-Cooldowns Enabled (wait 4s to disable)"));
				Event Player.FastCooldownsToggle = True;
			Else;
				Event Player.FastCooldownsToggle = False;
				Small Message(Event Player, Custom String("Short-Cooldowns Disabled (wait 4s to enable)"));
	}
}

rule("[ShortCooldowns] secondary fire")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Ability Cooldown(Event Player, Button(Secondary Fire)) > 1.500;
		Event Player.FastCooldownsToggle == True;
	}

	actions
	{
		Set Ability Cooldown(Event Player, Button(Secondary Fire), 1);
		Wait(0.016, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("[ShortCooldowns] ability 1")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Ability Cooldown(Event Player, Button(Ability 1)) > 1.500;
		Event Player.FastCooldownsToggle == True;
	}

	actions
	{
		Set Ability Cooldown(Event Player, Button(Ability 1), 1);
		Wait(0.016, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("[ShortCooldowns] ability 2")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Ability Cooldown(Event Player, Button(Ability 2)) > 1.500;
		Event Player.FastCooldownsToggle == True;
	}

	actions
	{
		Set Ability Cooldown(Event Player, Button(Ability 2), 1);
		Wait(0.016, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("[ShortCooldowns] ult")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Ultimate Charge Percent(Event Player) != 100;
		Event Player.FastCooldownsToggle == True;
	}

	actions
	{
		Abort If Condition Is False;
		While(Is Using Ultimate(Event Player) == True);
			Wait(0.250, Ignore Condition);
		Else;
		End;
		Wait(1, Ignore Condition);
		Abort If Condition Is False;
		Set Ultimate Charge(Event Player, 100);
	}
}

rule("[ShortCooldowns] crouch")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Ability Cooldown(Event Player, Button(Crouch)) > 1.500;
		Event Player.FastCooldownsToggle == True;
	}

	actions
	{
		Set Ability Cooldown(Event Player, Button(Crouch), 1);
		Wait(0.016, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("[ShortCooldowns] Jump")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Ability Cooldown(Event Player, Button(Jump)) > 1.500;
		Event Player.FastCooldownsToggle == True;
	}

	actions
	{
		Set Ability Cooldown(Event Player, Button(Jump), 1);
		Wait(0.016, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("[Debug] HUD Per Player")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Workshop Setting Toggle(Custom String("DEBUG OPTIONS"), Custom String("Enable Debug HUD"), False) == True;
	}

	actions
	{
		Create HUD Text(Event Player, Null, Custom String("Primary: {0}", Is Firing Primary(Event Player)), Null, Top, 10, White, White,
			White, Visible To and String, Default Visibility);
		Create HUD Text(Event Player, Null, Custom String("Secondary: {0}", Is Firing Secondary(Event Player)), Null, Top, 10, White,
			White, White, Visible To and String, Default Visibility);
		Create HUD Text(Event Player, Null, Custom String("1: {0}", Is Using Ability 1(Event Player)), Null, Top, 10, White, White, White,
			Visible To and String, Default Visibility);
		Create HUD Text(Event Player, Null, Custom String("2: {0}", Is Using Ability 2(Event Player)), Null, Top, 10, White, White, White,
			Visible To and String, Default Visibility);
		Create HUD Text(Event Player, Null, Custom String("ult: {0}", Is Using Ultimate(Event Player)), Null, Top, 10, White, White, White,
			Visible To and String, Default Visibility);
		Create HUD Text(Event Player, Null, Custom String("Melee: {0}", Is Meleeing(Event Player)), Null, Top, 10, White, White, White,
			Visible To and String, Default Visibility);
		Create HUD Text(Event Player, Null, Custom String("Reload: {0}", Is Button Held(Event Player, Reload)), Null, Top, 10, White,
			White, White, Visible To and String, Default Visibility);
		Create HUD Text(Host Player, Custom String("altitude: {0}", Altitude Of(Event Player)), Null, Null, Top, -10, White, White, White,
			Visible To and String, Default Visibility);
	}
}

rule("[Debug] HUD")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Workshop Setting Toggle(Custom String("DEBUG OPTIONS"), Custom String("Enable Server Load Text"), False) == True;
	}

	actions
	{
		Create HUD Text(Host Player, Custom String("Peak: {0}", Server Load Peak), Custom String("Average: {0}", Server Load Average),
			Custom String("Current: {0}", Server Load), Top, -30, White, White, White, Visible To and String, Default Visibility);
	}
}

rule("[Debug] Alert if Debug enabled with multiple players")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.DebugEnabled == True;
		"Is host player the ONLY player? (If dummy bot, remove from check)"
		Remove From Array(Filtered Array(All Players(All Teams), !Is Dummy Bot(Current Array Element)), Host Player) != Empty Array;
	}

	actions
	{
		Big Message(Host Player, Custom String("{0} Please restart to disable debug mode {0}", Icon String(Warning)));
		Play Effect(Host Player, Debuff Impact Sound, White, Host Player, 200);
		Wait(5, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("[Debug] Knockback/Damage bots position (B)")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.DebugEnabled == True;
	}

	actions
	{
		Global.DmgTestBotSpawnerPos[0] = Vector(-15.957, 0, -15.981);
		Create Effect(All Players(All Teams), Sphere, Blue, Global.DmgTestBotSpawnerPos[0], 1, Visible To Position and Radius);
		Create In-World Text(All Players(All Teams), Custom String("Spawn Damage Testing Heroes {0} {1}", Hero Icon String(Hero(McCree)),
			Hero Icon String(Hero(Roadhog))), Global.DmgTestBotSpawnerPos[0] + Up, 1, Clip Against Surfaces,
			Visible To Position and String, Red, Visible Always);
	}
}

rule("[Debug] Spawn Damage Bots")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Global.DebugEnabled == True;
		Is True For Any(Global.DmgTestBotSpawnerPos, Distance Between(Event Player, Current Array Element) <= 1.200) == True;
		Event Player == Host Player;
		Is Button Held(Host Player, Interact) == True;
	}

	actions
	{
		Stop Facing(All Players(All Teams));
		Play Effect(All Players(All Teams), Buff Explosion Sound, White, Event Player, 100);
		Destroy All Dummy Bots;
		Wait(0.250, Ignore Condition);
		Create Dummy Bot(Hero(McCree), All Teams, 1, Vector(-17.568, 2, -11.259), Null);
		Wait(0.250, Ignore Condition);
		Create Dummy Bot(Hero(Roadhog), All Teams, 2, Vector(-11.766, 2, -18.699), Null);
		Start Facing(Players In Slot(1, All Teams), Direction Towards(Eye Position(Players In Slot(1, All Teams)), Host Player + Vector(0,
			0.400, 0)), 100, To World, Direction and Turn Rate);
		Start Facing(Players In Slot(2, All Teams), Direction Towards(Eye Position(Players In Slot(2, All Teams)), Host Player + Vector(0,
			0.400, 0)), 100, To World, Direction and Turn Rate);
		Wait(0.250, Ignore Condition);
	}
}

rule("[Debug] Spawn Status/Ability Test Position (D)")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.DebugEnabled == True;
	}

	actions
	{
		Global.StatusTestBotSpawnerPos[0] = Vector(0, 0, 0);
		Create Effect(All Players(All Teams), Ring, Sky Blue, Global.StatusTestBotSpawnerPos[0], 1, Visible To Position and Radius);
		Create In-World Text(All Players(All Teams), Custom String("Spawn Testing Bot"), Global.StatusTestBotSpawnerPos[0] + Up, 1,
			Clip Against Surfaces, Visible To Position and String, Red, Visible Always);
	}
}

rule("[Debug] Spawn Status/Ability Test Bot")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Global.DebugEnabled == True;
		Is True For Any(Global.StatusTestBotSpawnerPos, Distance Between(Event Player, Current Array Element) <= 1.200) == True;
		Event Player == Host Player;
		Is Button Held(Host Player, Interact) == True;
	}

	actions
	{
		Stop Facing(All Players(All Teams));
		Play Effect(All Players(All Teams), Buff Explosion Sound, White, Event Player, 100);
		Destroy All Dummy Bots;
		Wait(0.250, Ignore Condition);
		Create Dummy Bot(Hero(Junkrat), All Teams, 1, Vector(17.043, 1.424, -0.038), Direction Towards(Eye Position(Players In Slot(1,
			All Teams)), Vector(-95.785, 33.918, 73.376)));
		Start Facing(Players In Slot(1, All Teams), Direction Towards(Eye Position(Players In Slot(1, All Teams)), Eye Position(
			Host Player)), 100, To World, Direction and Turn Rate);
		Wait(2, Ignore Condition);
		Start Holding Button(Players In Slot(1, All Teams), Primary Fire);
		Create HUD Text(Host Player, Custom String("{0} / {1} HP", Health(Players In Slot(1, All Teams)), Max Health(Players In Slot(1,
			All Teams))), Null, Null, Top, 50, White, White, White, Visible To and String, Default Visibility);
	}
}

rule("[Debug] Hello = Death")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Communicating(Event Player, Hello) == True;
		Event Player == Host Player;
		Global.HostCheatsEnabled == True;
	}

	actions
	{
		Set Max Health(Event Player, 300);
		Event Player.IsStatsChanged = True;
	}
}

rule("[Debug] Thanks = Healing")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Communicating(Event Player, Thanks) == True;
		Event Player == Host Player;
		Global.HostCheatsEnabled == True;
	}

	actions
	{
		Start Heal Over Time(Event Player, Event Player, 5, 20);
		Play Effect(Players Within Radius(Event Player, 0.200, All Teams, Surfaces), Buff Explosion Sound, White, Players Within Radius(
			Event Player, 0.200, All Teams, Surfaces), 200);
	}
}

rule("[Debug] Need Healing = Damage Over Time")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Communicating(Event Player, Need Healing) == True;
		Event Player == Host Player;
		Global.HostCheatsEnabled == True;
	}

	actions
	{
		Play Effect(Players Within Radius(Event Player, 0.200, All Teams, Surfaces), Debuff Impact Sound, White, Players Within Radius(
			Event Player, 0.200, All Teams, Surfaces), 200);
		Damage(Event Player, Null, Health(Event Player) - 1);
	}
}

rule("========================[] Gamemode")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}
}

rule("Fast Setup Time")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Assembling Heroes == True;
	}

	actions
	{
		Kill(All Players(All Teams), Null);
		Set Match Time(2);
	}
}

rule("!!! Anti Crash !!!")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.antiCrashActive == False;
		Server Load > 185;
	}

	actions
	{
		Wait(0.200, Abort When False);
		Small Message(All Players(All Teams), Custom String("Anti crash system activated"));
		Set Slow Motion(10);
		Global.antiCrashActive = True;
		Wait(1, Abort When False);
		Loop If Condition Is True;
	}
}

rule("!!! Anti Crash Reset After Returned to Normal !!!")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.antiCrashActive == True;
		Server Load < 175;
	}

	actions
	{
		Set Slow Motion(100);
		Global.antiCrashActive = False;
	}
}

rule("[SUB] SpawnStatsReset")
{
	event
	{
		Subroutine;
		SpawnStatsReset;
	}

	actions
	{
		Remove All Health Pools From Player(Event Player);
		Start Scaling Player(Event Player, 1, False);
		Stop Scaling Player(Event Player);
		"Reset abilities (Cannot be detected by workshop code yet, so activate on every character)"
		Set Primary Fire Enabled(Event Player, True);
		Set Reload Enabled(Event Player, True);
		Set Secondary Fire Enabled(Event Player, True);
		Set Ability 1 Enabled(Event Player, True);
		Set Ability 2 Enabled(Event Player, True);
		Set Ultimate Ability Enabled(Event Player, True);
		Allow Button(Event Player, Primary Fire);
		Allow Button(Event Player, Secondary Fire);
		Allow Button(Event Player, Ability 1);
		Allow Button(Event Player, Ability 2);
		Allow Button(Event Player, Ultimate);
		"If a stats change is in effect on the current player, then reset stats"
		If(Event Player.IsStatsChanged == True);
			Set Max Health(Event Player, 100);
			Set Damage Dealt(Event Player, 100);
			Set Damage Received(Event Player, 100);
			Set Healing Dealt(Event Player, 100);
			Set Projectile Speed(Event Player, 100);
			Set Projectile Gravity(Event Player, 100);
			Set Move Speed(Event Player, 100);
			Set Gravity(Event Player, 100);
			Set Invisible(Event Player, None);
		End;
		"If ANY custom abilities are in-use"
		If(Is True For Any(Event Player.IsUsingAbility, Current Array Element != False));
			Event Player.IsUsingAbility[1] = False;
			Event Player.IsUsingAbility[2] = False;
			Event Player.IsUsingAbility[3] = False;
			Event Player.IsUsingAbility[4] = False;
		End;
		"If any chase variables are not null, stop them and set to null"
		If((Event Player.AbilityVariableChase_I || Event Player.AbilityVariableChase_II) != Null);
			Stop Chasing Player Variable(Event Player, AbilityVariableChase_I);
			Stop Chasing Player Variable(Event Player, AbilityVariableChase_II);
			Event Player.AbilityVariableChase_I = Null;
			Event Player.AbilityVariableChase_II = Null;
		End;
		"Status Effect Apocolypse"
		If(Has Status(Event Player, Hacked) == True);
			Clear Status(Event Player, Hacked);
		End;
		If(Has Status(Event Player, Burning) == True);
			Clear Status(Event Player, Burning);
		End;
		If(Has Status(Event Player, Knocked Down) == True);
			Clear Status(Event Player, Knocked Down);
		End;
		If(Has Status(Event Player, Asleep) == True);
			Clear Status(Event Player, Asleep);
		End;
		If(Has Status(Event Player, Frozen) == True);
			Clear Status(Event Player, Frozen);
		End;
		If(Has Status(Event Player, Unkillable) == True);
			Clear Status(Event Player, Unkillable);
		End;
		If(Has Status(Event Player, Invincible) == True);
			Clear Status(Event Player, Invincible);
		End;
		If(Has Status(Event Player, Phased Out) == True);
			Clear Status(Event Player, Phased Out);
		End;
		If(Has Status(Event Player, Rooted) == True);
			Clear Status(Event Player, Rooted);
		End;
		If(Has Status(Event Player, Stunned) == True);
			Clear Status(Event Player, Stunned);
		End;
		"wait"
		Wait(0.016, Ignore Condition);
	}
}

rule("[SUB] EffectHandler")
{
	event
	{
		Subroutine;
		EffectHandler;
	}

	actions
	{
		"Erase all previous effects"
		While(Event Player.AbilityEffects[0] != 0);
			Destroy Effect(Last Of(Event Player.AbilityEffects));
			Modify Player Variable(Event Player, AbilityEffects, Remove From Array By Value, Last Of(Event Player.AbilityEffects));
			Event Player.AbilityEffects[0] -= 1;
			Wait(0.016, Ignore Condition);
		End;
		"Lucio Custom Effects"
		If(Hero Of(Event Player) == Hero(Lúcio));
			Create Effect(Filtered Array(Filtered Array(Event Player, Is Alive(Event Player) == True), Is Using Ability 1(Event Player)
				!= True), Ring, Blue, Position Of(Event Player), 12, Visible To Position and Radius);
			Modify Player Variable(Event Player, AbilityEffects, Append To Array, Last Created Entity);
			Create Effect(Filtered Array(All Players(All Teams), Event Player.IsUsingAbility[2] == True), Light Shaft, Green, Vector(
				X Component Of(Position Of(Event Player)), Y Component Of(Position Of(Event Player)) - Altitude Of(Event Player),
				Z Component Of(Position Of(Event Player))), 12, Visible To Position and Radius);
			Modify Player Variable(Event Player, AbilityEffects, Append To Array, Last Created Entity);
			Create Effect(Filtered Array(All Players(All Teams), Event Player.IsUsingAbility[2] == True), Ring, Green, Vector(X Component Of(
				Position Of(Event Player)), Y Component Of(Position Of(Event Player)) - Altitude Of(Event Player), Z Component Of(Position Of(
				Event Player))), 12, Visible To Position and Radius);
			Modify Player Variable(Event Player, AbilityEffects, Append To Array, Last Created Entity);
			Event Player.AbilityEffects[0] += 3;
		"Baptiste Custom Effects"
		Else If(Hero Of(Event Player) == Hero(Baptiste));
			Create Effect(Filtered Array(Players Within Radius(Event Player, 5, All Teams, Surfaces), Event Player.IsUsingAbility[1] == True),
				Light Shaft, Yellow, Event Player, 1, Visible To Position and Radius);
			Modify Player Variable(Event Player, AbilityEffects, Append To Array, Last Created Entity);
			Create Effect(Filtered Array(Players Within Radius(Event Player, 5, All Teams, Surfaces), Event Player.IsUsingAbility[1] == True),
				Beacon Sound, Yellow, Event Player, 200, Visible To Position and Radius);
			Modify Player Variable(Event Player, AbilityEffects, Append To Array, Last Created Entity);
			Event Player.AbilityEffects[0] += 2;
		"Baptiste Custom Effects"
		Else If(Hero Of(Event Player) == Hero(Brigitte));
			Create Effect(Filtered Array(Players Within Radius(Event Player, 5, All Teams, Surfaces), Event Player.IsUsingAbility[1] == True),
				Ring, Yellow, Event Player, 1, Visible To Position and Radius);
			Modify Player Variable(Event Player, AbilityEffects, Append To Array, Last Created Entity);
			Create Effect(Filtered Array(Event Player, Event Player.IsUsingAbility[1] == True), Beacon Sound, Yellow, Event Player, 150,
				Visible To Position and Radius);
			Modify Player Variable(Event Player, AbilityEffects, Append To Array, Last Created Entity);
			Event Player.AbilityEffects[0] += 2;
		"Baptiste Custom Effects"
		Else If(Hero Of(Event Player) == Hero(Zarya));
			Create Effect(Filtered Array(All Players(All Teams), Event Player.IsUsingAbility[1] == True), Bad Aura, Purple, Position Of(
				Event Player) + Vector(0, 1.300, 0), 0.333, Visible To Position and Radius);
			Modify Player Variable(Event Player, AbilityEffects, Append To Array, Last Created Entity);
			Create Effect(Filtered Array(Players Within Radius(Event Player, 20, All Teams, Surfaces), Event Player.IsUsingAbility[1] == True),
				Energy Sound, Purple, Event Player, 80, Visible To Position and Radius);
			Modify Player Variable(Event Player, AbilityEffects, Append To Array, Last Created Entity);
			Event Player.AbilityEffects[0] += 2;
		Else;
		End;
	}
}

rule("[SUB] HUDHandler")
{
	event
	{
		Subroutine;
		HUDHandler;
	}

	actions
	{
		"Erase all previous effects"
		While(Event Player.HudText[0] != 0);
			Destroy HUD Text(Last Of(Event Player.HudText));
			Modify Player Variable(Event Player, HudText, Remove From Array By Value, Last Of(Event Player.HudText));
			Event Player.HudText[0] -= 1;
			Wait(0.016, Ignore Condition);
		End;
		"HEROES"
		If(Hero Of(Event Player) == Hero(Ana));
		Else If(Hero Of(Event Player) == Hero(Bastion));
			Wait(0.016, Ignore Condition);
			Create HUD Text(Filtered Array(Filtered Array(Event Player, Event Player.IsUsingAbility[1] == True), Hero Of(Event Player) == Hero(
				Bastion)), Custom String("{1} Cooldown will be {0}s", (160 - Ammo(Event Player, 1)) / 10, Ability Icon String(Hero(Bastion),
				Button(Ability 1))), Null, Null, Top, 1, Red, White, White, Visible To and String, Default Visibility);
			Modify Player Variable(Event Player, HudText, Append To Array, Last Text ID);
			Event Player.HudText[0] = 1;
		Else;
		End;
	}
}

rule("[SUB] InfoHUDDespawner")
{
	event
	{
		Subroutine;
		InfoHUDDespawner;
	}

	actions
	{
		"Erase all previous effects"
		While(Event Player.InfoHUDText[0] != -1);
			Destroy HUD Text(Last Of(Event Player.InfoHUDText));
			Modify Player Variable(Event Player, InfoHUDText, Remove From Array By Value, Last Of(Event Player.InfoHUDText));
			Event Player.InfoHUDText[0] -= 1;
			Wait(0.016, Ignore Condition);
		End;
		Wait(0.016, Ignore Condition);
	}
}

rule("[SUB] InfoHUDHandler")
{
	event
	{
		Subroutine;
		InfoHUDHandler;
	}

	actions
	{
		"PLACEHOLDERS"
		disabled Else If(Hero Of(Event Player) == Hero(Ana));
		"Name of Thing"
		disabled Create HUD Text(Event Player, Custom String("{0} : Name", Ability Icon String(Hero(Ana), Button(Ultimate))), Null, Null, Left, 1,
			Sky Blue, White, White, Visible To and String, Default Visibility);
		disabled Modify Player Variable(Event Player, InfoHUDText, Append To Array, Last Text ID);
		disabled Create HUD Text(Event Player, Null, Null, Custom String("Description"), Left, 2, White, White, White, Visible To and String,
			Default Visibility);
		disabled Modify Player Variable(Event Player, InfoHUDText, Append To Array, Last Text ID);
		disabled Event Player.InfoHUDText[0] = 8;
		Wait(0.016, Ignore Condition);
		Create HUD Text(Event Player, Custom String("{0} : Info", Hero Icon String(Hero Of(Event Player))), Null, Null, Left, 0.100, White,
			White, White, Visible To and String, Default Visibility);
		Modify Player Variable(Event Player, InfoHUDText, Append To Array, Last Text ID);
		"HEROES, ANA"
		If(Hero Of(Event Player) == Hero(Ana));
			"Bio Grenade"
			Create HUD Text(Event Player, Custom String("{0}: Presumed Dead", Ability Icon String(Hero(Genji), Button(Jump))), Null, Null,
				Left, 1, Sky Blue, White, White, Visible To and String, Default Visibility);
			Modify Player Variable(Event Player, InfoHUDText, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Null, Null, Custom String("Gives many more escape tools:"), Left, 2, White, White, White,
				Visible To and String, Default Visibility);
			Modify Player Variable(Event Player, InfoHUDText, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Null, Null, Custom String("{0} provides a large jump if thrown directly downwards while jumping",
				Ability Icon String(Hero(Ana), Button(Ability 2))), Left, 3, White, White, White, Visible To and String, Default Visibility);
			Modify Player Variable(Event Player, InfoHUDText, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Null, Null, Custom String("{0} Gives you a speed boost on hit", Ability Icon String(Hero(Ana),
				Button(Ability 1))), Left, 4, White, White, White, Visible To and String, Default Visibility);
			Modify Player Variable(Event Player, InfoHUDText, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Null, Null, Custom String("(Effects stop and cooldown starts after enemy wake up)"), Left, 5, White,
				White, Red, Visible To and String, Default Visibility);
			Modify Player Variable(Event Player, InfoHUDText, Append To Array, Last Text ID);
			"Ultimate"
			Create HUD Text(Event Player, Custom String("{0} : Nano Volley", Ability Icon String(Hero(Ana), Button(Ultimate))), Null, Null,
				Left, 6, Sky Blue, White, White, Visible To and String, Default Visibility);
			Modify Player Variable(Event Player, InfoHUDText, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Null, Null, Custom String("Throws a volley of {2} at high speeds!", Null, Null, Ability Icon String(
				Hero(Ana), Button(Ability 2))), Left, 7, White, White, White, Visible To and String, Default Visibility);
			Modify Player Variable(Event Player, InfoHUDText, Append To Array, Last Text ID);
			Event Player.InfoHUDText[0] = 7;
		"Ashe"
		Else If(Hero Of(Event Player) == Hero(Ashe));
			"Coach Gun"
			Create HUD Text(Event Player, Custom String("{0} : Double Cross", Ability Icon String(Hero(Genji), Button(Jump))), Null, Null,
				Left, 1, Sky Blue, White, White, Visible To and String, Default Visibility);
			Modify Player Variable(Event Player, InfoHUDText, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Null, Null, Custom String("You can use {0} twice!", Ability Icon String(Hero(Ashe), Button(
				Ability 1))), Left, 2, White, White, White, Visible To and String, Default Visibility);
			Modify Player Variable(Event Player, InfoHUDText, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Null, Null, Custom String("Cooldown starts automatically if second shot is not used"), Left, 3,
				White, White, Red, Visible To and String, Default Visibility);
			Modify Player Variable(Event Player, InfoHUDText, Append To Array, Last Text ID);
			Event Player.InfoHUDText[0] = 3;
		"PLACEHOLDERS"
		Else If(Hero Of(Event Player) == Hero(Baptiste));
			"Name of Thing"
			Create HUD Text(Event Player, Custom String("{0} : Window Of Opportunity...", Ability Icon String(Hero(Baptiste), Button(
				Secondary Fire))), Null, Null, Left, 1, Sky Blue, White, White, Visible To and String, Default Visibility);
			Modify Player Variable(Event Player, InfoHUDText, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Null, Null, Custom String("Provides Baptiste with a matrix that triples his healing recieved"), Left,
				2, White, White, White, Visible To and String, Default Visibility);
			Modify Player Variable(Event Player, InfoHUDText, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Null, Null, Custom String("Cooldown is shared with {0}", Ability Icon String(Hero(Baptiste), Button(
				Ability 2))), Left, 3, White, White, Red, Visible To and String, Default Visibility);
			Modify Player Variable(Event Player, InfoHUDText, Append To Array, Last Text ID);
			Event Player.InfoHUDText[0] = 3;
		"PLACEHOLDERS"
		Else If(Hero Of(Event Player) == Hero(Bastion));
			"Name of Thing"
			Create HUD Text(Event Player, Custom String("{0} : Reconfigure", Ability Icon String(Hero(Bastion), Button(Ability 1))), Null,
				Null, Left, 1, Sky Blue, White, White, Visible To and String, Default Visibility);
			Modify Player Variable(Event Player, InfoHUDText, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Null, Null, Custom String("{0} has limited ammo that regenerates outside of {0} form",
				Ability Icon String(Hero(Bastion), Button(Primary Fire))), Left, 2, White, White, White, Visible To and String,
				Default Visibility);
			Modify Player Variable(Event Player, InfoHUDText, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Null, Null, Custom String("You can only {0} after a set time based on how much ammo was used",
				Ability Icon String(Hero(Bastion), Button(Ability 1))), Left, 4, White, White, Red, Visible To and String, Default Visibility);
			Modify Player Variable(Event Player, InfoHUDText, Append To Array, Last Text ID);
			"Name of Thing"
			Create HUD Text(Event Player, Custom String("{0} : Null Wrecker", Ability Icon String(Hero(Bastion), Button(Ultimate))), Null,
				Null, Left, 5, Sky Blue, White, White, Visible To and String, Default Visibility);
			Modify Player Variable(Event Player, InfoHUDText, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Null, Null, Custom String("Bastion's shots are super powerful"), Left, 6, White, White, White,
				Visible To and String, Default Visibility);
			Modify Player Variable(Event Player, InfoHUDText, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Null, Null, Custom String("You can no longer move in this form, and it is much shorter"), Left, 7,
				White, White, Red, Visible To and String, Default Visibility);
			Modify Player Variable(Event Player, InfoHUDText, Append To Array, Last Text ID);
			Event Player.InfoHUDText[0] = 7;
		"PLACEHOLDERS"
		Else If(Hero Of(Event Player) == Hero(Brigitte));
			"Name of Thing"
			Create HUD Text(Event Player, Custom String("{0} : Proven Mettle", Ability Icon String(Hero(Brigitte), Button(Ability 2))), Null,
				Null, Left, 1, Sky Blue, White, White, Visible To and String, Default Visibility);
			Modify Player Variable(Event Player, InfoHUDText, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Null, Null, Custom String("Provides a speed buff when used"), Left, 2, White, White, White,
				Visible To and String, Default Visibility);
			Modify Player Variable(Event Player, InfoHUDText, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Null, Null, Custom String("Length of buff changes depending on charge"), Left, 3, White, White,
				White, Visible To and String, Default Visibility);
			Modify Player Variable(Event Player, InfoHUDText, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Null, Null, Custom String("Using 3 charges provides temporary armor"), Left, 4, White, White, White,
				Visible To and String, Default Visibility);
			Modify Player Variable(Event Player, InfoHUDText, Append To Array, Last Text ID);
			Event Player.InfoHUDText[0] = 4;
		"PLACEHOLDERS"
		Else If(Hero Of(Event Player) == Hero(McCree));
			"Name of Thing"
			Create HUD Text(Event Player, Custom String("{0}: Draw", Ability Icon String(Hero(Genji), Button(Jump))), Null, Null, Left, 1,
				Sky Blue, White, White, Visible To and String, Default Visibility);
			Modify Player Variable(Event Player, InfoHUDText, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Null, Null, Custom String("Critical hits lowers your {0} cooldown slightly", Ability Icon String(
				Hero(McCree), Button(Ability 1))), Left, 2, White, White, White, Visible To and String, Default Visibility);
			Modify Player Variable(Event Player, InfoHUDText, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Null, Null, Custom String("Getting a kill resets your {0} cooldown", Ability Icon String(Hero(
				McCree), Button(Ability 1))), Left, 3, White, White, White, Visible To and String, Default Visibility);
			Modify Player Variable(Event Player, InfoHUDText, Append To Array, Last Text ID);
			"Name of Thing"
			Create HUD Text(Event Player, Custom String("{0}: Fan the Hammer", Ability Icon String(Hero(McCree), Button(Secondary Fire))),
				Null, Null, Left, 4, Sky Blue, White, White, Visible To and String, Default Visibility);
			Modify Player Variable(Event Player, InfoHUDText, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Null, Null, Custom String("Saves the rest of your bullets on elimination", Ability Icon String(Hero(
				McCree), Button(Ability 1))), Left, 5, White, White, White, Visible To and String, Default Visibility);
			Modify Player Variable(Event Player, InfoHUDText, Append To Array, Last Text ID);
			Event Player.InfoHUDText[0] = 5;
		"PLACEHOLDERS"
		Else If(Hero Of(Event Player) == Hero(Lúcio));
			"Name of Thing"
			Create HUD Text(Event Player, Custom String("{0} : Damage Boost Song", Ability Icon String(Hero(Lúcio), Button(Ability 1))), Null,
				Null, Left, 1, Sky Blue, White, White, Visible To and String, Default Visibility);
			Modify Player Variable(Event Player, InfoHUDText, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Null, Null, Custom String("Heal song has been replaced with Damage Boost song"), Left, 2, White,
				White, White, Visible To and String, Default Visibility);
			Modify Player Variable(Event Player, InfoHUDText, Append To Array, Last Text ID);
			"Name of Thing"
			Create HUD Text(Event Player, Custom String("{0} : Subwoofer Blowout", Ability Icon String(Hero(Lúcio), Button(Ultimate))), Null,
				Null, Left, 3, Sky Blue, White, White, Visible To and String, Default Visibility);
			Modify Player Variable(Event Player, InfoHUDText, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Null, Null, Custom String("Landing knocks all enemies within your song radius upwards"), Left, 4,
				White, White, White, Visible To and String, Default Visibility);
			Modify Player Variable(Event Player, InfoHUDText, Append To Array, Last Text ID);
			Event Player.InfoHUDText[0] = 4;
		"PLACEHOLDERS"
		Else If(Hero Of(Event Player) == Hero(Mei));
			"Name of Thing"
			Create HUD Text(Event Player, Custom String("{0} : Chilled", Ability Icon String(Hero(Genji), Button(Jump))), Null, Null, Left, 1,
				Sky Blue, White, White, Visible To and String, Default Visibility);
			Modify Player Variable(Event Player, InfoHUDText, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Null, Null, Custom String("Enemies damaged by Mei deal less damage for a short time"), Left, 2,
				White, White, White, Visible To and String, Default Visibility);
			Modify Player Variable(Event Player, InfoHUDText, Append To Array, Last Text ID);
			"Name of Thing"
			Create HUD Text(Event Player, Custom String("{0} : Ice Wall", Ability Icon String(Hero(Mei), Button(Ability 2))), Null, Null, Left,
				3, Sky Blue, White, White, Visible To and String, Default Visibility);
			Modify Player Variable(Event Player, InfoHUDText, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Null, Null, Custom String(
				"Note: There is a visual bug with Mei's HP while placing {0}. Actual damage taken is not changed.", Ability Icon String(Hero(
				Mei), Button(Ability 2))), Left, 4, White, White, Orange, Visible To and String, Default Visibility);
			Modify Player Variable(Event Player, InfoHUDText, Append To Array, Last Text ID);
			Event Player.InfoHUDText[0] = 4;
		"PLACEHOLDERS"
		Else If(Hero Of(Event Player) == Hero(Pharah));
			"Name of Thing"
			Create HUD Text(Event Player, Custom String("{0} : Guardian's Haste", Ability Icon String(Hero(Genji), Button(Jump))), Null, Null,
				Left, 1, Sky Blue, White, White, Visible To and String, Default Visibility);
			Modify Player Variable(Event Player, InfoHUDText, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Null, Null, Custom String("Pressing Crouch while using {0} blasts you forwards", Ability Icon String(
				Hero(Pharah), Button(Ability 1))), Left, 2, White, White, White, Visible To and String, Default Visibility);
			Modify Player Variable(Event Player, InfoHUDText, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Null, Null, Custom String("Halves your cooldown", Ability Icon String(Hero(Pharah), Button(
				Ability 1))), Left, 3, White, White, White, Visible To and String, Default Visibility);
			Modify Player Variable(Event Player, InfoHUDText, Append To Array, Last Text ID);
			Event Player.InfoHUDText[0] = 3;
		"PLACEHOLDERS"
		Else If(Hero Of(Event Player) == Hero(Zarya));
			"Name of Thing"
			Create HUD Text(Event Player, Custom String("{0} : Particle Flux", Ability Icon String(Hero(Zarya), Button(Ability 2))), Null,
				Null, Left, 1, Sky Blue, White, White, Visible To and String, Default Visibility);
			Modify Player Variable(Event Player, InfoHUDText, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Null, Null, Custom String("Converts Zarya's shields into ammo (2:1 ratio)"), Left, 2, White, White,
				White, Visible To and String, Default Visibility);
			Modify Player Variable(Event Player, InfoHUDText, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Null, Null, Custom String("Ammo above Max Ammo goes away after a visible timer"), Left, 3, White,
				White, Red, Visible To and String, Default Visibility);
			Modify Player Variable(Event Player, InfoHUDText, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Null, Null, Custom String("Cooldown starts after Ammo returns to under Max Ammo"), Left, 4, White,
				White, Red, Visible To and String, Default Visibility);
			Modify Player Variable(Event Player, InfoHUDText, Append To Array, Last Text ID);
			Event Player.InfoHUDText[0] = 4;
		"ENDING"
		Else;
			"Missing Info"
			Create HUD Text(Event Player, Custom String("{0} Info Missing {0}", Icon String(X)), Null, Null, Left, 1, Red, White, White,
				Visible To and String, Default Visibility);
			Modify Player Variable(Event Player, InfoHUDText, Append To Array, Last Text ID);
			Event Player.InfoHUDText[0] = 1;
	}
}

rule("Per-Hero Info Notification")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Create HUD Text(All Players(All Teams), Null, Null, Custom String("Use voice line up for per-hero info"), Left, -100, White, White,
			White, Visible To and String, Visible Never);
	}
}

rule("Info Handler")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Communicating(Event Player, Voice Line Up) == True;
	}

	actions
	{
		"Despawn all previous things"
		Call Subroutine(InfoHUDDespawner);
		"Get and Display Info"
		Call Subroutine(InfoHUDHandler);
		"Check for player deaths"
		Wait(4, Restart When True);
		Abort If(Is Dead(Event Player) == True);
		Wait(4, Restart When True);
		Abort If(Is Dead(Event Player) == True);
		Wait(4, Restart When True);
		Abort If(Is Dead(Event Player) == True);
		Wait(4, Restart When True);
		Abort If(Is Dead(Event Player) == True);
		Wait(4, Restart When True);
		Abort If(Is Dead(Event Player) == True);
		"Despawn all previous Info HUDs"
		Call Subroutine(InfoHUDDespawner);
	}
}

rule("Initialize EVERY Character")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Alive(Event Player) == True;
		Has Spawned(Event Player) == True;
		Health(Event Player) != 0;
	}

	actions
	{
		"Reset ULT charge to 0"
		Set Ultimate Charge(Event Player, 0);
		"Reset stats as needed"
		Call Subroutine(SpawnStatsReset);
		"Spawn hero-specific effects"
		Call Subroutine(EffectHandler);
		"Reset hero-specific HUDs"
		Call Subroutine(HUDHandler);
		"Reset hero-specific Info HUDs"
		Call Subroutine(InfoHUDDespawner);
		"Ashe Custom Stats"
		If(Hero Of(Event Player) == Hero(Ashe));
			Event Player.AbilityVariables[1] = 2;
		"Baptiste Custom Stats"
		Else If(Hero Of(Event Player) == Hero(Baptiste));
			Set Secondary Fire Enabled(Event Player, False);
		"Brigitte Custom Stats"
		Else If(Hero Of(Event Player) == Hero(Brigitte));
			Set Damage Dealt(Event Player, 40 / 35 * 100);
			Event Player.IsStatsChanged = True;
		"Bastion Custom Stats"
		Else If(Hero Of(Event Player) == Hero(Bastion));
			Add Health Pool To Player(Event Player, Health, 100, True, True);
			Wait(0.016, Ignore Condition);
		"McCree custom stats"
		Else If(Hero Of(Event Player) == Hero(McCree));
			Event Player.AbilityVariables[2] = True;
			Event Player.AbilityVariables[1] = 0;
		"Lucio Custom Stats"
		Else If(Hero Of(Event Player) == Hero(Lúcio));
			Set Healing Dealt(Event Player, 0);
			Event Player.IsStatsChanged = True;
			Event Player.IsUsingAbility[1] = True;
		"Baptiste Custom Stats"
		Else If(Hero Of(Event Player) == Hero(Mei));
			Add Health Pool To Player(Event Player, Health, 195, True, False);
			Start Scaling Player(Event Player, 1.100, True);
		"Baptiste Custom Stats"
		Else If(Hero Of(Event Player) == Hero(Zarya));
			disabled Set Max Health(Event Player, 50);
		"Force Wait"
		End;
		Wait(0.016, Ignore Condition);
	}
}

rule("[Ashe] Coach Gun")
{
	event
	{
		Ongoing - Each Player;
		All;
		Ashe;
	}

	conditions
	{
		Is Using Ability 1(Event Player) == True;
	}

	actions
	{
		Event Player.AbilityVariables[1] -= 1;
		"If ammo is still in the clip, then..."
		If(Event Player.AbilityVariables[1] > 0);
			"WAIT FOR ABILITY TO END"
			While(Is Using Ability 1(Event Player) == True);
				Wait(0.016, Ignore Condition);
			End;
			"Set Cooldown to 0 for second shot"
			Set Ability Cooldown(Event Player, Button(Ability 1), 0);
			Wait(2.250, Restart When True);
			Abort If(Is Dead(Event Player) == True);
			"Abort if already shot"
			Abort If(Event Player.AbilityVariables[1] == 0);
			"Remove extra shot"
			Event Player.AbilityVariables[1] = 0;
			Set Ability Cooldown(Event Player, Button(Ability 1), 10);
		"If out of ammo"
		Else If(Event Player.AbilityVariables[1] == 0);
			Wait(0.200, Ignore Condition);
			Set Ability Cooldown(Event Player, Button(Ability 1), 10);
		End;
	}
}

rule("[Ashe] Coach Gun (Cooldown at 0)")
{
	event
	{
		Ongoing - Each Player;
		All;
		Ashe;
	}

	conditions
	{
		Ability Cooldown(Event Player, Button(Ability 1)) == 0;
		Event Player.AbilityVariables[1] == 0;
	}

	actions
	{
		Wait(0.016, Abort When False);
		Event Player.AbilityVariables[1] = 2;
	}
}

rule("[Bastion] Turret Ability Transform")
{
	event
	{
		Ongoing - Each Player;
		All;
		Bastion;
	}

	conditions
	{
		Is Using Ability 1(Event Player) == True;
		Is Alive(Event Player) == True;
	}

	actions
	{
		If(Event Player.IsUsingAbility[1] == False);
			Disallow Button(Event Player, Ability 1);
			Wait(0.016, Ignore Condition);
			Loop If(Is Using Ability 1(Event Player) == True);
			Set Max Ammo(Event Player, 1, 160);
			Set Ammo(Event Player, 1, 160);
			Set Reload Enabled(Event Player, False);
			Event Player.IsUsingAbility[1] = True;
			Allow Button(Event Player, Ability 1);
		Else If(Event Player.IsUsingAbility[1] == True);
			Disallow Button(Event Player, Ability 1);
			Wait(0.016, Ignore Condition);
			Loop If(Is Using Ability 1(Event Player) == True);
			Set Reload Enabled(Event Player, True);
			Set Damage Dealt(Event Player, 100);
			Event Player.IsUsingAbility[1] = False;
			Allow Button(Event Player, Ability 1);
		End;
	}
}

rule("[Bastion] turret ammo display fix")
{
	event
	{
		Ongoing - Each Player;
		All;
		Bastion;
	}

	conditions
	{
		Event Player.IsUsingAbility[1] == False;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Wait(0.017, Ignore Condition);
		Set Max Ammo(Event Player, 1, 160);
		Event Player.AbilityVariables[1] = (160 - Ammo(Event Player, 1)) / 10;
		While(Event Player.AbilityVariables[1] != 0);
			Event Player.AbilityVariables[1] -= 0.100;
			Wait(0.100, Ignore Condition);
		End;
	}
}

rule("[Bastion] Ulting (in turret mode)")
{
	event
	{
		Ongoing - Each Player;
		All;
		Bastion;
	}

	conditions
	{
		Is Alive(Event Player) == True;
		Is Using Ultimate(Event Player) == True;
		Is Alive(Event Player) == True;
	}

	actions
	{
		"If Bastion is still in turret"
		If(Event Player.IsUsingAbility[1] == True);
			Disallow Button(Event Player, Ability 1);
			Set Move Speed(Event Player, 100);
			Set Damage Dealt(Event Player, 100);
			Event Player.IsUsingAbility[1] = False;
			Wait(0.016, Ignore Condition);
		End;
		Set Status(Event Player, Null, Rooted, 6.600);
		Set Damage Dealt(Event Player, 300 / 102.500 * 100);
		Stop Accelerating(Event Player);
		Wait(5.500, Ignore Condition);
		Abort If(Is Alive(Event Player) == False);
		Set Damage Dealt(Event Player, 100);
	}
}

rule("[Bastion] turret unlock on cooldown finish")
{
	event
	{
		Ongoing - Each Player;
		All;
		Bastion;
	}

	conditions
	{
		Event Player.IsUsingAbility[1] == False;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Wait(0.017, Ignore Condition);
		Disallow Button(Event Player, Ability 1);
		Set Ability 1 Enabled(Event Player, False);
		Wait((160 - Ammo(Event Player, 1)) / 10, Abort When False);
		Allow Button(Event Player, Ability 1);
		Set Ability 1 Enabled(Event Player, True);
		Event Player.AbilityVariables[1] = (160 - Ammo(Event Player, 1)) / 10;
	}
}

rule("[Bastion] auto-transform out of ammo")
{
	event
	{
		Ongoing - Each Player;
		All;
		Bastion;
	}

	conditions
	{
		Ammo(Event Player, 1) == 0;
		Event Player.IsUsingAbility[1] == True;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Press Button(Event Player, Ability 1);
	}
}

rule("[Bastion] (Knock Down Cooldown Fix)")
{
	event
	{
		Ongoing - Each Player;
		All;
		Bastion;
	}

	conditions
	{
		"Is hacked, shattered, or asleep?"
		(Has Status(Event Player, Hacked) || Has Status(Event Player, Knocked Down) || Has Status(Event Player, Asleep)) == True;
		Event Player.IsUsingAbility[1] == True;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Set Move Speed(Event Player, 100);
		Set Damage Dealt(Event Player, 100);
		Event Player.IsUsingAbility[1] = False;
		Stop Accelerating(Event Player);
	}
}

rule("[Bastion] (Roadhog Hook Fix)")
{
	event
	{
		Player Took Damage;
		All;
		Bastion;
	}

	conditions
	{
		Has Status(Event Player, Stunned) == True;
		Event Player.IsUsingAbility[1] == True;
		Hero Of(Attacker) == Hero(Roadhog);
		Is Alive(Event Player) == True;
	}

	actions
	{
		Wait(0.016, Ignore Condition);
		Loop If Condition Is True;
		Set Move Speed(Event Player, 100);
		Set Damage Dealt(Event Player, 100);
		Event Player.IsUsingAbility[1] = False;
		Stop Accelerating(Event Player);
	}
}

rule("[McCree] Headshot reduces cooldowns")
{
	event
	{
		Player Dealt Damage;
		All;
		McCree;
	}

	conditions
	{
		Event Was Critical Hit == True;
	}

	actions
	{
		Wait(0.016, Ignore Condition);
		Skip If(Is Dead(Victim) == True, 2);
		Set Ability Cooldown(Event Player, Button(Ability 1), Ability Cooldown(Event Player, Button(Ability 1)) - 1);
	}
}

rule("[McCree] Cooldown resets on kills")
{
	event
	{
		Player Earned Elimination;
		All;
		McCree;
	}

	actions
	{
		If(Is Using Ultimate(Event Player) == False);
			Cancel Primary Action(Event Player);
		End;
		Set Ability Cooldown(Event Player, Button(Ability 1), 0);
		Play Effect(Event Player, Buff Impact Sound, White, Event Player, 60);
	}
}

rule("[Lucio] Damage Boost song replaces heal song")
{
	event
	{
		Ongoing - Each Player;
		All;
		Lúcio;
	}

	conditions
	{
		Is Using Ability 1(Event Player) == False;
		Is Using Ability 2(Event Player) == False;
	}

	actions
	{
		Set Damage Dealt(Event Player, 125);
		Event Player.IsUsingAbility[1] = False;
	}
}

rule("[Lucio] Amp Damage Boost")
{
	event
	{
		Ongoing - Each Player;
		All;
		Lúcio;
	}

	conditions
	{
		Is Using Ability 2(Event Player) == True;
		Is Using Ability 1(Event Player) == False;
	}

	actions
	{
		Event Player.IsUsingAbility[1] = False;
		Set Damage Dealt(Event Player, 150);
		Wait(0.016, Ignore Condition);
		Loop If Condition Is True;
		Skip If(Is Using Ability 1(Event Player) == False, 1);
		Set Damage Dealt(Event Player, 100);
	}
}

rule("[Lucio] Speed Boost disables Damage Boost")
{
	event
	{
		Ongoing - Each Player;
		All;
		Lúcio;
	}

	conditions
	{
		Is Using Ability 1(Event Player) == True;
	}

	actions
	{
		Set Damage Dealt(Event Player, 100);
		Event Player.IsUsingAbility[1] = True;
	}
}

rule("[Lucio] Ultimate")
{
	event
	{
		Ongoing - Each Player;
		All;
		Lúcio;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		Event Player.IsUsingAbility[2] = True;
		Wait(0.050, Ignore Condition);
		While(Is In Air(Event Player) == True);
			Wait(0.016, Ignore Condition);
			Abort If(Is Dead(Event Player) == True);
		End;
		Apply Impulse(Remove From Array(Players Within Radius(Event Player, 12, All Teams, Surfaces And All Barriers), Event Player),
			Vector(0, 1.300, 0), 11.500, To World, Cancel Contrary Motion);
		Damage(Remove From Array(Players Within Radius(Event Player, 12, All Teams, Surfaces And All Barriers), Event Player),
			Event Player, 25);
		Event Player.IsUsingAbility[2] = False;
	}
}

rule("[Ana] Jump Grenade")
{
	event
	{
		Ongoing - Each Player;
		All;
		Ana;
	}

	conditions
	{
		Is Using Ability 2(Event Player) == True;
		Is Using Ultimate(Event Player) == False;
		Is Jumping(Event Player) == True;
	}

	actions
	{
		Abort If(Vertical Facing Angle Of(Event Player) < 50);
		Abort If(Altitude Of(Event Player) > 2);
		Apply Impulse(Event Player, Up, 15, To World, Cancel Contrary Motion);
		Abort If(Event Player.IsUsingAbility[1] == True);
		Set Move Speed(Event Player, 133);
		Wait(2, Ignore Condition);
		Abort If(Is Using Ultimate(Event Player) == True);
		Abort If(Event Player.IsUsingAbility[1] == True);
		Set Move Speed(Event Player, 100);
	}
}

rule("[Ana] Sleep Dart Changes")
{
	event
	{
		Player Dealt Damage;
		All;
		Ana;
	}

	conditions
	{
		Event Damage <= 7.500;
	}

	actions
	{
		Wait(0.010, Abort When False);
		Abort If(Has Status(Victim, Asleep) == False);
		Disallow Button(Event Player, Ultimate);
		Event Player.IsUsingAbility[1] = True;
		Set Move Speed(Event Player, 140);
		Set Ability Cooldown(Event Player, Button(Ability 2), Ability Cooldown(Event Player, Button(Ability 2)) - 3);
		While(Has Status(Victim, Asleep) == True);
			Set Ability Cooldown(Event Player, Button(Ability 1), 9);
			Wait(0.010, Ignore Condition);
		End;
		Event Player.IsUsingAbility[1] = False;
		Set Ability Cooldown(Event Player, Button(Ability 1), 9);
		Set Move Speed(Event Player, 100);
		Allow Button(Event Player, Ultimate);
	}
}

rule("[Ana] Ultimate: Biotic Volley")
{
	event
	{
		Ongoing - Each Player;
		All;
		Ana;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		Set Secondary Fire Enabled(Event Player, False);
		Set Primary Fire Enabled(Event Player, False);
		Set Ability 1 Enabled(Event Player, False);
		Set Projectile Speed(Event Player, 140);
		Set Damage Dealt(Event Player, 35 / 90 * 100);
		Set Healing Dealt(Event Player, 15);
		Set Move Speed(Event Player, 150);
		While(Is Using Ultimate(Event Player) == True);
			Cancel Primary Action(Event Player);
			Set Ability Cooldown(Event Player, Button(Ability 2), 0);
			Wait(1 / 5, Ignore Condition);
			Press Button(Event Player, Ability 2);
		End;
		Set Secondary Fire Enabled(Event Player, True);
		Set Primary Fire Enabled(Event Player, True);
		Set Ability 1 Enabled(Event Player, True);
		Set Projectile Speed(Event Player, 100);
		Set Damage Dealt(Event Player, 100);
		Set Healing Dealt(Event Player, 100);
		Set Move Speed(Event Player, 100);
		Set Ability Cooldown(Event Player, Button(Ability 2), 0);
	}
}

rule("[Mei] IceWall Duration")
{
	event
	{
		Ongoing - Each Player;
		All;
		Mei;
	}

	conditions
	{
		Is Using Ability 2(Event Player) == True;
		Is Button Held(Event Player, Primary Fire) == True;
	}

	actions
	{
		Wait(4, Ignore Condition);
		Abort If(Is Using Ability 2(Event Player) == False);
		Press Button(Event Player, Ability 2);
	}
}

rule("[Mei] IceBlock Duration")
{
	event
	{
		Ongoing - Each Player;
		All;
		Mei;
	}

	conditions
	{
		Is Using Ability 1(Event Player) == True;
	}

	actions
	{
		Wait(3, Abort When False);
		Press Button(Event Player, Primary Fire);
	}
}

rule("[Pharah] Jump Jets Forward")
{
	event
	{
		Ongoing - Each Player;
		All;
		Pharah;
	}

	conditions
	{
		Is Using Ability 1(Event Player) == True;
	}

	actions
	{
		If(Is Button Held(Event Player, Crouch) == True);
			Apply Impulse(Event Player, Vector(0, -1.250, 2), 17.666, To Player, Incorporate Contrary Motion);
			Set Ability Cooldown(Event Player, Button(Ability 1), 6);
		Else;
		End;
	}
}

rule("[Baptiste] Window Of Opportunity... Secondary Fire")
{
	event
	{
		Ongoing - Each Player;
		All;
		Baptiste;
	}

	conditions
	{
		Is Button Held(Event Player, Secondary Fire) == True;
		Ability Cooldown(Event Player, Button(Ability 2)) == 0;
		Is Using Ability 2(Event Player) == False;
		Is Alive(Event Player) == True;
		Is Communicating Any Emote(Event Player) == False;
	}

	actions
	{
		Set Ability Cooldown(Event Player, Button(Ability 2), Ability Cooldown(Event Player, Button(Ability 2)) + 20);
		Event Player.IsUsingAbility[1] = True;
		Event Player.IsStatsChanged = True;
		Set Healing Received(Event Player, 300);
		Play Effect(Event Player, Buff Explosion Sound, White, Event Player, 100);
		Wait(5.500, Ignore Condition);
		Set Healing Received(Event Player, 100);
		Event Player.IsUsingAbility[1] = Null;
		Event Player.IsStatsChanged = False;
	}
}

rule("[Brigitte] Overload/Proven Mettle")
{
	event
	{
		Ongoing - Each Player;
		All;
		Brigitte;
	}

	conditions
	{
		Is Button Held(Event Player, Ability 2) == True;
	}

	actions
	{
		If(Ability Charge(Event Player, Button(Ability 2)) == 3);
			Set Ability 2 Enabled(Event Player, False);
			Set Ability Charge(Event Player, Button(Ability 2), 0);
			Event Player.IsUsingAbility[1] = True;
			Add Health Pool To Player(Event Player, Armor, 50, False, True);
			Set Move Speed(Event Player, 130);
			Wait(5, Ignore Condition);
			Set Ability 2 Enabled(Event Player, True);
			Set Move Speed(Event Player, 100);
			Event Player.IsUsingAbility[1] = False;
			Remove All Health Pools From Player(Event Player);
		Else If(Ability Charge(Event Player, Button(Ability 2)) >= 2);
			Set Ability Charge(Event Player, Button(Ability 2), 0);
			Event Player.IsUsingAbility[1] = True;
			Set Move Speed(Event Player, 130);
			Set Ability 2 Enabled(Event Player, False);
			Wait(5, Ignore Condition);
			Set Ability 2 Enabled(Event Player, True);
			Set Move Speed(Event Player, 100);
			Event Player.IsUsingAbility[1] = False;
		Else If(Ability Charge(Event Player, Button(Ability 2)) >= 1);
			Set Ability Charge(Event Player, Button(Ability 2), 0);
			Event Player.IsUsingAbility[1] = True;
			Set Move Speed(Event Player, 130);
			Set Ability 2 Enabled(Event Player, False);
			Wait(3, Ignore Condition);
			Set Ability 2 Enabled(Event Player, True);
			Set Move Speed(Event Player, 100);
			Event Player.IsUsingAbility[1] = False;
		Else;
		End;
		Set Ability Resource(Event Player, Button(Ability 2), 0);
	}
}

rule("[Zarya] Ability 2 start")
{
	event
	{
		Ongoing - Each Player;
		All;
		Zarya;
	}

	conditions
	{
		Is Button Held(Event Player, Ability 2) == True;
		Ability Cooldown(Event Player, Button(Ability 2)) == 0;
		Is Using Ability 1(Event Player) == False;
		Has Spawned(Event Player) == True;
		Health Of Type(Event Player, Shields) >= 50;
	}

	actions
	{
		"cooldown management"
		Set Ability 2 Enabled(Event Player, False);
		Set Ammo(Event Player, 0, Ammo(Event Player, 0) + Health Of Type(Event Player, Shields) * (1 / 2));
		Damage(Event Player, Null, Health Of Type(Event Player, Shields));
		Play Effect(All Players(All Teams), Ring Explosion, Purple, Event Player, 8);
		Wait(0.100, Ignore Condition);
		If(Ammo(Event Player, 0) > Max Ammo(Event Player, 0));
			Set Ability Cooldown(Event Player, Button(Ability 2), 7);
		Else If(Ammo(Event Player, 0) <= Max Ammo(Event Player, 0));
			Set Ability Cooldown(Event Player, Button(Ability 2), 15.900);
	}
}

rule("[Zarya] Cooldown starts upon less than max ammo")
{
	event
	{
		Ongoing - Each Player;
		All;
		Zarya;
	}

	conditions
	{
		Ammo(Event Player, 0) > Max Ammo(Event Player, 0);
		Is Alive(Event Player) == True;
	}

	actions
	{
		While(Ammo(Event Player, 0) > Max Ammo(Event Player, 0));
			Wait(0.016, Ignore Condition);
			Abort If(Is Alive(Event Player) == False);
		End;
		Set Ability Cooldown(Event Player, Button(Ability 2), 16);
		Play Effect(Event Player, Debuff Impact Sound, White, Event Player, 25);
		Set Ability 2 Enabled(Event Player, True);
	}
}

rule("[Zarya] \"Overheal Ammo\" goes away after time")
{
	event
	{
		Ongoing - Each Player;
		All;
		Zarya;
	}

	conditions
	{
		Ammo(Event Player, 0) > Max Ammo(Event Player, 0);
		Is Alive(Event Player) == True;
	}

	actions
	{
		Wait(7, Abort When False);
		Set Ammo(Event Player, 0, Max Ammo(Event Player, 0));
		Play Effect(Event Player, Debuff Impact Sound, White, Event Player, 200);
	}
}

rule("[Zarya] Ability 2 disabled by Ability 1")
{
	event
	{
		Ongoing - Each Player;
		All;
		Zarya;
	}

	conditions
	{
		Is Using Ability 1(Event Player) == True;
	}

	actions
	{
		Set Ability 2 Enabled(Event Player, False);
	}
}

rule("[Zarya] Ability 2 disabled by too low HP")
{
	event
	{
		Ongoing - Each Player;
		All;
		Zarya;
	}

	conditions
	{
		Ability Cooldown(Event Player, Button(Ability 2)) == 0;
		Is Using Ability 1(Event Player) == False;
		Health Of Type(Event Player, Shields) < 50;
	}

	actions
	{
		Set Ability 2 Enabled(Event Player, False);
	}
}

rule("[Zarya] Ability 2 enabled when Ability 1 is over AND HP is high enough")
{
	event
	{
		Ongoing - Each Player;
		All;
		Zarya;
	}

	conditions
	{
		Ability Cooldown(Event Player, Button(Ability 2)) == 0;
		Is Using Ability 1(Event Player) == False;
		Health Of Type(Event Player, Shields) >= 50;
	}

	actions
	{
		Set Ability 2 Enabled(Event Player, True);
	}
}

rule("[Lucio] Damage song boosts boop")
{
	event
	{
		Player Received Knockback;
		All;
		All;
	}

	conditions
	{
		Hero Of(Attacker) == Hero(Lúcio);
		Is Using Ability 1(Attacker) == False;
		Is Using Ability 2(Attacker) == False;
	}

	actions
	{
		Apply Impulse(Event Player, Event Direction, 10, To World, Incorporate Contrary Motion);
	}
}

rule("[Lucio] Damage amp boosts boop more")
{
	event
	{
		Player Received Knockback;
		All;
		All;
	}

	conditions
	{
		Hero Of(Attacker) == Hero(Lúcio);
		Is Using Ability 2(Attacker) == True;
		Is Using Ability 1(Attacker) == False;
	}

	actions
	{
		Apply Impulse(Event Player, Event Direction, 15, To World, Incorporate Contrary Motion);
	}
}
