settings
{
	lobby
	{
		Map Rotation: After A Game
		Match Voice Chat: Enabled
		Max FFA Players: 8
		Max Spectators: 6
		Return To Lobby: Never
		Swap Teams After Match: No
		Use Experimental Update If Available: Yes
	}

	modes
	{
		Deathmatch
		{
			enabled maps
			{
				Workshop Island
			}
		}

		disabled Elimination
		{
			Limited Choice Pool: Team Size
			Score To Win: 5
		}

		General
		{
			Game Mode Start: Manual
			Hero Limit: Off
			Spawn Health Packs: Enabled
		}
	}

	heroes
	{
		General
		{
			Ultimate Generation: 140%

			Ashe
			{
				Ammunition Clip Size Scalar: 133%
				Coach Gun Cooldown Time: 1%
				Coach Gun Knockback Scalar Enemy: 50%
				Coach Gun Knockback Scalar Self: 85%
				Damage Dealt: 85%
				Dynamite Cooldown Time: 165%
				Dynamite Fuse Time Scalar: 40%
				Projectile Gravity: 400%
				Projectile Speed: 115%
				Ultimate Duration: 45%
				Ultimate Generation - Combat B.O.B.: 175%
			}

			Bastion
			{
				Ammunition Clip Size Scalar: 71%
				Configuration: Tank Weapon Knockback Scalar: 150%
				Damage Dealt: 75%
				Healing Dealt: 150%
				Self-Repair Maximum Time: 125%
				Self-Repair Recharge Rate: 30%
				Ultimate Duration: 50%
				Ultimate Generation Configuration: Tank: 70%
			}

			Hanzo
			{
				Lunge Cooldown Time: 80%
				Sonic Arrow Cooldown Time: 84%
			}

			Lúcio
			{
				Ultimate Generation - Combat Sound Barrier: 135%
			}

			McCree
			{
				Combat Roll Cooldown Time: 80%
				Damage Dealt: 115%
				No Ammunition Requirement: On
			}

			Pharah
			{
				Ammunition Clip Size Scalar: 67%
				Hover Jets: Off
				Jump Jet Acceleration Scalar: 37%
				Jump Jet Cooldown Time: 80%
				Movement Gravity: 95%
				Projectile Speed: 110%
			}

			enabled heroes
			{
				Ana
				Ashe
				Bastion
				Hanzo
				Lúcio
				McCree
				Pharah
			}
		}
	}
}

variables
{
	global:
		0: DebugEnabled
		1: CliffKnockbackBotsPos
		3: ShieldReinPos
		9: ServerLoadText
		50: antiCrashActivated

	player:
		0: HudText
		1: IsUsingAbility
		2: AbilityCooldowns
		3: AbilityVariables
		4: AbilityEffects
		5: AbilityVariableChase_I
		6: AbilityVariableChase_II
		7: IsStatsChanged
		8: DamageModID
		9: DamageModAmmount
		10: DamageModReciever
		11: DamageModAttacker
}

subroutines
{
	0: SpawnStatsReset
	1: EffectHandler
	2: HUDHandler
}

rule("[Disable inspector Recording]")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		"Greatly reduces server lag"
		Disable Inspector Recording;
	}
}

rule("[Enable Debug]")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Current Map == Map(Workshop Island);
	}

	actions
	{
		Set Global Variable(DebugEnabled, True);
	}
}

rule("[Enable ServerLoadCheck]")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Set Global Variable(ServerLoadText, True);
	}
}

rule("========================[] Debug")
{
	event
	{
		Ongoing - Global;
	}
}

rule("Knockback/Cliff bots position (B)")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global Variable(DebugEnabled) == True;
	}

	actions
	{
		Set Global Variable At Index(CliffKnockbackBotsPos, 0, Vector(-15.957, 0, -15.981));
		Create Effect(All Players(All Teams), Sphere, Blue, Value In Array(Global Variable(CliffKnockbackBotsPos), 0), 1,
			Visible To Position and Radius);
		Create In-World Text(All Players(All Teams), String("{0} {1}", String("Spawn", Null, Null, Null), String("Participants", Null,
			Null, Null), Null), Add(Value In Array(Global Variable(CliffKnockbackBotsPos), 0), Up), 1, Clip Against Surfaces,
			Visible To Position and String, Red, Visible Always);
	}
}

rule("Spawn Cliff Bots")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is True For Any(Global Variable(CliffKnockbackBotsPos), Compare(Distance Between(Event Player, Current Array Element), <=, 1.200))
			== True;
		Event Player == Host Player;
		Global Variable(DebugEnabled) == True;
	}

	actions
	{
		Stop Facing(All Players(All Teams));
		Play Effect(All Players(All Teams), Buff Explosion Sound, White, Event Player, 100);
		Destroy All Dummy Bots;
		Wait(0.250, Ignore Condition);
		Create Dummy Bot(Hero(McCree), All Teams, 1, Vector(-17.568, 2, -11.259), Null);
		Wait(0.250, Ignore Condition);
		Create Dummy Bot(Hero(Roadhog), All Teams, 2, Vector(-11.766, 2, -18.699), Null);
		Start Facing(Players In Slot(1, All Teams), Direction Towards(Eye Position(Players In Slot(1, All Teams)), Add(Host Player, Vector(
			0, 0.400, 0))), 100, To World, Direction and Turn Rate);
		Start Facing(Players In Slot(2, All Teams), Direction Towards(Eye Position(Players In Slot(2, All Teams)), Add(Host Player, Vector(
			0, 0.400, 0))), 100, To World, Direction and Turn Rate);
		Wait(0.250, Ignore Condition);
	}
}

rule("Spawn test bot Position (D)")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global Variable(DebugEnabled) == True;
	}

	actions
	{
		Set Global Variable At Index(ShieldReinPos, 0, Vector(-3.556, 0, -0.062));
		Create Effect(All Players(All Teams), Ring, Sky Blue, Value In Array(Global Variable(ShieldReinPos), 0), 1,
			Visible To Position and Radius);
		Create In-World Text(All Players(All Teams), Custom String("Spawn Testing Bot", Null, Null, Null), Add(Value In Array(
			Global Variable(ShieldReinPos), 0), Up), 1, Clip Against Surfaces, Visible To Position and String, Red, Visible Always);
	}
}

rule("Spawn test Bot")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is True For Any(Global Variable(ShieldReinPos), Compare(Distance Between(Event Player, Current Array Element), <=, 1.200)) == True;
		Event Player == Host Player;
		Global Variable(DebugEnabled) == True;
	}

	actions
	{
		Stop Facing(All Players(All Teams));
		Play Effect(All Players(All Teams), Buff Explosion Sound, White, Event Player, 100);
		Destroy All Dummy Bots;
		Wait(0.250, Ignore Condition);
		Create Dummy Bot(Hero(Roadhog), All Teams, 1, Vector(17.043, 1.424, -0.038), Direction Towards(Eye Position(Players In Slot(1,
			All Teams)), Vector(-95.785, 33.918, 73.376)));
		Start Facing(Players In Slot(1, All Teams), Direction Towards(Eye Position(Players In Slot(1, All Teams)), Eye Position(
			Host Player)), 100, To World, Direction and Turn Rate);
		Wait(2, Ignore Condition);
		Start Holding Button(Players In Slot(1, All Teams), Ability 1);
	}
}

rule("OWNER ONLY: Acknowledge = slow motion")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Communicating(Event Player, Acknowledge) == True;
		Event Player == Host Player;
		Global Variable(DebugEnabled) == True;
	}

	actions
	{
		Set Slow Motion(10);
		Wait(3, Ignore Condition);
		Set Slow Motion(100);
	}
}

rule("OWNER ONLY: group up = speed boost")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Communicating(Event Player, Group Up) == True;
		Event Player == Host Player;
		Global Variable(DebugEnabled) == True;
	}

	actions
	{
		disabled Set Move Speed(Event Player, 300);
		disabled Wait(5, Ignore Condition);
		disabled Set Move Speed(Event Player, 100);
		Start Holding Button(Players In Slot(1, All Teams), Secondary Fire);
		Start Holding Button(Players In Slot(2, All Teams), Ability 1);
		Wait(5, Ignore Condition);
		Stop Holding Button(Players In Slot(1, All Teams), Secondary Fire);
		Stop Holding Button(Players In Slot(2, All Teams), Ability 1);
	}
}

rule("OWNER ONLY: Hello = Death")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Communicating(Event Player, Hello) == True;
		Event Player == Host Player;
		Global Variable(DebugEnabled) == True;
	}

	actions
	{
		Kill(Event Player, Event Player);
		Wait(0.016, Ignore Condition);
		Respawn(Event Player);
	}
}

rule("OWNER ONLY: Thanks = Healing")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Communicating(Event Player, Thanks) == True;
		Event Player == Host Player;
		Global Variable(DebugEnabled) == True;
	}

	actions
	{
		Start Heal Over Time(Event Player, Event Player, 5, 20);
		Play Effect(Players Within Radius(Event Player, 0.200, All Teams, Surfaces), Buff Explosion Sound, White, Players Within Radius(
			Event Player, 0.200, All Teams, Surfaces), 200);
	}
}

rule("OWNER ONLY: Need Healing = Damage Over Time")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Communicating(Event Player, Need Healing) == True;
		Event Player == Host Player;
		Global Variable(DebugEnabled) == True;
	}

	actions
	{
		Play Effect(Players Within Radius(Event Player, 0.200, All Teams, Surfaces), Debuff Impact Sound, White, Players Within Radius(
			Event Player, 0.200, All Teams, Surfaces), 200);
		Damage(Event Player, Null, Subtract(Health(Event Player), 1));
	}
}

rule("OWNER ONLY: Ult voice line = Ult Charge")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Communicating(Event Player, Ultimate Status) == True;
		Event Player == Host Player;
		Global Variable(DebugEnabled) == True;
	}

	actions
	{
		Set Ultimate Charge(All Players(All Teams), 100);
		Play Effect(Players Within Radius(Event Player, 0.200, All Teams, Surfaces), Ring Explosion Sound, White, Players Within Radius(
			Event Player, 0.200, All Teams, Surfaces), 200);
	}
}

rule("hud debug")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global Variable(ServerLoadText) == True;
	}

	actions
	{
		disabled Create HUD Text(Host Player, Null, Custom String("Primary: {0}", Is Firing Primary(Host Player), Null, Null), Null, Top, 10, White,
			White, White, Visible To and String, Default Visibility);
		disabled Create HUD Text(Host Player, Null, Custom String("Secondary: {0}", Is Firing Secondary(Host Player), Null, Null), Null, Top, 10,
			White, White, White, Visible To and String, Default Visibility);
		disabled Create HUD Text(Host Player, Null, Custom String("1: {0}", Is Using Ability 1(Host Player), Null, Null), Null, Top, 10, White,
			White, White, Visible To and String, Default Visibility);
		disabled Create HUD Text(Host Player, Null, Custom String("2: {0}", Is Using Ability 2(Host Player), Null, Null), Null, Top, 10, White,
			White, White, Visible To and String, Default Visibility);
		disabled Create HUD Text(Host Player, Null, Custom String("ult: {0}", Is Using Ultimate(Host Player), Null, Null), Null, Top, 10, White,
			White, White, Visible To and String, Default Visibility);
		disabled Create HUD Text(Host Player, Null, Custom String("Melee: {0}", Is Button Held(Host Player, Melee), Null, Null), Null, Top, 10,
			White, White, White, Visible To and String, Default Visibility);
		disabled Create HUD Text(Host Player, Null, Custom String("Reload: {0}", Is Button Held(Host Player, Reload), Null, Null), Null, Top, 10,
			White, White, White, Visible To and String, Default Visibility);
		Create HUD Text(Host Player, Custom String("Peak: {0}", Server Load Peak, Null, Null), Custom String("Average: {0}",
			Server Load Average, Null, Null), Custom String("Current: {0}", Server Load, Null, Null), Top, -30, White, White, White,
			Visible To and String, Default Visibility);
		Create HUD Text(Host Player, Null, Custom String("Vert Facing Angle: {0}", Vertical Facing Angle Of(Host Player), Null, Null),
			Null, Top, 10, White, White, White, Visible To and String, Default Visibility);
	}
}

rule("========================[] Actual Gamemode")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}
}

rule("anti crash")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global Variable(antiCrashActivated) == False;
		Server Load > 200;
	}

	actions
	{
		Wait(0.300, Abort When False);
		Small Message(All Players(All Teams), Custom String("Anti crash system activated", Null, Null, Null));
		Set Slow Motion(10);
		Set Global Variable(antiCrashActivated, True);
		Wait(1, Abort When False);
		Loop If Condition Is True;
	}
}

rule("disable anti crash")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global Variable(antiCrashActivated) == True;
		Server Load < 175;
	}

	actions
	{
		Set Slow Motion(100);
		Set Global Variable(antiCrashActivated, False);
	}
}

rule("Setup = 15 seconds")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Assembling Heroes == True;
	}

	actions
	{
		Kill(All Players(All Teams), Null);
		Set Match Time(7);
	}
}

rule("[SUB] SpawnStatsReset")
{
	event
	{
		Subroutine;
		SpawnStatsReset;
	}

	actions
	{
		"If a stats change is in effect on the current player, then reset stats"
		If(Compare(Player Variable(Event Player, IsStatsChanged), ==, True));
			Set Max Health(Event Player, 100);
			Set Damage Dealt(Event Player, 100);
			Set Damage Received(Event Player, 100);
			Set Healing Dealt(Event Player, 100);
			Set Projectile Speed(Event Player, 100);
			Set Projectile Gravity(Event Player, 100);
			Set Move Speed(Event Player, 100);
			Set Gravity(Event Player, 100);
			Set Invisible(Event Player, None);
			Set Player Variable(Event Player, DamageModAmmount, 0);
			Stop Damage Modification(Player Variable(Event Player, DamageModID));
		End;
		Wait(0.016, Ignore Condition);
		"Reset abilities (Cannot be detected by workshop code yet, so activate on every character)"
		Set Primary Fire Enabled(Event Player, True);
		Set Secondary Fire Enabled(Event Player, True);
		Set Ability 1 Enabled(Event Player, True);
		Set Ability 2 Enabled(Event Player, True);
		Set Ultimate Ability Enabled(Event Player, True);
		Wait(0.016, Ignore Condition);
		Allow Button(Event Player, Primary Fire);
		Allow Button(Event Player, Secondary Fire);
		Allow Button(Event Player, Ability 1);
		Allow Button(Event Player, Ability 2);
		Allow Button(Event Player, Ultimate);
		"If ANY Ability Cooldowns are not 0"
		If(Is True For Any(Player Variable(Event Player, AbilityCooldowns), Compare(Current Array Element, !=, 0)));
			Set Player Variable At Index(Event Player, AbilityCooldowns, 1, 0);
			Set Player Variable At Index(Event Player, AbilityCooldowns, 2, 0);
			Set Player Variable At Index(Event Player, AbilityCooldowns, 3, 0);
		End;
		Wait(0.016, Ignore Condition);
		"If ANY custom abilities are in-use"
		If(Is True For Any(Player Variable(Event Player, IsUsingAbility), Compare(Current Array Element, !=, False)));
			Set Player Variable At Index(Event Player, IsUsingAbility, 1, False);
			Set Player Variable At Index(Event Player, IsUsingAbility, 2, False);
			Set Player Variable At Index(Event Player, IsUsingAbility, 3, False);
			Set Player Variable At Index(Event Player, IsUsingAbility, 4, False);
		End;
		"If any chase variables are not null, stop them and set to null"
		If(Compare(Or(Player Variable(Event Player, AbilityVariableChase_I), Player Variable(Event Player, AbilityVariableChase_II)), !=,
			Null));
			Stop Chasing Player Variable(Event Player, AbilityVariableChase_I);
			Stop Chasing Player Variable(Event Player, AbilityVariableChase_II);
			Set Player Variable(Event Player, AbilityVariableChase_I, Null);
			Set Player Variable(Event Player, AbilityVariableChase_II, Null);
		End;
		"Status Effect Apocolypse"
		If(Compare(Has Status(Event Player, Hacked), ==, True));
			Clear Status(Event Player, Hacked);
		End;
		If(Compare(Has Status(Event Player, Burning), ==, True));
			Clear Status(Event Player, Burning);
		End;
		If(Compare(Has Status(Event Player, Knocked Down), ==, True));
			Clear Status(Event Player, Knocked Down);
		End;
		If(Compare(Has Status(Event Player, Asleep), ==, True));
			Clear Status(Event Player, Asleep);
		End;
		If(Compare(Has Status(Event Player, Frozen), ==, True));
			Clear Status(Event Player, Frozen);
		End;
		If(Compare(Has Status(Event Player, Unkillable), ==, True));
			Clear Status(Event Player, Unkillable);
		End;
		If(Compare(Has Status(Event Player, Invincible), ==, True));
			Clear Status(Event Player, Invincible);
		End;
		If(Compare(Has Status(Event Player, Phased Out), ==, True));
			Clear Status(Event Player, Phased Out);
		End;
		If(Compare(Has Status(Event Player, Rooted), ==, True));
			Clear Status(Event Player, Rooted);
		End;
		If(Compare(Has Status(Event Player, Stunned), ==, True));
			Clear Status(Event Player, Stunned);
		End;
	}
}

rule("[SUB] EffectHandler")
{
	event
	{
		Subroutine;
		EffectHandler;
	}

	actions
	{
		"Erase all previous effects"
		While(Compare(Value In Array(Player Variable(Event Player, AbilityEffects), 0), !=, 0));
			Destroy Effect(Last Of(Player Variable(Event Player, AbilityEffects)));
			Modify Player Variable(Event Player, AbilityEffects, Remove From Array By Value, Last Of(Player Variable(Event Player,
				AbilityEffects)));
			Modify Player Variable At Index(Event Player, AbilityEffects, 0, Subtract, 1);
			Wait(0.016, Ignore Condition);
		End;
		"Bastion Custom Effects"
		If(Compare(Hero Of(Event Player), ==, Hero(Bastion)));
			Create Effect(Filtered Array(Players Within Radius(Eye Position(Event Player), 1000, All Teams, Surfaces), Compare(
				Is Firing Secondary(Event Player), ==, True)), Light Shaft, Yellow, Position Of(Event Player), 1,
				Visible To Position and Radius);
			Modify Player Variable(Event Player, AbilityEffects, Append To Array, Last Created Entity);
			Wait(0.016, Ignore Condition);
			Modify Player Variable At Index(Event Player, AbilityEffects, 0, Add, 1);
		"Sombra Custom Effects"
		Else If(Compare(Hero Of(Event Player), ==, Hero(Sombra)));
			Create Beam Effect(Filtered Array(Event Player, Compare(Value In Array(Player Variable(Event Player, IsUsingAbility), 3), ==,
				True)), Bad Beam, Event Player, Value In Array(Player Variable(Event Player, AbilityVariables), 1), Purple,
				Visible To Position and Radius);
			Modify Player Variable(Event Player, AbilityEffects, Append To Array, Last Created Entity);
			Create Beam Effect(Filtered Array(Remove From Array(All Players(All Teams), Event Player), Compare(Value In Array(Player Variable(
				Event Player, IsUsingAbility), 3), ==, True)), Bad Beam, Event Player, Value In Array(Player Variable(Event Player,
				AbilityVariables), 1), Red, Visible To Position and Radius);
			Modify Player Variable(Event Player, AbilityEffects, Append To Array, Last Created Entity);
			Create Effect(Filtered Array(Filtered Array(All Players(All Teams), Compare(Value In Array(Player Variable(Event Player,
				IsUsingAbility), 3), ==, True)), Compare(Distance Between(Event Player, Current Array Element), <, 10)), Energy Sound, White,
				Position Of(Event Player), 200, Visible To Position and Radius);
			Modify Player Variable(Event Player, AbilityEffects, Append To Array, Last Created Entity);
			Create Effect(Filtered Array(All Players(All Teams), Compare(Value In Array(Player Variable(Event Player, IsUsingAbility), 2), ==,
				True)), Sphere, Purple, Position Of(Event Player), Player Variable(Event Player, AbilityVariableChase_I),
				Visible To Position and Radius);
			Modify Player Variable(Event Player, AbilityEffects, Append To Array, Last Created Entity);
			Create Effect(Filtered Array(All Players(All Teams), Compare(Value In Array(Player Variable(Event Player, IsUsingAbility), 4), ==,
				True)), Sphere, Purple, Value In Array(Player Variable(Event Player, AbilityVariables), 3), Player Variable(Event Player,
				AbilityVariableChase_II), Visible To Position and Radius);
			Modify Player Variable(Event Player, AbilityEffects, Append To Array, Last Created Entity);
			Modify Player Variable At Index(Event Player, AbilityEffects, 0, Add, 5);
		"Lucio Custom Effects"
		Else If(Compare(Hero Of(Event Player), ==, Hero(Lúcio)));
			Create Effect(Filtered Array(Filtered Array(Event Player, Compare(Is Alive(Event Player), ==, True)), Compare(Is Using Ability 1(
				Event Player), !=, True)), Ring, Blue, Position Of(Event Player), 12, Visible To Position and Radius);
			Modify Player Variable(Event Player, AbilityEffects, Append To Array, Last Created Entity);
			Modify Player Variable At Index(Event Player, AbilityEffects, 0, Add, 1);
		Else;
		End;
	}
}

rule("[SUB] HUDHandler")
{
	event
	{
		Subroutine;
		HUDHandler;
	}

	actions
	{
		"Erase all previous effects"
		While(Compare(Value In Array(Player Variable(Event Player, HudText), 0), !=, 0));
			Destroy HUD Text(Last Of(Player Variable(Event Player, HudText)));
			Modify Player Variable(Event Player, HudText, Remove From Array By Value, Last Of(Player Variable(Event Player, HudText)));
			Modify Player Variable At Index(Event Player, HudText, 0, Subtract, 1);
			Wait(0.016, Ignore Condition);
		End;
		If(Compare(Hero Of(Event Player), ==, Hero(Ashe)));
			Wait(0.016, Ignore Condition);
			Create HUD Text(Filtered Array(Filtered Array(Event Player, Compare(Value In Array(Player Variable(Event Player, AbilityVariables),
				1), ==, 0)), Compare(Hero Of(Event Player), ==, Hero(Ashe))), Value In Array(Player Variable(Event Player, AbilityCooldowns),
				1), Custom String("Ability 1: Cooldown", Null, Null, Null), Custom String("Coach Jump", Null, Null, Null), Left, -3, Red, Red,
				Red, Visible To and String, Default Visibility);
			Modify Player Variable(Event Player, HudText, Append To Array, Last Text ID);
			Create HUD Text(Filtered Array(Filtered Array(Event Player, Compare(Value In Array(Player Variable(Event Player, AbilityVariables),
				1), !=, 0)), Compare(Hero Of(Event Player), ==, Hero(Ashe))), Value In Array(Player Variable(Event Player, AbilityVariables),
				1), Custom String("Ability 1: Ammo Remaining", Null, Null, Null), Custom String("Coach Jump", Null, Null, Null), Left, -3,
				White, Red, White, Visible To and String, Default Visibility);
			Modify Player Variable(Event Player, HudText, Append To Array, Last Text ID);
			Set Player Variable At Index(Event Player, HudText, 0, 2);
		Else If(Compare(Hero Of(Event Player), ==, Hero(Bastion)));
			Wait(0.016, Ignore Condition);
			Create HUD Text(Filtered Array(Event Player, Compare(Hero Of(Event Player), ==, Hero(Bastion))), Custom String("{0}%",
				Round To Integer(Player Variable(Event Player, AbilityVariableChase_I), To Nearest), Null, Null), Custom String(
				"Ability 1: Ammunition Remaining", Null, Null, Null), Custom String("Mobile Turret", Null, Null, Null), Left, -3, White,
				Lime Green, White, Visible To and String, Default Visibility);
			Modify Player Variable(Event Player, HudText, Append To Array, Last Text ID);
			Set Player Variable At Index(Event Player, HudText, 0, 1);
		Else If(Compare(Hero Of(Event Player), ==, Hero(McCree)));
			Wait(0.016, Restart When True);
			Create HUD Text(Filtered Array(Filtered Array(Event Player, Compare(Hero Of(Event Player), ==, Hero(McCree))), Compare(
				Value In Array(Player Variable(Event Player, AbilityVariables), 1), !=, 0)), Value In Array(Player Variable(Event Player,
				AbilityVariables), 1), Custom String("Primary/Secondary Fire: Reloading...", Null, Null, Null), Custom String("Peacemaker",
				Null, Null, Null), Left, -3, Red, Red, Red, Visible To and String, Default Visibility);
			Modify Player Variable(Event Player, HudText, Append To Array, Last Text ID);
			Create HUD Text(Filtered Array(Filtered Array(Event Player, Compare(Hero Of(Event Player), ==, Hero(McCree))), Compare(
				Value In Array(Player Variable(Event Player, AbilityVariables), 1), ==, 0)), Icon String(Checkmark), Custom String(
				"Primary/Secondary Fire: Loaded", Null, Null, Null), Custom String("Peacemaker", Null, Null, Null), Left, -3, White, Red,
				White, Visible To and String, Default Visibility);
			Modify Player Variable(Event Player, HudText, Append To Array, Last Text ID);
			Set Player Variable At Index(Event Player, HudText, 0, 2);
		Else If(Compare(Hero Of(Event Player), ==, Hero(Sombra)));
			Wait(0.016, Restart When True);
			Create HUD Text(Filtered Array(Event Player, Compare(Hero Of(Event Player), ==, Hero(Sombra))), Value In Array(Player Variable(
				Event Player, AbilityCooldowns), 3), Custom String("Secondary Fire", Null, Null, Null), Custom String("Data Transfer", Null,
				Null, Null), Left, -3, White, Purple, White, Visible To and String, Default Visibility);
			Modify Player Variable(Event Player, HudText, Append To Array, Last Text ID);
			Create HUD Text(Filtered Array(Event Player, Compare(Hero Of(Event Player), ==, Hero(Sombra))), Value In Array(Player Variable(
				Event Player, AbilityCooldowns), 2), Custom String("Ability 2", Null, Null, Null), Custom String("Short Circuit", Null, Null,
				Null), Left, -2, White, Purple, White, Visible To and String, Default Visibility);
			Modify Player Variable(Event Player, HudText, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Null, Custom String("Ultimate", Null, Null, Null), Custom String("Blackout", Null, Null, Null), Left,
				-1, White, Purple, White, Visible To and String, Default Visibility);
			Modify Player Variable(Event Player, HudText, Append To Array, Last Text ID);
			Set Player Variable At Index(Event Player, HudText, 0, 3);
		Else If(Compare(Hero Of(Event Player), ==, Hero(Lúcio)));
			Wait(0.016, Restart When True);
			Create HUD Text(Filtered Array(Event Player, Compare(Value In Array(Player Variable(Event Player, IsUsingAbility), 1), ==, True)),
				Null, Custom String("Ability 1: Now Playing", Null, Null, Null), Custom String("Speed Song", Null, Null, Null), Left, -2,
				White, Green, Green, Visible To and String, Default Visibility);
			Modify Player Variable(Event Player, HudText, Append To Array, Last Text ID);
			Create HUD Text(Filtered Array(Event Player, Compare(Value In Array(Player Variable(Event Player, IsUsingAbility), 1), ==, False)),
				Null, Custom String("Ability 1: Now Playing", Null, Null, Null), Custom String("Damage Song", Null, Null, Null), Left, -2,
				White, Green, Blue, Visible To and String, Default Visibility);
			Modify Player Variable(Event Player, HudText, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Null, Custom String("Ultimate", Null, Null, Null), Custom String("Subwoofer Blowout", Null, Null,
				Null), Left, -1, White, Green, White, Visible To and String, Default Visibility);
			Modify Player Variable(Event Player, HudText, Append To Array, Last Text ID);
			Set Player Variable At Index(Event Player, HudText, 0, 3);
		Else;
		End;
	}
}

rule("Initialize EVERY Character")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Alive(Event Player) == True;
		Has Spawned(Event Player) == True;
		Health(Event Player) != 0;
	}

	actions
	{
		"Reset ULT charge to 0"
		Set Ultimate Charge(Event Player, 0);
		"Reset stats as needed"
		Call Subroutine(SpawnStatsReset);
		"Spawn hero-specific effects"
		Call Subroutine(EffectHandler);
		"Reset hero-specific HUDs"
		Call Subroutine(HUDHandler);
		"Ashe Custom Stats"
		If(Compare(Hero Of(Event Player), ==, Hero(Ashe)));
			Set Player Variable At Index(Event Player, AbilityVariables, 1, 2);
		"Bastion Custom Stats"
		Else If(Compare(Hero Of(Event Player), ==, Hero(Bastion)));
			Set Max Health(Event Player, Multiply(Divide(400, 300), 100));
			Set Player Variable(Event Player, IsStatsChanged, True);
			Wait(0.016, Ignore Condition);
			Set Player Variable(Event Player, AbilityVariableChase_I, 100);
		"McCree custom stats"
		Else If(Compare(Hero Of(Event Player), ==, Hero(McCree)));
			Set Player Variable At Index(Event Player, AbilityVariables, 2, True);
			Set Player Variable At Index(Event Player, AbilityVariables, 1, 0);
		"Pharah Custom Stats"
		Else If(Compare(Hero Of(Event Player), ==, Hero(Pharah)));
			Set Player Variable(Event Player, IsStatsChanged, True);
			Set Player Variable(Event Player, DamageModReciever, Event Player);
			Set Player Variable(Event Player, DamageModAttacker, Event Player);
			Set Player Variable(Event Player, DamageModAmmount, Multiply(Divide(25, 40), 100));
			Start Damage Modification(Player Variable(Event Player, DamageModReciever), Player Variable(Event Player, DamageModAttacker),
				Player Variable(Event Player, DamageModAmmount), Receivers Damagers and Damage Percent);
			Set Player Variable(Event Player, DamageModID, Last Damage Modification ID);
		"Sombra Custom Stats"
		Else If(Compare(Hero Of(Event Player), ==, Hero(Sombra)));
			Set Player Variable At Index(Event Player, AbilityVariables, 3, Vector(0, 0, 0));
			Disallow Button(Event Player, Secondary Fire);
			Disallow Button(Event Player, Ability 2);
			Wait(0.016, Ignore Condition);
			Disallow Button(Event Player, Ultimate);
			Set Ability 2 Enabled(Event Player, False);
		"Lucio Custom Stats"
		Else If(Compare(Hero Of(Event Player), ==, Hero(Lúcio)));
			Set Healing Dealt(Event Player, 0);
			Set Player Variable(Event Player, IsStatsChanged, True);
			Set Player Variable At Index(Event Player, IsUsingAbility, 1, True);
		"Hanzo custom stats"
		Else If(Compare(Hero Of(Event Player), ==, Hero(Hanzo)));
			Set Player Variable(Event Player, IsStatsChanged, True);
		Else;
		End;
		Wait(0.016, Ignore Condition);
		"Heal all players to max hp incase of odd max hp behavior"
		While(Compare(Health(Event Player), !=, Max Health(Event Player)));
			Heal(Event Player, Null, 10000);
			Wait(0.016, Ignore Condition);
		End;
	}
}

rule("Ability 1 Cooldown")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Value In Array(Player Variable(Event Player, AbilityCooldowns), 1) > 0;
		Value In Array(Player Variable(Event Player, IsUsingAbility), 1) != True;
		Is Alive(Event Player) == True;
	}

	actions
	{
		"Check if cooldown is 0"
		If(Compare(Value In Array(Player Variable(Event Player, AbilityCooldowns), 1), !=, 0));
			"Lower cooldown by 1 after 1 second"
			Wait(1, Abort When False);
			Modify Player Variable At Index(Event Player, AbilityCooldowns, 1, Subtract, 1);
			Loop If Condition Is True;
		"If cooldown is 0"
		Else;
			Play Effect(Event Player, Ring Explosion Sound, White, Event Player, 50);
		End;
	}
}

rule("Ability 2 Cooldown")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Value In Array(Player Variable(Event Player, AbilityCooldowns), 2) > 0;
		Value In Array(Player Variable(Event Player, IsUsingAbility), 2) != True;
		Is Alive(Event Player) == True;
	}

	actions
	{
		"Check if cooldown is 0"
		If(Compare(Value In Array(Player Variable(Event Player, AbilityCooldowns), 2), !=, 0));
			"Lower cooldown by 1 after 1 second"
			Wait(1, Abort When False);
			Modify Player Variable At Index(Event Player, AbilityCooldowns, 2, Subtract, 1);
			Loop If Condition Is True;
		"If cooldown is 0"
		Else;
			Play Effect(Event Player, Ring Explosion Sound, White, Event Player, 50);
		End;
	}
}

rule("Ability 3 Cooldown")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Value In Array(Player Variable(Event Player, AbilityCooldowns), 3) > 0;
		Value In Array(Player Variable(Event Player, IsUsingAbility), 3) != True;
		Is Alive(Event Player) == True;
	}

	actions
	{
		"Check if cooldown is 0"
		If(Compare(Value In Array(Player Variable(Event Player, AbilityCooldowns), 3), !=, 0));
			"Lower cooldown by 1 after 1 second"
			Wait(1, Abort When False);
			Modify Player Variable At Index(Event Player, AbilityCooldowns, 3, Subtract, 1);
			Loop If Condition Is True;
		"If cooldown is 0"
		Else;
			Play Effect(Event Player, Ring Explosion Sound, White, Event Player, 50);
		End;
	}
}

rule("Per-Hero Info Notification")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Create HUD Text(All Players(All Teams), Null, Null, Custom String("Say ''Group Up!'' for per-hero info (Use ''C'')", Null, Null,
			Null), Right, -100, White, White, White, Visible To and String, Visible Never);
	}
}

rule("Info Handler")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Communicating(Event Player, Group Up) == True;
	}

	actions
	{
		If(Compare(Hero Of(Event Player), ==, Hero(Ashe)));
			Small Message(Event Player, Custom String("Coach Jump (Ability 1) allows you to shoot twice for a short time {0}",
				Hero Icon String(Hero Of(Event Player)), Null, Null));
			Wait(2, Ignore Condition);
			Small Message(Event Player, Custom String("Coach Jump has less knockback unless shooting one target twice {0}", Hero Icon String(
				Hero Of(Event Player)), Null, Null));
			Wait(2, Ignore Condition);
			Small Message(Event Player, Custom String("Flashfreeze (Ability 2) freezes enemies for a short time {0}", Hero Icon String(Hero Of(
				Event Player)), Null, Null));
			Wait(2, Ignore Condition);
			Small Message(Event Player, Custom String("Enemies affected by Flashfreeze cannot be damaged {0}", Hero Icon String(Hero Of(
				Event Player)), Null, Null));
		Else If(Compare(Hero Of(Event Player), ==, Hero(Bastion)));
			Small Message(Event Player, Custom String("Turret Form has limited ammo {0}", Hero Icon String(Hero Of(Event Player)), Null,
				Null));
			Wait(2, Ignore Condition);
			Small Message(Event Player, Custom String("Can only transform into Turret Form at 100% ammo {0}", Hero Icon String(Hero Of(
				Event Player)), Null, Null));
			Wait(2, Ignore Condition);
			Small Message(Event Player, Custom String("Holding Jump in Turret Form moves you forward! {0}", Hero Icon String(Hero Of(
				Event Player)), Null, Null));
			Wait(2, Ignore Condition);
			Small Message(Event Player, Custom String("Self-heal is strong, but roots you in place {0}", Hero Icon String(Hero Of(
				Event Player)), Null, Null));
		Else If(Compare(Hero Of(Event Player), ==, Hero(McCree)));
			Small Message(Event Player, Custom String("Your shots have a cooldown, however all abilities reset the cooldown {0}",
				Hero Icon String(Hero Of(Event Player)), Null, Null));
			Wait(2, Ignore Condition);
			Small Message(Event Player, Custom String("Headshots also reduce the cooldown {0}", Hero Icon String(Hero Of(Event Player)), Null,
				Null));
			Wait(2, Ignore Condition);
			Small Message(Event Player, Custom String("Kills reset the cooldown entirely {0}", Hero Icon String(Hero Of(Event Player)), Null,
				Null));
		Else If(Compare(Hero Of(Event Player), ==, Hero(Sombra)));
			Small Message(Event Player, Custom String("Short Circut (Ability 2) acts as a Mini-EMP {0}", Hero Icon String(Hero Of(
				Event Player)), Null, Null));
			Wait(2, Ignore Condition);
			Small Message(Event Player, Custom String("Data Transfer (Secondary fire) lets you teleport forward 15 meters {0}",
				Hero Icon String(Hero Of(Event Player)), Null, Null));
			Wait(2, Ignore Condition);
			Small Message(Event Player, Custom String("Blackout (Ultimate) hacks and roots players inside, and acts as area denial {0}",
				Hero Icon String(Hero Of(Event Player)), Null, Null));
		Else If(Compare(Hero Of(Event Player), ==, Hero(Lúcio)));
			Small Message(Event Player, Custom String("Heal song is replaced with a damage boost song {0}", Hero Icon String(Hero Of(
				Event Player)), Null, Null));
			Wait(2, Ignore Condition);
			Small Message(Event Player, Custom String("Subwoofer Blowout (Ultimate) knocks enemies within your song radius upward {0}",
				Hero Icon String(Hero Of(Event Player)), Null, Null));
		Else If(Compare(Hero Of(Event Player), ==, Hero(Hanzo)));
			Small Message(Event Player, Custom String("Storm Arrows pierce through a (thin) wall {0}", Hero Icon String(Hero Of(Event Player)),
				Null, Null));
			Wait(2, Ignore Condition);
			Small Message(Event Player, Custom String("The piercing effect also applies to anyone shot directly {0}", Hero Icon String(Hero Of(
				Event Player)), Null, Null));
		Else If(Compare(Hero Of(Event Player), ==, Hero(Pharah)));
			Small Message(Event Player, Custom String("Primary fire rockets do very little self-damage {0}", Hero Icon String(Hero Of(
				Event Player)), Null, Null));
			Wait(2, Ignore Condition);
			Small Message(Event Player, Custom String("Crouching changes how you rocket jump {0}", Hero Icon String(Hero Of(Event Player)),
				Null, Null));
			Wait(2, Ignore Condition);
			Small Message(Event Player, Custom String("Hold crouch for a pogo-jump {0}", Hero Icon String(Hero Of(Event Player)), Null, Null));
			Wait(2, Ignore Condition);
			Small Message(Event Player, Custom String("Hold Jump + Crouch for a C-Tap {0}", Hero Icon String(Hero Of(Event Player)), Null,
				Null));
			Wait(2, Ignore Condition);
			Small Message(Event Player, Custom String("C-Tap jumps allow for a market garden {0}", Hero Icon String(Hero Of(Event Player)),
				Null, Null));
		Else;
			Small Message(Event Player, Custom String("No Per-Hero info for this charactet (yet) {0}", Hero Icon String(Hero Of(Event Player)),
				Null, Null));
	}
}

rule("[Ashe] Scope Damage")
{
	event
	{
		Ongoing - Each Player;
		All;
		Ashe;
	}

	conditions
	{
		Is Firing Secondary(Event Player) == True;
	}

	actions
	{
		Set Damage Dealt(Event Player, Multiply(Divide(45, 72.250), 100));
	}
}

rule("[Ashe] Scope Reset Damage")
{
	event
	{
		Ongoing - Each Player;
		All;
		Ashe;
	}

	conditions
	{
		Is Firing Secondary(Event Player) != True;
	}

	actions
	{
		Set Damage Dealt(Event Player, 100);
	}
}

rule("[Ashe] Ability 2 Freeze")
{
	event
	{
		Player Took Damage;
		All;
		All;
	}

	conditions
	{
		"If hero is attacked by an Ashe using dynamite"
		Hero Of(Attacker) == Hero(Ashe);
		Has Status(Victim, Burning) == True;
		Is Firing Primary(Attacker) == False;
		Is Using Ability 1(Attacker) == False;
	}

	actions
	{
		"Set status as frozen and invincible for 2.5 seconds"
		Set Status(Victim, Attacker, Frozen, 2.500);
		Set Status(Victim, Null, Invincible, 2.500);
		Clear Status(Victim, Burning);
		"and give it a 6 second cooldown on the ability so that the burning does not trigger the freeze again"
		Wait(6, Ignore Condition);
	}
}

rule("[Ashe] Coach Gun")
{
	event
	{
		Ongoing - Each Player;
		All;
		Ashe;
	}

	conditions
	{
		Is Using Ability 1(Event Player) == True;
	}

	actions
	{
		Modify Player Variable At Index(Event Player, AbilityVariables, 1, Subtract, 1);
		"If ammo is still in the clip, then..."
		If(Compare(Value In Array(Player Variable(Event Player, AbilityVariables), 1), >, 0));
			Set Player Variable At Index(Event Player, IsUsingAbility, 1, True);
			Wait(2.250, Restart When True);
			Set Player Variable At Index(Event Player, IsUsingAbility, 1, False);
			Abort If(Compare(Is Dead(Event Player), ==, True));
			Abort If(Compare(Value In Array(Player Variable(Event Player, AbilityVariables), 1), ==, 0));
			Set Player Variable At Index(Event Player, AbilityCooldowns, 1, 10);
			Set Player Variable At Index(Event Player, AbilityVariables, 1, 0);
			Set Ability 1 Enabled(Event Player, False);
		"If out of ammo"
		Else If(Compare(Value In Array(Player Variable(Event Player, AbilityVariables), 1), ==, 0));
			Wait(0.200, Ignore Condition);
			Set Player Variable At Index(Event Player, AbilityCooldowns, 1, 10);
			Set Player Variable At Index(Event Player, IsUsingAbility, 1, False);
			Set Ability 1 Enabled(Event Player, False);
		End;
	}
}

rule("[Ashe] Coach Gun (Cooldown at 0 = Reset Ability Stats)")
{
	event
	{
		Ongoing - Each Player;
		All;
		Ashe;
	}

	conditions
	{
		Value In Array(Player Variable(Event Player, AbilityCooldowns), 1) == 0;
	}

	actions
	{
		Set Ability 1 Enabled(Event Player, True);
		Set Player Variable At Index(Event Player, AbilityVariables, 1, 2);
	}
}

rule("[Bastion] Turret Ability Transform")
{
	event
	{
		Ongoing - Each Player;
		All;
		Bastion;
	}

	conditions
	{
		Is Using Ability 1(Event Player) == True;
		disabled Value In Array(Player Variable(Event Player, IsUsingAbility), 1) == False;
		Is Alive(Event Player) == True;
	}

	actions
	{
		If(Compare(Value In Array(Player Variable(Event Player, IsUsingAbility), 1), ==, False));
			Disallow Button(Event Player, Ability 1);
			disabled Set Ability 1 Enabled(Event Player, False);
			Wait(0.016, Ignore Condition);
			Loop If(Compare(Is Using Ability 1(Event Player), ==, True));
			Set Move Speed(Event Player, 50);
			Set Player Variable At Index(Event Player, IsUsingAbility, 1, True);
			Set Secondary Fire Enabled(Event Player, False);
			Allow Button(Event Player, Ability 1);
			disabled Set Ability 1 Enabled(Event Player, True);
		Else If(Compare(Value In Array(Player Variable(Event Player, IsUsingAbility), 1), ==, True));
			Disallow Button(Event Player, Ability 1);
			disabled Set Ability 1 Enabled(Event Player, False);
			Wait(0.016, Ignore Condition);
			Loop If(Compare(Is Using Ability 1(Event Player), ==, True));
			Set Move Speed(Event Player, 100);
			Set Damage Dealt(Event Player, 100);
			Set Player Variable At Index(Event Player, IsUsingAbility, 1, False);
			Allow Button(Event Player, Ability 1);
			disabled Set Ability 1 Enabled(Event Player, True);
		End;
	}
}

rule("[Bastion] Turret Ammo Regen")
{
	event
	{
		Ongoing - Each Player;
		All;
		Bastion;
	}

	conditions
	{
		Value In Array(Player Variable(Event Player, IsUsingAbility), 1) == False;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Chase Player Variable At Rate(Event Player, AbilityVariableChase_I, 100, 6.250, None);
	}
}

rule("[Bastion] Turret Ability (Low Ammo Locks Abillity)")
{
	event
	{
		Ongoing - Each Player;
		All;
		Bastion;
	}

	conditions
	{
		Player Variable(Event Player, AbilityVariableChase_I) != 100;
		Value In Array(Player Variable(Event Player, IsUsingAbility), 1) == False;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Disallow Button(Event Player, Ability 1);
		Wait(0.016, Ignore Condition);
		Set Ability 1 Enabled(Event Player, False);
	}
}

rule("[Bastion] Ulting (in turret mode)")
{
	event
	{
		Ongoing - Each Player;
		All;
		Bastion;
	}

	conditions
	{
		Is Alive(Event Player) == True;
		Is Using Ultimate(Event Player) == True;
		disabled Value In Array(Player Variable(Event Player, IsUsingAbility), 1) == True;
		Is Alive(Event Player) == True;
	}

	actions
	{
		"If Bastion is still in turret"
		If(Compare(Value In Array(Player Variable(Event Player, IsUsingAbility), 1), ==, True));
			Disallow Button(Event Player, Ability 1);
			Set Move Speed(Event Player, 100);
			Set Damage Dealt(Event Player, 100);
			Set Player Variable At Index(Event Player, IsUsingAbility, 1, False);
			Wait(0.016, Ignore Condition);
		End;
		Set Status(Event Player, Null, Rooted, 6.600);
		Set Damage Dealt(Event Player, Multiply(Divide(300, 102.500), 100));
		Stop Accelerating(Event Player);
		Set Secondary Fire Enabled(Event Player, False);
		Wait(5.500, Ignore Condition);
		Abort If(Compare(Is Alive(Event Player), ==, False));
		Set Damage Dealt(Event Player, 100);
		Set Secondary Fire Enabled(Event Player, True);
	}
}

rule("[Bastion] turret unlock on cooldown finish")
{
	event
	{
		Ongoing - Each Player;
		All;
		Bastion;
	}

	conditions
	{
		Player Variable(Event Player, AbilityVariableChase_I) == 100;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Allow Button(Event Player, Ability 1);
		Set Ability 1 Enabled(Event Player, True);
		Stop Chasing Player Variable(Event Player, AbilityVariableChase_I);
	}
}

rule("[Bastion] Turret Ammo Usage")
{
	event
	{
		Ongoing - Each Player;
		All;
		Bastion;
	}

	conditions
	{
		Is Firing Primary(Event Player) == True;
		Value In Array(Player Variable(Event Player, IsUsingAbility), 1) == True;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Chase Player Variable At Rate(Event Player, AbilityVariableChase_I, 0, 20, None);
	}
}

rule("[Bastion] Ammo Stop Using")
{
	event
	{
		Ongoing - Each Player;
		All;
		Bastion;
	}

	conditions
	{
		Is Firing Primary(Event Player) != True;
		Value In Array(Player Variable(Event Player, IsUsingAbility), 1) == True;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Stop Chasing Player Variable(Event Player, AbilityVariableChase_I);
	}
}

rule("[Bastion] auto-transform out of ammo")
{
	event
	{
		Ongoing - Each Player;
		All;
		Bastion;
	}

	conditions
	{
		Player Variable(Event Player, AbilityVariableChase_I) == 0;
		Value In Array(Player Variable(Event Player, IsUsingAbility), 1) == True;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Press Button(Event Player, Ability 1);
	}
}

rule("[Bastion] Movement by pressing Jump (Enable)")
{
	event
	{
		Ongoing - Each Player;
		All;
		Bastion;
	}

	conditions
	{
		Is Button Held(Event Player, Jump) == True;
		Is Alive(Event Player) == True;
		Has Status(Event Player, Frozen) == False;
		Has Status(Event Player, Knocked Down) == False;
		Has Status(Event Player, Hacked) == False;
		Has Status(Event Player, Stunned) == False;
		Has Status(Event Player, Asleep) == False;
		Is Using Ultimate(Event Player) == False;
		Value In Array(Player Variable(Event Player, IsUsingAbility), 1) == True;
	}

	actions
	{
		Start Accelerating(Event Player, Forward, 1000, 60, To Player, Direction Rate and Max Speed);
	}
}

rule("[Bastion] Movement by pressing Jump (Disable)")
{
	event
	{
		Ongoing - Each Player;
		All;
		Bastion;
	}

	conditions
	{
		Is Button Held(Event Player, Jump) == False;
	}

	actions
	{
		Stop Accelerating(Event Player);
	}
}

rule("[Bastion] movement stop on transform")
{
	event
	{
		Ongoing - Each Player;
		All;
		Bastion;
	}

	conditions
	{
		Is Using Ability 1(Event Player) == True;
	}

	actions
	{
		Stop Accelerating(Event Player);
	}
}

rule("[Bastion] (Knock Down Cooldown Fix)")
{
	event
	{
		Ongoing - Each Player;
		All;
		Bastion;
	}

	conditions
	{
		"Is hacked, shattered, or asleep?"
		Or(Or(Has Status(Event Player, Hacked), Has Status(Event Player, Knocked Down)), Has Status(Event Player, Asleep)) == True;
		Value In Array(Player Variable(Event Player, IsUsingAbility), 1) == True;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Set Move Speed(Event Player, 100);
		Set Damage Dealt(Event Player, 100);
		Set Player Variable At Index(Event Player, IsUsingAbility, 1, False);
		Allow Button(Event Player, Secondary Fire);
		Set Secondary Fire Enabled(Event Player, True);
		Stop Accelerating(Event Player);
	}
}

rule("[Bastion] (Roadhog Hook Fix)")
{
	event
	{
		Player Took Damage;
		All;
		Bastion;
	}

	conditions
	{
		Has Status(Event Player, Stunned) == True;
		Value In Array(Player Variable(Event Player, IsUsingAbility), 1) == True;
		Hero Of(Attacker) == Hero(Roadhog);
		Is Alive(Event Player) == True;
	}

	actions
	{
		Wait(0.016, Ignore Condition);
		Loop If Condition Is True;
		Set Move Speed(Event Player, 100);
		Set Damage Dealt(Event Player, 100);
		Set Player Variable At Index(Event Player, IsUsingAbility, 1, False);
		Allow Button(Event Player, Secondary Fire);
		Set Secondary Fire Enabled(Event Player, True);
		Stop Accelerating(Event Player);
	}
}

rule("[Bastion] Movement (Dead)")
{
	event
	{
		Player Died;
		All;
		Bastion;
	}

	actions
	{
		Stop Accelerating(Event Player);
	}
}

rule("[Bastion] Omega Heal (100% HP upon healing)")
{
	event
	{
		Ongoing - Each Player;
		All;
		Bastion;
	}

	conditions
	{
		Is Firing Secondary(Event Player) == True;
		Normalized Health(Event Player) >= 1;
		Is Using Ultimate(Event Player) == False;
	}

	actions
	{
		Press Button(Event Player, Secondary Fire);
		Wait(0.016, Ignore Condition);
		Disallow Button(Event Player, Secondary Fire);
		Set Secondary Fire Enabled(Event Player, False);
	}
}

rule("[Bastion] Omega Heal (100% HP Not Healing)")
{
	event
	{
		Ongoing - Each Player;
		All;
		Bastion;
	}

	conditions
	{
		Is Firing Secondary(Event Player) == False;
		Normalized Health(Event Player) >= 1;
		Is Using Ultimate(Event Player) == False;
	}

	actions
	{
		Disallow Button(Event Player, Secondary Fire);
		Set Secondary Fire Enabled(Event Player, False);
	}
}

rule("[Bastion] Omega Heal (< 100% HP)")
{
	event
	{
		Ongoing - Each Player;
		All;
		Bastion;
	}

	conditions
	{
		Normalized Health(Event Player) != 1;
		Is Using Ultimate(Event Player) == False;
		Value In Array(Player Variable(Event Player, IsUsingAbility), 1) == False;
	}

	actions
	{
		Allow Button(Event Player, Secondary Fire);
		Set Secondary Fire Enabled(Event Player, True);
	}
}

rule("[McCree] Primary Fire Start Reload/Stats")
{
	event
	{
		Ongoing - Each Player;
		All;
		McCree;
	}

	conditions
	{
		Is Firing Primary(Event Player) == True;
	}

	actions
	{
		Set Player Variable At Index(Event Player, AbilityVariables, 1, 1);
	}
}

rule("[McCree] Secondary Fire Start Reload/Stats")
{
	event
	{
		Ongoing - Each Player;
		All;
		McCree;
	}

	conditions
	{
		Is Firing Secondary(Event Player) == True;
		Value In Array(Player Variable(Event Player, AbilityVariables), 1) == 0;
	}

	actions
	{
		Set Player Variable At Index(Event Player, AbilityVariables, 1, 2.400);
		Set Ability 1 Enabled(Event Player, False);
		Set Ability 2 Enabled(Event Player, False);
		Disallow Button(Event Player, Ultimate);
		Wait(0.366, Ignore Condition);
		Set Status(Event Player, Null, Stunned, 0.050);
		Set Ability 1 Enabled(Event Player, True);
		Set Ability 2 Enabled(Event Player, True);
		Allow Button(Event Player, Ultimate);
		Abort If(Compare(Value In Array(Player Variable(Event Player, AbilityCooldowns), 1), ==, 0));
		Set Secondary Fire Enabled(Event Player, False);
		Disallow Button(Event Player, Secondary Fire);
	}
}

rule("[McCree] Roll Reload")
{
	event
	{
		Ongoing - Each Player;
		All;
		McCree;
	}

	conditions
	{
		Is Using Ability 1(Event Player) == True;
	}

	actions
	{
		Set Player Variable At Index(Event Player, AbilityVariables, 1, 0);
	}
}

rule("[McCree] Flashbang Reload")
{
	event
	{
		Ongoing - Each Player;
		All;
		McCree;
	}

	conditions
	{
		Is Using Ability 2(Event Player) == True;
	}

	actions
	{
		Set Player Variable At Index(Event Player, AbilityVariables, 1, 0);
	}
}

rule("[McCree] McCree Headshot")
{
	event
	{
		Player Dealt Damage;
		All;
		McCree;
	}

	conditions
	{
		Event Was Critical Hit == True;
	}

	actions
	{
		Wait(0.100, Ignore Condition);
		Set Player Variable At Index(Event Player, AbilityVariables, 1, 0.490);
	}
}

rule("[McCree] Reload On Kill")
{
	event
	{
		Player Earned Elimination;
		All;
		McCree;
	}

	actions
	{
		Wait(0.100, Ignore Condition);
		Set Player Variable At Index(Event Player, AbilityVariables, 1, 0);
	}
}

rule("[McCree] Shot reloading")
{
	event
	{
		Ongoing - Each Player;
		All;
		McCree;
	}

	conditions
	{
		Value In Array(Player Variable(Event Player, AbilityVariables), 1) != 0;
	}

	actions
	{
		While(Compare(Value In Array(Player Variable(Event Player, AbilityVariables), 1), !=, 0));
			If(Compare(Value In Array(Player Variable(Event Player, AbilityVariables), 2), !=, False));
				disabled Skip If(Compare(Value In Array(Player Variable(Event Player, AbilityVariables), 2), ==, False), 5);
				Set Player Variable At Index(Event Player, AbilityVariables, 2, False);
				Set Primary Fire Enabled(Event Player, False);
				Set Secondary Fire Enabled(Event Player, False);
				Disallow Button(Event Player, Primary Fire);
				Disallow Button(Event Player, Secondary Fire);
			End;
			Modify Player Variable At Index(Event Player, AbilityVariables, 1, Subtract, 0.010);
			Wait(0.010, Ignore Condition);
		End;
		Set Player Variable At Index(Event Player, AbilityVariables, 1, 0);
		Set Player Variable At Index(Event Player, AbilityVariables, 2, True);
		Set Primary Fire Enabled(Event Player, True);
		Set Secondary Fire Enabled(Event Player, True);
		Allow Button(Event Player, Primary Fire);
		Allow Button(Event Player, Secondary Fire);
	}
}

rule("[McCree] Ult Stats")
{
	event
	{
		Ongoing - Each Player;
		All;
		McCree;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		Set Player Variable At Index(Event Player, AbilityVariables, 1, 0);
		Set Move Speed(Event Player, 400);
	}
}

rule("[McCree] Ult Stats Reset")
{
	event
	{
		Ongoing - Each Player;
		All;
		McCree;
	}

	conditions
	{
		Is Using Ultimate(Event Player) != True;
	}

	actions
	{
		Set Move Speed(Event Player, 100);
	}
}

rule("[Pharah] Jump Jets Forward")
{
	event
	{
		Ongoing - Each Player;
		All;
		Pharah;
	}

	conditions
	{
		Is Using Ability 1(Event Player) == True;
	}

	actions
	{
		Apply Impulse(Event Player, Forward, 17.666, To Player, Incorporate Contrary Motion);
	}
}

rule("[Pharah] Self-Damage On Ult")
{
	event
	{
		Ongoing - Each Player;
		All;
		Pharah;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		Set Player Variable(Event Player, DamageModAmmount, 200);
	}
}

rule("[Pharah] Self-Damage Reset")
{
	event
	{
		Ongoing - Each Player;
		All;
		Pharah;
	}

	conditions
	{
		Is Using Ultimate(Event Player) != True;
	}

	actions
	{
		Set Player Variable(Event Player, DamageModAmmount, Multiply(Divide(25, 40), 100));
	}
}

rule("[Pharah] Rocket Jumps/Pogo-Jumping/C-Taps allow market garden")
{
	event
	{
		Player Dealt Damage;
		All;
		Pharah;
	}

	conditions
	{
		Victim == Event Player;
		Is Using Ultimate(Event Player) == False;
		Event Damage != 0;
	}

	actions
	{
		Set Move Speed(Event Player, 125);
		Set Player Variable(Event Player, IsStatsChanged, True);
		If(Compare(Is Button Held(Event Player, Crouch), ==, True));
			If(Compare(Is Button Held(Event Player, Jump), ==, True));
				Apply Impulse(Event Player, Add(Direction Towards(Value In Array(Player Variable(Event Player, AbilityVariables), 2),
					Event Player), Vector(0, 0.666, 0)), 8, To World, Incorporate Contrary Motion);
				Set Player Variable At Index(Event Player, AbilityVariables, 1, True);
			Else;
				Apply Impulse(Event Player, Up, 6, To World, Cancel Contrary Motion);
				Apply Impulse(Event Player, Forward, 4.400, To Player, Incorporate Contrary Motion);
			End;
		Else;
			If(Compare(Is Button Held(Event Player, Jump), ==, True));
				Apply Impulse(Event Player, Add(Direction Towards(Value In Array(Player Variable(Event Player, AbilityVariables), 2),
					Event Player), Vector(0, 0.666, 0)), 6, To World, Incorporate Contrary Motion);
			Else;
				Apply Impulse(Event Player, Add(Direction Towards(Value In Array(Player Variable(Event Player, AbilityVariables), 2),
					Event Player), Vector(0, 0.666, 0)), 1.500, To World, Incorporate Contrary Motion);
			End;
		End;
	}
}

rule("[Pharah] Rocket Jump Check false")
{
	event
	{
		Ongoing - Each Player;
		All;
		Pharah;
	}

	conditions
	{
		Is On Ground(Event Player) == True;
	}

	actions
	{
		Set Move Speed(Event Player, 100);
		Set Player Variable At Index(Event Player, AbilityVariables, 1, Null);
	}
}

rule("[Pharah] Market Garden")
{
	event
	{
		Player Dealt Damage;
		All;
		Pharah;
	}

	conditions
	{
		Victim != Event Player;
		Is Using Ultimate(Event Player) == False;
		Value In Array(Player Variable(Event Player, AbilityVariables), 1) == True;
		Is Button Held(Event Player, Melee) == True;
		Distance Between(Event Player, Victim) >= 2.500;
	}

	actions
	{
		"30 + this damage"
		Damage(Victim, Event Player, 165);
		Wait(1, Ignore Condition);
	}
}

rule("[Pharah] Rocket Jump Physics")
{
	event
	{
		Ongoing - Each Player;
		All;
		Pharah;
	}

	conditions
	{
		Is Firing Primary(Event Player) == True;
	}

	actions
	{
		Enable Inspector Recording;
		Set Player Variable At Index(Event Player, AbilityVariables, 2, Ray Cast Hit Position(Eye Position(Event Player), Add(Eye Position(
			Event Player), Multiply(Facing Direction Of(Event Player), 15)), All Players(All Teams), Event Player, True));
		Disable Inspector Recording;
	}
}

rule("[Lucio] Damage Boost")
{
	event
	{
		Ongoing - Each Player;
		All;
		Lúcio;
	}

	conditions
	{
		Is Using Ability 1(Event Player) == False;
		Is Using Ability 2(Event Player) == False;
	}

	actions
	{
		Set Damage Dealt(Event Player, Add(Multiply(0.250, 100), 100));
		Set Player Variable At Index(Event Player, IsUsingAbility, 1, False);
	}
}

rule("[Lucio] Speed Boost")
{
	event
	{
		Ongoing - Each Player;
		All;
		Lúcio;
	}

	conditions
	{
		Is Using Ability 1(Event Player) == True;
	}

	actions
	{
		Set Damage Dealt(Event Player, 100);
		Set Player Variable At Index(Event Player, IsUsingAbility, 1, True);
	}
}

rule("[Lucio] Amp Damage")
{
	event
	{
		Ongoing - Each Player;
		All;
		Lúcio;
	}

	conditions
	{
		Is Using Ability 2(Event Player) == True;
		Is Using Ability 1(Event Player) == False;
	}

	actions
	{
		Set Player Variable At Index(Event Player, IsUsingAbility, 1, False);
		Set Damage Dealt(Event Player, Add(Multiply(0.500, 100), 100));
		Wait(0.016, Ignore Condition);
		Loop If Condition Is True;
		Skip If(Compare(Is Using Ability 1(Event Player), ==, False), 1);
		Set Damage Dealt(Event Player, 100);
	}
}

rule("[Lucio] Ultimate")
{
	event
	{
		Ongoing - Each Player;
		All;
		Lúcio;
	}

	conditions
	{
		Max Health(Event Player) > 500;
	}

	actions
	{
		Apply Impulse(Remove From Array(Players Within Radius(Event Player, 12, All Teams, Surfaces And All Barriers), Event Player),
			Vector(0, 1.300, 0), 11.500, To World, Cancel Contrary Motion);
		Damage(Remove From Array(Players Within Radius(Event Player, 12, All Teams, Surfaces And All Barriers), Event Player),
			Event Player, 25);
	}
}

rule("[Hanzo] Piercing")
{
	event
	{
		Ongoing - Each Player;
		All;
		Hanzo;
	}

	conditions
	{
		Is Button Held(Event Player, Primary Fire) == True;
		Is Using Ability 2(Event Player) == True;
	}

	actions
	{
		Play Effect(All Players(All Teams), Good Explosion, Red, Ray Cast Hit Position(Vector(0, 0, 0), Vector(0, 0, 0), All Players(
			All Teams), Event Player, True), 0.100);
		Set Player Variable At Index(Event Player, AbilityVariables, 1, Ray Cast Hit Position(Eye Position(Event Player), Add(Eye Position(
			Event Player), Multiply(Facing Direction Of(Event Player), 100)), All Players(All Teams), Event Player, True));
		Set Player Variable At Index(Event Player, AbilityVariables, 2, Add(Value In Array(Player Variable(Event Player, AbilityVariables),
			1), Multiply(Facing Direction Of(Event Player), 2.700)));
		Set Player Variable At Index(Event Player, AbilityVariables, 3, Ray Cast Hit Player(Value In Array(Player Variable(Event Player,
			AbilityVariables), 2), Add(Value In Array(Player Variable(Event Player, AbilityVariables), 2), Multiply(Facing Direction Of(
			Event Player), 100)), All Players(All Teams), Event Player, True));
		Set Player Variable At Index(Event Player, AbilityVariables, 4, Ray Cast Hit Position(Value In Array(Player Variable(Event Player,
			AbilityVariables), 2), Add(Value In Array(Player Variable(Event Player, AbilityVariables), 2), Multiply(Facing Direction Of(
			Event Player), 1000)), All Players(All Teams), Event Player, True));
		Play Effect(All Players(All Teams), Good Explosion, Red, Value In Array(Player Variable(Event Player, AbilityVariables), 1),
			0.200);
		Play Effect(All Players(All Teams), Good Explosion, Red, Value In Array(Player Variable(Event Player, AbilityVariables), 4),
			0.100);
		Set Player Variable At Index(Event Player, IsUsingAbility, 1, True);
		Wait(0.300, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("[Hanzo] Storm Arrow apply damage Headshot")
{
	event
	{
		Ongoing - Each Player;
		All;
		Hanzo;
	}

	conditions
	{
		Distance Between(Value In Array(Player Variable(Event Player, AbilityVariables), 4), Eye Position(Value In Array(Player Variable(
			Event Player, AbilityVariables), 3))) < 0.400;
		disabled Is Using Ability 2(Event Player) == True;
		Value In Array(Player Variable(Event Player, IsUsingAbility), 1) == True;
		Value In Array(Player Variable(Event Player, IsUsingAbility), 2) == True;
	}

	actions
	{
		"Event was headshot"
		If(Compare(Distance Between(Value In Array(Player Variable(Event Player, AbilityVariables), 4), Eye Position(Value In Array(
			Player Variable(Event Player, AbilityVariables), 3))), <, 0.400));
			Damage(Value In Array(Player Variable(Event Player, AbilityVariables), 3), Event Player, 60);
		"Event was NOT headshot"
		Else If(Compare(Distance Between(Value In Array(Player Variable(Event Player, AbilityVariables), 4), Eye Position(Value In Array(
				Player Variable(Event Player, AbilityVariables), 3))), >=, 0.400));
			Damage(Value In Array(Player Variable(Event Player, AbilityVariables), 3), Event Player, 30);
		End;
		Wait(0.300, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("[Hanzo] Stop firing arrow in var")
{
	event
	{
		Ongoing - Each Player;
		All;
		Hanzo;
	}

	conditions
	{
		Is Button Held(Event Player, Primary Fire) == False;
		Is Using Ability 2(Event Player) == True;
	}

	actions
	{
		Set Player Variable At Index(Event Player, IsUsingAbility, 1, False);
	}
}

rule("[Hanzo] Set firing speed Storm")
{
	event
	{
		Ongoing - Each Player;
		All;
		Hanzo;
	}

	conditions
	{
		Is Using Ability 2(Event Player) == True;
	}

	actions
	{
		Set Projectile Speed(Event Player, Multiply(100, 10000));
		Set Player Variable At Index(Event Player, IsUsingAbility, 2, True);
	}
}

rule("[Hanzo] 2nd arrow beam")
{
	event
	{
		Ongoing - Each Player;
		All;
		Hanzo;
	}

	conditions
	{
		Value In Array(Player Variable(Event Player, IsUsingAbility), 1) == True;
		Value In Array(Player Variable(Event Player, IsUsingAbility), 2) == True;
	}

	actions
	{
		Create Beam Effect(All Players(All Teams), Bad Beam, Value In Array(Player Variable(Event Player, AbilityVariables), 2),
			Value In Array(Player Variable(Event Player, AbilityVariables), 4), Red, Visible To Position and Radius);
		Set Player Variable At Index(Event Player, AbilityEffects, 1, Last Created Entity);
		Wait(0.150, Ignore Condition);
		Destroy Effect(Value In Array(Player Variable(Event Player, AbilityEffects), 1));
		Modify Player Variable(Event Player, AbilityEffects, Remove From Array By Value, Last Of(Player Variable(Event Player,
			AbilityEffects)));
		Wait(0.150, Restart When True);
		Loop If Condition Is True;
	}
}

rule("[Hanzo] Set firing speed OOT")
{
	event
	{
		Ongoing - Each Player;
		All;
		Hanzo;
	}

	conditions
	{
		Value In Array(Player Variable(Event Player, IsUsingAbility), 2) == True;
		Is Using Ability 2(Event Player) == False;
	}

	actions
	{
		If(Compare(Is Button Held(Event Player, Primary Fire), ==, False));
			Set Player Variable At Index(Event Player, IsUsingAbility, 1, False);
			Set Player Variable At Index(Event Player, IsUsingAbility, 2, False);
			Set Projectile Speed(Event Player, 100);
		Else If(Compare(Is Button Held(Event Player, Primary Fire), ==, True));
			Set Player Variable At Index(Event Player, IsUsingAbility, 1, True);
			Set Projectile Speed(Event Player, 100);
			Wait(0.050, Ignore Condition);
			Set Player Variable At Index(Event Player, IsUsingAbility, 1, False);
		End;
		Wait(0.100, Ignore Condition);
		Set Player Variable At Index(Event Player, IsUsingAbility, 2, False);
	}
}

rule("[Ana Sleep Grenade] Scope Damage")
{
	event
	{
		Ongoing - Each Player;
		All;
		Ana;
	}

	conditions
	{
		Is Using Ability 2(Event Player) == True;
		Vertical Facing Angle Of(Event Player) >= 50;
		Distance Between(Eye Position(Event Player), Ray Cast Hit Position(Eye Position(Event Player), Add(Eye Position(Event Player),
			Multiply(Facing Direction Of(Event Player), 2)), All Players(All Teams), Event Player, True)) < 2.500;
	}

	actions
	{
		Apply Impulse(Event Player, Up, 15, To World, Cancel Contrary Motion);
		Wait(2, Ignore Condition);
	}
}
