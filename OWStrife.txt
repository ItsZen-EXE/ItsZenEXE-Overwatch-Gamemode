settings
{
	main
	{
		Description: "Please contact me on discord (ItsZen_EXE#0057), twitter (@ItsZen_EXE), or even email me at ItsZenEXE@pm.me with \"OWStrife\" at the start of the subject line if you have any questions!"
	}

	lobby
	{
		Match Voice Chat: Enabled
	}

	modes
	{
		Deathmatch
		{
			disabled maps
			{
				Workshop Chamber
				Workshop Expanse
				Workshop Expanse Night
				Workshop Island
				Workshop Island Night
			}
		}

		disabled Elimination
		{
			Limited Choice Pool: Team Size
			Score To Win: 5
		}

		General
		{
			Game Mode Start: Immediately
			Hero Limit: Off
			Spawn Health Packs: Enabled
		}
	}

	heroes
	{
		General
		{
			Ultimate Generation: 140%

			Ana
			{
				Sleep Dart Cooldown Time: 75%
			}

			Ashe
			{
				Ammunition Clip Size Scalar: 133%
				Coach Gun Knockback Scalar Enemy: 50%
				Coach Gun Knockback Scalar Self: 85%
				Damage Dealt: 85%
				Ultimate Duration: 45%
				Ultimate Generation - Combat B.O.B.: 175%
			}

			Bastion
			{
				Ammunition Clip Size Scalar: 71%
				Configuration: Tank Weapon Knockback Scalar: 150%
				Damage Dealt: 75%
				Ultimate Duration: 50%
				Ultimate Generation Configuration: Tank: 70%
			}

			Hanzo
			{
				Lunge Distance Scalar: 114%
				Sonic Arrow Cooldown Time: 84%
				Storm Arrows Cooldown Time: 80%
				Storm Arrows Quantity: 3
			}

			Lúcio
			{
				Ultimate Generation - Combat Sound Barrier: 135%
			}

			McCree
			{
				Combat Roll Cooldown Time: 80%
				Damage Dealt: 115%
				No Ammunition Requirement: On
			}

			Mei
			{
				Cryo-Freeze Cooldown Time: 91%
				Damage Dealt: 86%
				Healing Dealt: 170%
				Health: 140%
				Ice Wall Cooldown Time: 77%
			}

			Pharah
			{
				Ammunition Clip Size Scalar: 67%
				Concussive Blast Knockback Scalar: 150%
				Hover Jets: Off
				Jump Jet Acceleration Scalar: 37%
				Jump Jet Cooldown Time: 80%
				Movement Gravity: 95%
				Projectile Speed: 110%
				Rocket Launcher Knockback Scalar: 140%
			}

			enabled heroes
			{
				Ana
				Ashe
				Bastion
				Hanzo
				Lúcio
				McCree
				Mei
				Pharah
			}
		}
	}
}

variables
{
	global:
		2: HostCheatsEnabled
		4: ShortCooldownsEnabled
		5: RulerEnabled
		6: DebugHUD
		7: ServerLoadText
		8: antiCrashActive

	player:
		0: HudText
		1: IsUsingAbility
		2: AbilityCooldowns
		3: AbilityVariables
		4: AbilityEffects
		5: AbilityVariableChase_I
		6: AbilityVariableChase_II
		7: IsStatsChanged
		8: InfoHUDText
		10: HEROPharahSelfDamageModID
		11: HEROMeiChilledDebuff
		12: HEROMeiChilledPassive
		13: HEROMeiIceWall
}

subroutines
{
	0: SpawnStatsReset
	1: EffectHandler
	2: HUDHandler
	3: InfoHUDDespawner
	4: InfoHUDHandler
	5: HEROMeiIceWallStats
}

rule("[Toggleable Options and More] (most require debug scripts added)")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		"Greatly reduces server lag"
		Disable Inspector Recording;
		"Enable Server Load HUD"
		disabled Global.ServerLoadText = True;
		"Enable Debug HUD"
		disabled Global.DebugHUD = True;
		"Enable Host Cheats"
		disabled Global.HostCheatsEnabled = True;
		"Enable Ruler"
		disabled Global.RulerEnabled = True;
		"Enable Short Cooldowns"
		disabled Global.ShortCooldownsEnabled = True;
	}
}

rule("========================[] Gamemode")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}
}

rule("Fast Setup Time")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Assembling Heroes == True;
	}

	actions
	{
		Kill(All Players(All Teams), Null);
		Set Match Time(18);
	}
}

rule("!!! Anti Crash !!!")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.antiCrashActive == False;
		Server Load > 185;
	}

	actions
	{
		Wait(0.200, Abort When False);
		Small Message(All Players(All Teams), Custom String("Anti crash system activated"));
		Set Slow Motion(10);
		Global.antiCrashActive = True;
		Wait(1, Abort When False);
		Loop If Condition Is True;
	}
}

rule("!!! Anti Crash Reset After Returned to Normal !!!")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.antiCrashActive == True;
		Server Load < 175;
	}

	actions
	{
		Set Slow Motion(100);
		Global.antiCrashActive = False;
	}
}

rule("[SUB] SpawnStatsReset")
{
	event
	{
		Subroutine;
		SpawnStatsReset;
	}

	actions
	{
		"If a stats change is in effect on the current player, then reset stats"
		If(Event Player.IsStatsChanged == True);
			Set Max Health(Event Player, 100);
			Set Damage Dealt(Event Player, 100);
			Set Damage Received(Event Player, 100);
			Set Healing Dealt(Event Player, 100);
			Set Projectile Speed(Event Player, 100);
			Set Projectile Gravity(Event Player, 100);
			Set Move Speed(Event Player, 100);
			Set Gravity(Event Player, 100);
			Set Invisible(Event Player, None);
		End;
		Wait(0.016, Ignore Condition);
		"Reset abilities (Cannot be detected by workshop code yet, so activate on every character)"
		Set Primary Fire Enabled(Event Player, True);
		Set Secondary Fire Enabled(Event Player, True);
		Set Ability 1 Enabled(Event Player, True);
		Set Ability 2 Enabled(Event Player, True);
		Set Ultimate Ability Enabled(Event Player, True);
		Wait(0.016, Ignore Condition);
		Allow Button(Event Player, Primary Fire);
		Allow Button(Event Player, Secondary Fire);
		Allow Button(Event Player, Ability 1);
		Allow Button(Event Player, Ability 2);
		Allow Button(Event Player, Ultimate);
		"If ANY Ability Cooldowns are not 0"
		If(Is True For Any(Event Player.AbilityCooldowns, Current Array Element != 0));
			Event Player.AbilityCooldowns[1] = 0;
			Event Player.AbilityCooldowns[2] = 0;
			Event Player.AbilityCooldowns[3] = 0;
		End;
		Wait(0.016, Ignore Condition);
		"If ANY custom abilities are in-use"
		If(Is True For Any(Event Player.IsUsingAbility, Current Array Element != False));
			Event Player.IsUsingAbility[1] = False;
			Event Player.IsUsingAbility[2] = False;
			Event Player.IsUsingAbility[3] = False;
			Event Player.IsUsingAbility[4] = False;
		End;
		"If any chase variables are not null, stop them and set to null"
		If((Event Player.AbilityVariableChase_I || Event Player.AbilityVariableChase_II) != Null);
			Stop Chasing Player Variable(Event Player, AbilityVariableChase_I);
			Stop Chasing Player Variable(Event Player, AbilityVariableChase_II);
			Event Player.AbilityVariableChase_I = Null;
			Event Player.AbilityVariableChase_II = Null;
		End;
		"Status Effect Apocolypse"
		If(Has Status(Event Player, Hacked) == True);
			Clear Status(Event Player, Hacked);
		End;
		If(Has Status(Event Player, Burning) == True);
			Clear Status(Event Player, Burning);
		End;
		If(Has Status(Event Player, Knocked Down) == True);
			Clear Status(Event Player, Knocked Down);
		End;
		If(Has Status(Event Player, Asleep) == True);
			Clear Status(Event Player, Asleep);
		End;
		If(Has Status(Event Player, Frozen) == True);
			Clear Status(Event Player, Frozen);
		End;
		If(Has Status(Event Player, Unkillable) == True);
			Clear Status(Event Player, Unkillable);
		End;
		If(Has Status(Event Player, Invincible) == True);
			Clear Status(Event Player, Invincible);
		End;
		If(Has Status(Event Player, Phased Out) == True);
			Clear Status(Event Player, Phased Out);
		End;
		If(Has Status(Event Player, Rooted) == True);
			Clear Status(Event Player, Rooted);
		End;
		If(Has Status(Event Player, Stunned) == True);
			Clear Status(Event Player, Stunned);
		End;
	}
}

rule("[SUB] EffectHandler")
{
	event
	{
		Subroutine;
		EffectHandler;
	}

	actions
	{
		"Erase all previous effects"
		While(Event Player.AbilityEffects[0] != 0);
			Destroy Effect(Last Of(Event Player.AbilityEffects));
			Modify Player Variable(Event Player, AbilityEffects, Remove From Array By Value, Last Of(Event Player.AbilityEffects));
			Event Player.AbilityEffects[0] -= 1;
			Wait(0.016, Ignore Condition);
		End;
		"Lucio Custom Effects"
		If(Hero Of(Event Player) == Hero(Lúcio));
			Create Effect(Filtered Array(Filtered Array(Event Player, Is Alive(Event Player) == True), Is Using Ability 1(Event Player)
				!= True), Ring, Blue, Position Of(Event Player), 12, Visible To Position and Radius);
			Modify Player Variable(Event Player, AbilityEffects, Append To Array, Last Created Entity);
			Create Effect(Filtered Array(All Players(All Teams), Event Player.IsUsingAbility[2] == True), Light Shaft, Green, Vector(
				X Component Of(Position Of(Event Player)), Y Component Of(Position Of(Event Player)) - Altitude Of(Event Player),
				Z Component Of(Position Of(Event Player))), 12, Visible To Position and Radius);
			Modify Player Variable(Event Player, AbilityEffects, Append To Array, Last Created Entity);
			Create Effect(Filtered Array(All Players(All Teams), Event Player.IsUsingAbility[2] == True), Ring, Green, Vector(X Component Of(
				Position Of(Event Player)), Y Component Of(Position Of(Event Player)) - Altitude Of(Event Player), Z Component Of(Position Of(
				Event Player))), 12, Visible To Position and Radius);
			Modify Player Variable(Event Player, AbilityEffects, Append To Array, Last Created Entity);
			Event Player.AbilityEffects[0] += 3;
		Else;
		End;
	}
}

rule("[SUB] HUDHandler")
{
	event
	{
		Subroutine;
		HUDHandler;
	}

	actions
	{
		"Erase all previous effects"
		While(Event Player.HudText[0] != 0);
			Destroy HUD Text(Last Of(Event Player.HudText));
			Modify Player Variable(Event Player, HudText, Remove From Array By Value, Last Of(Event Player.HudText));
			Event Player.HudText[0] -= 1;
			Wait(0.016, Ignore Condition);
		End;
		"HEROES"
		If(Hero Of(Event Player) == Hero(Ana));
		Else If(Hero Of(Event Player) == Hero(Bastion));
			Wait(0.016, Ignore Condition);
			Create HUD Text(Filtered Array(Event Player, Hero Of(Event Player) == Hero(Bastion)), Custom String("{0}%", Round To Integer(
				Event Player.AbilityVariableChase_I, To Nearest)), Custom String("Passive: Ammo Reserve"), Custom String("{0}",
				Ability Icon String(Hero(Bastion), Button(Primary Fire))), Left, -3, White, Lime Green, White, Visible To and String,
				Default Visibility);
			Modify Player Variable(Event Player, HudText, Append To Array, Last Text ID);
			Event Player.HudText[0] = 1;
		Else If(Hero Of(Event Player) == Hero(McCree));
			Wait(0.016, Ignore Condition);
			Create HUD Text(Filtered Array(Filtered Array(Event Player, Hero Of(Event Player) == Hero(McCree)),
				Event Player.AbilityVariables[1] != 0), Event Player.AbilityVariables[1], Custom String(
				"Primary/Secondary Fire: Reloading..."), Custom String("Peacemaker"), Left, -3, Red, Red, Red, Visible To and String,
				Default Visibility);
			Modify Player Variable(Event Player, HudText, Append To Array, Last Text ID);
			Create HUD Text(Filtered Array(Filtered Array(Event Player, Hero Of(Event Player) == Hero(McCree)),
				Event Player.AbilityVariables[1] == 0), Icon String(Checkmark), Custom String("Primary/Secondary Fire: Loaded"), Custom String(
				"Peacemaker"), Left, -3, White, Red, White, Visible To and String, Default Visibility);
			Modify Player Variable(Event Player, HudText, Append To Array, Last Text ID);
			Event Player.HudText[0] = 2;
		Else If(Hero Of(Event Player) == Hero(Lúcio));
			Wait(0.016, Ignore Condition);
			Create HUD Text(Filtered Array(Event Player, Event Player.IsUsingAbility[1] == True), Null, Custom String(
				"Ability 1: Now Playing"), Custom String("Speed Boost"), Left, -2, White, Green, Green, Visible To and String,
				Default Visibility);
			Modify Player Variable(Event Player, HudText, Append To Array, Last Text ID);
			Create HUD Text(Filtered Array(Event Player, Event Player.IsUsingAbility[1] == False), Null, Custom String(
				"Ability 1: Now Playing"), Custom String("Damage Boost"), Left, -2, White, Green, Blue, Visible To and String,
				Default Visibility);
			Modify Player Variable(Event Player, HudText, Append To Array, Last Text ID);
			Event Player.HudText[0] = 2;
		Else;
		End;
	}
}

rule("[SUB] InfoHUDDespawner")
{
	event
	{
		Subroutine;
		InfoHUDDespawner;
	}

	actions
	{
		"Erase all previous effects"
		While(Event Player.InfoHUDText[0] != -1);
			Destroy HUD Text(Last Of(Event Player.InfoHUDText));
			Modify Player Variable(Event Player, InfoHUDText, Remove From Array By Value, Last Of(Event Player.InfoHUDText));
			Event Player.InfoHUDText[0] -= 1;
			Wait(0.016, Ignore Condition);
		End;
		Wait(0.016, Ignore Condition);
	}
}

rule("[SUB] InfoHUDHandler")
{
	event
	{
		Subroutine;
		InfoHUDHandler;
	}

	actions
	{
		"PLACEHOLDERS"
		disabled Else If(Hero Of(Event Player) == Hero(Ana));
		"Name of Thing"
		disabled Create HUD Text(Event Player, Custom String("{0} : Name", Ability Icon String(Hero(Ana), Button(Ultimate))), Null, Null, Left, 1,
			Sky Blue, White, White, Visible To and String, Default Visibility);
		disabled Modify Player Variable(Event Player, InfoHUDText, Append To Array, Last Text ID);
		disabled Create HUD Text(Event Player, Null, Null, Custom String("Description"), Left, 2, White, White, White, Visible To and String,
			Default Visibility);
		disabled Modify Player Variable(Event Player, InfoHUDText, Append To Array, Last Text ID);
		disabled Event Player.InfoHUDText[0] = 8;
		Wait(0.016, Ignore Condition);
		Create HUD Text(Event Player, Custom String("{0} : Info", Hero Icon String(Hero Of(Event Player))), Null, Null, Left, 0.100, White,
			White, White, Visible To and String, Default Visibility);
		Modify Player Variable(Event Player, InfoHUDText, Append To Array, Last Text ID);
		"HEROES, ANA"
		If(Hero Of(Event Player) == Hero(Ana));
			"Bio Grenade"
			Create HUD Text(Event Player, Custom String("{0}: Biotic Grenade", Ability Icon String(Hero(Ana), Button(Ability 2))), Null, Null,
				Left, 1, Sky Blue, White, White, Visible To and String, Default Visibility);
			Modify Player Variable(Event Player, InfoHUDText, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Null, Null, Custom String("Provides an escape if thrown down while jumping"), Left, 2, White, White,
				White, Visible To and String, Default Visibility);
			Modify Player Variable(Event Player, InfoHUDText, Append To Array, Last Text ID);
			"Sleep Dart"
			Create HUD Text(Event Player, Custom String("{0}: Sleep Dart", Ability Icon String(Hero(Ana), Button(Ability 1))), Null, Null,
				Left, 3, Sky Blue, White, White, Visible To and String, Default Visibility);
			Modify Player Variable(Event Player, InfoHUDText, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Null, Null, Custom String("Gives you a speed boost on hit"), Left, 4, White, White, White,
				Visible To and String, Default Visibility);
			Modify Player Variable(Event Player, InfoHUDText, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Null, Null, Custom String("Reduces your {2} cooldown", Null, Null, Ability Icon String(Hero(Ana),
				Button(Ability 2))), Left, 5, White, White, White, Visible To and String, Default Visibility);
			Modify Player Variable(Event Player, InfoHUDText, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Null, Null, Custom String("Effects stop and cooldown starts after enemy wake up"), Left, 6, White,
				White, Red, Visible To and String, Default Visibility);
			Modify Player Variable(Event Player, InfoHUDText, Append To Array, Last Text ID);
			"Ultimate"
			Create HUD Text(Event Player, Custom String("{0} : Nano Volley", Ability Icon String(Hero(Ana), Button(Ultimate))), Null, Null,
				Left, 7, Sky Blue, White, White, Visible To and String, Default Visibility);
			Modify Player Variable(Event Player, InfoHUDText, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Null, Null, Custom String("Throws a volley of {2} at high speeds!", Null, Null, Ability Icon String(
				Hero(Ana), Button(Ability 2))), Left, 8, White, White, White, Visible To and String, Default Visibility);
			Modify Player Variable(Event Player, InfoHUDText, Append To Array, Last Text ID);
			Event Player.InfoHUDText[0] = 8;
		"Ashe"
		Else If(Hero Of(Event Player) == Hero(Ashe));
			"Coach Gun"
			Create HUD Text(Event Player, Custom String("{0} : Coach Gun", Ability Icon String(Hero(Ashe), Button(Ability 1))), Null, Null,
				Left, 1, Sky Blue, White, White, Visible To and String, Default Visibility);
			Modify Player Variable(Event Player, InfoHUDText, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Null, Null, Custom String("You can use Coach Gun twice!"), Left, 2, White, White, White,
				Visible To and String, Default Visibility);
			Modify Player Variable(Event Player, InfoHUDText, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Null, Null, Custom String("Cooldown starts automatically if second shot is not used"), Left, 3,
				White, White, Red, Visible To and String, Default Visibility);
			Modify Player Variable(Event Player, InfoHUDText, Append To Array, Last Text ID);
			Event Player.InfoHUDText[0] = 3;
		"PLACEHOLDERS"
		Else If(Hero Of(Event Player) == Hero(Bastion));
			"Name of Thing"
			Create HUD Text(Event Player, Custom String("{0} : Reconfigure", Ability Icon String(Hero(Bastion), Button(Ultimate))), Null, Null,
				Left, 1, Sky Blue, White, White, Visible To and String, Default Visibility);
			Modify Player Variable(Event Player, InfoHUDText, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Null, Null, Custom String("{0} has limited ammo that regenerates outside of {0} form",
				Ability Icon String(Hero(Bastion), Button(Primary Fire))), Left, 2, White, White, White, Visible To and String,
				Default Visibility);
			Modify Player Variable(Event Player, InfoHUDText, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Null, Null, Custom String("Holding jump in {0} form moves you forward slowly", Ability Icon String(
				Hero(Bastion), Button(Primary Fire))), Left, 3, White, White, White, Visible To and String, Default Visibility);
			Modify Player Variable(Event Player, InfoHUDText, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Null, Null, Custom String("You can only {0} if at 100% ammo", Ability Icon String(Hero(Bastion),
				Button(Ability 1))), Left, 4, White, White, Red, Visible To and String, Default Visibility);
			Modify Player Variable(Event Player, InfoHUDText, Append To Array, Last Text ID);
			"Name of Thing"
			Create HUD Text(Event Player, Custom String("{0} : Null Wrecker", Ability Icon String(Hero(Bastion), Button(Ultimate))), Null,
				Null, Left, 5, Sky Blue, White, White, Visible To and String, Default Visibility);
			Modify Player Variable(Event Player, InfoHUDText, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Null, Null, Custom String("Bastion's shots are super powerful"), Left, 6, White, White, White,
				Visible To and String, Default Visibility);
			Modify Player Variable(Event Player, InfoHUDText, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Null, Null, Custom String("You can no longer move in this form, and it is much shorter"), Left, 7,
				White, White, Red, Visible To and String, Default Visibility);
			Modify Player Variable(Event Player, InfoHUDText, Append To Array, Last Text ID);
			Event Player.InfoHUDText[0] = 7;
		"PLACEHOLDERS"
		Else If(Hero Of(Event Player) == Hero(McCree));
			"Name of Thing"
			Create HUD Text(Event Player, Custom String("{0} : Peacekeeper", Ability Icon String(Hero(McCree), Button(Primary Fire))), Null,
				Null, Left, 1, Sky Blue, White, White, Visible To and String, Default Visibility);
			Modify Player Variable(Event Player, InfoHUDText, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Null, Null, Custom String("Primary and Secondary fire are cooldown-based"), Left, 2, White, White,
				Red, Visible To and String, Default Visibility);
			Modify Player Variable(Event Player, InfoHUDText, Append To Array, Last Text ID);
			"Name of Thing"
			Create HUD Text(Event Player, Custom String("{0}: Draw ", Ability Icon String(Hero(Genji), Button(Jump))), Null, Null, Left, 3,
				Sky Blue, White, White, Visible To and String, Default Visibility);
			Modify Player Variable(Event Player, InfoHUDText, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Null, Null, Custom String("Using any ability resets your {0} cooldown", Ability Icon String(Hero(
				McCree), Button(Primary Fire))), Left, 4, White, White, White, Visible To and String, Default Visibility);
			Modify Player Variable(Event Player, InfoHUDText, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Null, Null, Custom String("Headshots and kills severely lower your {0} cooldown",
				Ability Icon String(Hero(McCree), Button(Primary Fire))), Left, 5, White, White, White, Visible To and String,
				Default Visibility);
			Modify Player Variable(Event Player, InfoHUDText, Append To Array, Last Text ID);
			"Name of Thing"
			Create HUD Text(Event Player, Custom String("{0} : Deadeye", Ability Icon String(Hero(McCree), Button(Ultimate))), Null, Null,
				Left, 6, Sky Blue, White, White, Visible To and String, Default Visibility);
			Modify Player Variable(Event Player, InfoHUDText, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Null, Null, Custom String("No longer slows you down"), Left, 7, White, White, White,
				Visible To and String, Default Visibility);
			Modify Player Variable(Event Player, InfoHUDText, Append To Array, Last Text ID);
			Event Player.InfoHUDText[0] = 7;
		"PLACEHOLDERS"
		Else If(Hero Of(Event Player) == Hero(Lúcio));
			"Name of Thing"
			Create HUD Text(Event Player, Custom String("{0} : Damage Boost Song", Ability Icon String(Hero(Lúcio), Button(Ability 1))), Null,
				Null, Left, 1, Sky Blue, White, White, Visible To and String, Default Visibility);
			Modify Player Variable(Event Player, InfoHUDText, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Null, Null, Custom String("Heal song has been replaced with Damage Boost song"), Left, 2, White,
				White, White, Visible To and String, Default Visibility);
			Modify Player Variable(Event Player, InfoHUDText, Append To Array, Last Text ID);
			"Name of Thing"
			Create HUD Text(Event Player, Custom String("{0} : Subwoofer Blowout", Ability Icon String(Hero(Lúcio), Button(Ultimate))), Null,
				Null, Left, 3, Sky Blue, White, White, Visible To and String, Default Visibility);
			Modify Player Variable(Event Player, InfoHUDText, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Null, Null, Custom String("Landing knocks all enemies within your song radius upwards"), Left, 4,
				White, White, White, Visible To and String, Default Visibility);
			Modify Player Variable(Event Player, InfoHUDText, Append To Array, Last Text ID);
			Event Player.InfoHUDText[0] = 4;
		"PLACEHOLDERS"
		Else If(Hero Of(Event Player) == Hero(Hanzo));
			"Name of Thing"
			Create HUD Text(Event Player, Custom String("{0} : Shock Arrow", Ability Icon String(Hero(Hanzo), Button(Ability 2))), Null, Null,
				Left, 1, Sky Blue, White, White, Visible To and String, Default Visibility);
			Modify Player Variable(Event Player, InfoHUDText, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Null, Null, Custom String("Storm arrows cause small explosions upon impact"), Left, 2, White, White,
				White, Visible To and String, Default Visibility);
			Modify Player Variable(Event Player, InfoHUDText, Append To Array, Last Text ID);
			Event Player.InfoHUDText[0] = 2;
		"PLACEHOLDERS"
		Else If(Hero Of(Event Player) == Hero(Mei));
			"Name of Thing"
			Create HUD Text(Event Player, Custom String("{0} : Chilled", Ability Icon String(Hero(Genji), Button(Jump))), Null, Null, Left, 1,
				Sky Blue, White, White, Visible To and String, Default Visibility);
			Modify Player Variable(Event Player, InfoHUDText, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Null, Null, Custom String("Enemies damaged by Mei deal less damage for a short time"), Left, 2,
				White, White, White, Visible To and String, Default Visibility);
			Modify Player Variable(Event Player, InfoHUDText, Append To Array, Last Text ID);
			"Name of Thing"
			Create HUD Text(Event Player, Custom String("{0} : Cryo-Freeze", Ability Icon String(Hero(Mei), Button(Ability 1))), Null, Null,
				Left, 3, Sky Blue, White, White, Visible To and String, Default Visibility);
			Modify Player Variable(Event Player, InfoHUDText, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Null, Null, Custom String("Heals more, but is shorter in duration"), Left, 4, White, White, White,
				Visible To and String, Default Visibility);
			Modify Player Variable(Event Player, InfoHUDText, Append To Array, Last Text ID);
			"Name of Thing"
			Create HUD Text(Event Player, Custom String("{0} : Ice Wall", Ability Icon String(Hero(Mei), Button(Ability 2))), Null, Null, Left,
				5, Sky Blue, White, White, Visible To and String, Default Visibility);
			Modify Player Variable(Event Player, InfoHUDText, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Null, Null, Custom String("Cooldown is lowered significantly"), Left, 6, White, White, White,
				Visible To and String, Default Visibility);
			Modify Player Variable(Event Player, InfoHUDText, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Null, Null, Custom String("Health of each pillar is lowered significantly"), Left, 7, White, White,
				Red, Visible To and String, Default Visibility);
			Modify Player Variable(Event Player, InfoHUDText, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Null, Null, Custom String(
				"Note: There is a visual bug with Mei's HP while placing {0}. Actual damage taken is not changed.", Ability Icon String(Hero(
				Mei), Button(Ability 2))), Left, 8, White, White, Orange, Visible To and String, Default Visibility);
			Modify Player Variable(Event Player, InfoHUDText, Append To Array, Last Text ID);
			Event Player.InfoHUDText[0] = 8;
		"ENDING"
		Else;
			"Missing Info"
			Create HUD Text(Event Player, Custom String("{0} Info Missing {0}", Icon String(X)), Null, Null, Left, 1, Red, White, White,
				Visible To and String, Default Visibility);
			Modify Player Variable(Event Player, InfoHUDText, Append To Array, Last Text ID);
			Event Player.InfoHUDText[0] = 1;
	}
}

rule("Per-Hero Info Notification")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Create HUD Text(All Players(All Teams), Null, Null, Custom String("Use voice line up for per-hero info"), Left, -100, White, White,
			White, Visible To and String, Visible Never);
	}
}

rule("Info Handler")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Communicating(Event Player, Voice Line Up) == True;
	}

	actions
	{
		"Despawn all previous things"
		Call Subroutine(InfoHUDDespawner);
		"Get and Display Info"
		Call Subroutine(InfoHUDHandler);
		"Check for player deaths"
		Wait(4, Restart When True);
		Abort If(Is Dead(Event Player) == True);
		Wait(4, Restart When True);
		Abort If(Is Dead(Event Player) == True);
		Wait(4, Restart When True);
		Abort If(Is Dead(Event Player) == True);
		Wait(4, Restart When True);
		Abort If(Is Dead(Event Player) == True);
		Wait(4, Restart When True);
		Abort If(Is Dead(Event Player) == True);
		"Despawn all previous Info HUDs"
		Call Subroutine(InfoHUDDespawner);
	}
}

rule("Ability 1 Cooldown")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.AbilityCooldowns[1] > 0;
		Event Player.IsUsingAbility[1] != True;
		Is Alive(Event Player) == True;
	}

	actions
	{
		"Check if cooldown is 0"
		If(Event Player.AbilityCooldowns[1] != 0);
			"Lower cooldown by 1 after 1 second"
			Wait(1, Abort When False);
			Event Player.AbilityCooldowns[1] -= 1;
			Loop If Condition Is True;
		"If cooldown is 0"
		Else;
			Play Effect(Event Player, Ring Explosion Sound, White, Event Player, 50);
		End;
	}
}

rule("Ability 2 Cooldown")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.AbilityCooldowns[2] > 0;
		Event Player.IsUsingAbility[2] != True;
		Is Alive(Event Player) == True;
	}

	actions
	{
		"Check if cooldown is 0"
		If(Event Player.AbilityCooldowns[2] != 0);
			"Lower cooldown by 1 after 1 second"
			Wait(1, Abort When False);
			Event Player.AbilityCooldowns[2] -= 1;
			Loop If Condition Is True;
		"If cooldown is 0"
		Else;
			Play Effect(Event Player, Ring Explosion Sound, White, Event Player, 50);
		End;
	}
}

rule("Ability 3 Cooldown")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.AbilityCooldowns[3] > 0;
		Event Player.IsUsingAbility[3] != True;
		Is Alive(Event Player) == True;
	}

	actions
	{
		"Check if cooldown is 0"
		If(Event Player.AbilityCooldowns[3] != 0);
			"Lower cooldown by 1 after 1 second"
			Wait(1, Abort When False);
			Event Player.AbilityCooldowns[3] -= 1;
			Loop If Condition Is True;
		"If cooldown is 0"
		Else;
			Play Effect(Event Player, Ring Explosion Sound, White, Event Player, 50);
		End;
	}
}

rule("Initialize EVERY Character")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Alive(Event Player) == True;
		Has Spawned(Event Player) == True;
		Health(Event Player) != 0;
	}

	actions
	{
		"Reset ULT charge to 0"
		Set Ultimate Charge(Event Player, 0);
		"Reset stats as needed"
		Call Subroutine(SpawnStatsReset);
		"Spawn hero-specific effects"
		Call Subroutine(EffectHandler);
		"Reset hero-specific HUDs"
		Call Subroutine(HUDHandler);
		"Reset hero-specific Info HUDs"
		Call Subroutine(InfoHUDDespawner);
		"Ashe Custom Stats"
		If(Hero Of(Event Player) == Hero(Ashe));
			Event Player.AbilityVariables[1] = 2;
		"Bastion Custom Stats"
		Else If(Hero Of(Event Player) == Hero(Bastion));
			Set Max Health(Event Player, 400 / 300 * 100);
			Event Player.IsStatsChanged = True;
			Wait(0.016, Ignore Condition);
			Event Player.AbilityVariableChase_I = 100;
		"McCree custom stats"
		Else If(Hero Of(Event Player) == Hero(McCree));
			Event Player.AbilityVariables[2] = True;
			Event Player.AbilityVariables[1] = 0;
		"Pharah Custom Stats"
		Else If(Hero Of(Event Player) == Hero(Pharah));
			Event Player.IsStatsChanged = True;
			Start Damage Modification(Event Player, Event Player, 25 / 40 * 100, None);
			Event Player.HEROPharahSelfDamageModID = Last Damage Modification ID;
		"Lucio Custom Stats"
		Else If(Hero Of(Event Player) == Hero(Lúcio));
			Set Healing Dealt(Event Player, 0);
			Event Player.IsStatsChanged = True;
			Event Player.IsUsingAbility[1] = True;
		"Hanzo custom stats"
		Else If(Hero Of(Event Player) == Hero(Hanzo));
			Event Player.IsStatsChanged = True;
		Else;
		End;
		Wait(0.016, Ignore Condition);
		"Heal all players to max hp incase of odd max hp behavior"
		disabled While(Health(Event Player) != Max Health(Event Player));
		disabled Heal(Event Player, Null, 10000);
		disabled Wait(0.016, Ignore Condition);
		disabled End;
	}
}

rule("[Ashe] Coach Gun")
{
	event
	{
		Ongoing - Each Player;
		All;
		Ashe;
	}

	conditions
	{
		Is Using Ability 1(Event Player) == True;
	}

	actions
	{
		Event Player.AbilityVariables[1] -= 1;
		"If ammo is still in the clip, then..."
		If(Event Player.AbilityVariables[1] > 0);
			"WAIT FOR ABILITY TO END"
			While(Is Using Ability 1(Event Player) == True);
				Wait(0.016, Ignore Condition);
			End;
			"Set Cooldown to 0 for second shot"
			Set Ability Cooldown(Event Player, Button(Ability 1), 0);
			Wait(2.250, Restart When True);
			Abort If(Is Dead(Event Player) == True);
			"Abort if already shot"
			Abort If(Event Player.AbilityVariables[1] == 0);
			"Remove extra shot"
			Event Player.AbilityVariables[1] = 0;
			Set Ability Cooldown(Event Player, Button(Ability 1), 10);
		"If out of ammo"
		Else If(Event Player.AbilityVariables[1] == 0);
			Wait(0.200, Ignore Condition);
			Set Ability Cooldown(Event Player, Button(Ability 1), 10);
		End;
	}
}

rule("[Ashe] Coach Gun (Cooldown at 0)")
{
	event
	{
		Ongoing - Each Player;
		All;
		Ashe;
	}

	conditions
	{
		Ability Cooldown(Event Player, Button(Ability 1)) == 0;
		Event Player.AbilityVariables[1] == 0;
	}

	actions
	{
		Wait(0.016, Abort When False);
		Event Player.AbilityVariables[1] = 2;
	}
}

rule("[Bastion] Turret Ability Transform")
{
	event
	{
		Ongoing - Each Player;
		All;
		Bastion;
	}

	conditions
	{
		Is Using Ability 1(Event Player) == True;
		Is Alive(Event Player) == True;
	}

	actions
	{
		If(Event Player.IsUsingAbility[1] == False);
			Disallow Button(Event Player, Ability 1);
			Wait(0.016, Ignore Condition);
			Loop If(Is Using Ability 1(Event Player) == True);
			Set Move Speed(Event Player, 50);
			Event Player.IsUsingAbility[1] = True;
			Allow Button(Event Player, Ability 1);
		Else If(Event Player.IsUsingAbility[1] == True);
			Disallow Button(Event Player, Ability 1);
			Wait(0.016, Ignore Condition);
			Loop If(Is Using Ability 1(Event Player) == True);
			Set Move Speed(Event Player, 100);
			Set Damage Dealt(Event Player, 100);
			Event Player.IsUsingAbility[1] = False;
			Allow Button(Event Player, Ability 1);
		End;
	}
}

rule("[Bastion] Turret Ammo Regen")
{
	event
	{
		Ongoing - Each Player;
		All;
		Bastion;
	}

	conditions
	{
		Event Player.IsUsingAbility[1] == False;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Chase Player Variable At Rate(Event Player, AbilityVariableChase_I, 100, 6.250, None);
	}
}

rule("[Bastion] Turret Ability (Low Ammo Locks Abillity)")
{
	event
	{
		Ongoing - Each Player;
		All;
		Bastion;
	}

	conditions
	{
		Event Player.AbilityVariableChase_I != 100;
		Event Player.IsUsingAbility[1] == False;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Disallow Button(Event Player, Ability 1);
		Wait(0.016, Ignore Condition);
		Set Ability 1 Enabled(Event Player, False);
	}
}

rule("[Bastion] Ulting (in turret mode)")
{
	event
	{
		Ongoing - Each Player;
		All;
		Bastion;
	}

	conditions
	{
		Is Alive(Event Player) == True;
		Is Using Ultimate(Event Player) == True;
		disabled Event Player.IsUsingAbility[1] == True;
		Is Alive(Event Player) == True;
	}

	actions
	{
		"If Bastion is still in turret"
		If(Event Player.IsUsingAbility[1] == True);
			Disallow Button(Event Player, Ability 1);
			Set Move Speed(Event Player, 100);
			Set Damage Dealt(Event Player, 100);
			Event Player.IsUsingAbility[1] = False;
			Wait(0.016, Ignore Condition);
		End;
		Set Status(Event Player, Null, Rooted, 6.600);
		Set Damage Dealt(Event Player, 300 / 102.500 * 100);
		Stop Accelerating(Event Player);
		Wait(5.500, Ignore Condition);
		Abort If(Is Alive(Event Player) == False);
		Set Damage Dealt(Event Player, 100);
	}
}

rule("[Bastion] turret unlock on cooldown finish")
{
	event
	{
		Ongoing - Each Player;
		All;
		Bastion;
	}

	conditions
	{
		Event Player.AbilityVariableChase_I == 100;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Allow Button(Event Player, Ability 1);
		Set Ability 1 Enabled(Event Player, True);
		Stop Chasing Player Variable(Event Player, AbilityVariableChase_I);
	}
}

rule("[Bastion] Turret Ammo Usage")
{
	event
	{
		Ongoing - Each Player;
		All;
		Bastion;
	}

	conditions
	{
		Is Firing Primary(Event Player) == True;
		Event Player.IsUsingAbility[1] == True;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Chase Player Variable At Rate(Event Player, AbilityVariableChase_I, 0, 20, None);
	}
}

rule("[Bastion] Ammo Stop Using")
{
	event
	{
		Ongoing - Each Player;
		All;
		Bastion;
	}

	conditions
	{
		Is Firing Primary(Event Player) != True;
		Event Player.IsUsingAbility[1] == True;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Stop Chasing Player Variable(Event Player, AbilityVariableChase_I);
	}
}

rule("[Bastion] auto-transform out of ammo")
{
	event
	{
		Ongoing - Each Player;
		All;
		Bastion;
	}

	conditions
	{
		Event Player.AbilityVariableChase_I == 0;
		Event Player.IsUsingAbility[1] == True;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Press Button(Event Player, Ability 1);
	}
}

rule("[Bastion] Movement by pressing Jump (Enable)")
{
	event
	{
		Ongoing - Each Player;
		All;
		Bastion;
	}

	conditions
	{
		Is Button Held(Event Player, Jump) == True;
		Is Alive(Event Player) == True;
		Has Status(Event Player, Frozen) == False;
		Has Status(Event Player, Knocked Down) == False;
		Has Status(Event Player, Hacked) == False;
		Has Status(Event Player, Stunned) == False;
		Has Status(Event Player, Asleep) == False;
		Is Using Ultimate(Event Player) == False;
		Event Player.IsUsingAbility[1] == True;
	}

	actions
	{
		Start Accelerating(Event Player, Forward, 1000, 60, To Player, Direction Rate and Max Speed);
	}
}

rule("[Bastion] Movement by pressing Jump (Disable)")
{
	event
	{
		Ongoing - Each Player;
		All;
		Bastion;
	}

	conditions
	{
		Is Button Held(Event Player, Jump) == False;
	}

	actions
	{
		Stop Accelerating(Event Player);
	}
}

rule("[Bastion] movement stop on transform")
{
	event
	{
		Ongoing - Each Player;
		All;
		Bastion;
	}

	conditions
	{
		Is Using Ability 1(Event Player) == True;
	}

	actions
	{
		Stop Accelerating(Event Player);
	}
}

rule("[Bastion] (Knock Down Cooldown Fix)")
{
	event
	{
		Ongoing - Each Player;
		All;
		Bastion;
	}

	conditions
	{
		"Is hacked, shattered, or asleep?"
		(Has Status(Event Player, Hacked) || Has Status(Event Player, Knocked Down) || Has Status(Event Player, Asleep)) == True;
		Event Player.IsUsingAbility[1] == True;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Set Move Speed(Event Player, 100);
		Set Damage Dealt(Event Player, 100);
		Event Player.IsUsingAbility[1] = False;
		Stop Accelerating(Event Player);
	}
}

rule("[Bastion] (Roadhog Hook Fix)")
{
	event
	{
		Player Took Damage;
		All;
		Bastion;
	}

	conditions
	{
		Has Status(Event Player, Stunned) == True;
		Event Player.IsUsingAbility[1] == True;
		Hero Of(Attacker) == Hero(Roadhog);
		Is Alive(Event Player) == True;
	}

	actions
	{
		Wait(0.016, Ignore Condition);
		Loop If Condition Is True;
		Set Move Speed(Event Player, 100);
		Set Damage Dealt(Event Player, 100);
		Event Player.IsUsingAbility[1] = False;
		Stop Accelerating(Event Player);
	}
}

rule("[Bastion] Movement (Dead)")
{
	event
	{
		Player Died;
		All;
		Bastion;
	}

	actions
	{
		Stop Accelerating(Event Player);
	}
}

rule("[McCree] Primary Fire Start Reload/Stats")
{
	event
	{
		Ongoing - Each Player;
		All;
		McCree;
	}

	conditions
	{
		Is Firing Primary(Event Player) == True;
	}

	actions
	{
		Event Player.AbilityVariables[1] = 1;
	}
}

rule("[McCree] Secondary Fire Start Reload/Stats")
{
	event
	{
		Ongoing - Each Player;
		All;
		McCree;
	}

	conditions
	{
		Is Firing Secondary(Event Player) == True;
		Event Player.AbilityVariables[1] == 0;
	}

	actions
	{
		Event Player.AbilityVariables[1] = 2.400;
		Set Ability Cooldown(Event Player, Button(Ability 1), Ability Cooldown(Event Player, Button(Ability 1)) + 0.336);
		Set Ability Cooldown(Event Player, Button(Ability 2), Ability Cooldown(Event Player, Button(Ability 2)) + 0.336);
		Disallow Button(Event Player, Ultimate);
		Wait(0.366, Ignore Condition);
		Cancel Primary Action(Event Player);
		Allow Button(Event Player, Ultimate);
		Abort If(Event Player.AbilityCooldowns[1] == 0);
		Set Secondary Fire Enabled(Event Player, False);
		Disallow Button(Event Player, Secondary Fire);
	}
}

rule("[McCree] Roll Reload")
{
	event
	{
		Ongoing - Each Player;
		All;
		McCree;
	}

	conditions
	{
		Is Using Ability 1(Event Player) == True;
	}

	actions
	{
		Event Player.AbilityVariables[1] = 0;
	}
}

rule("[McCree] Flashbang Reload")
{
	event
	{
		Ongoing - Each Player;
		All;
		McCree;
	}

	conditions
	{
		Is Using Ability 2(Event Player) == True;
	}

	actions
	{
		Event Player.AbilityVariables[1] = 0;
	}
}

rule("[McCree] McCree Headshot")
{
	event
	{
		Player Dealt Damage;
		All;
		McCree;
	}

	conditions
	{
		Event Was Critical Hit == True;
	}

	actions
	{
		Wait(0.100, Ignore Condition);
		Event Player.AbilityVariables[1] = 0.490;
		Set Ability Cooldown(Event Player, Button(Ability 1), Ability Cooldown(Event Player, Button(Ability 1)) - 1);
		Set Ability Cooldown(Event Player, Button(Ability 2), Ability Cooldown(Event Player, Button(Ability 2)) - 1);
	}
}

rule("[McCree] Reload On Kill")
{
	event
	{
		Player Earned Elimination;
		All;
		McCree;
	}

	actions
	{
		Wait(0.100, Ignore Condition);
		Event Player.AbilityVariables[1] = 0;
	}
}

rule("[McCree] Shot reloading")
{
	event
	{
		Ongoing - Each Player;
		All;
		McCree;
	}

	conditions
	{
		Event Player.AbilityVariables[1] != 0;
	}

	actions
	{
		While(Event Player.AbilityVariables[1] != 0);
			If(Event Player.AbilityVariables[2] != False);
				disabled Skip If(Event Player.AbilityVariables[2] == False, 5);
				Event Player.AbilityVariables[2] = False;
				Set Primary Fire Enabled(Event Player, False);
				Set Secondary Fire Enabled(Event Player, False);
				Disallow Button(Event Player, Primary Fire);
				Disallow Button(Event Player, Secondary Fire);
			End;
			Event Player.AbilityVariables[1] -= 0.010;
			Wait(0.010, Ignore Condition);
		End;
		Event Player.AbilityVariables[1] = 0;
		Event Player.AbilityVariables[2] = True;
		Set Primary Fire Enabled(Event Player, True);
		Set Secondary Fire Enabled(Event Player, True);
		Allow Button(Event Player, Primary Fire);
		Allow Button(Event Player, Secondary Fire);
	}
}

rule("[McCree] Ult Stats")
{
	event
	{
		Ongoing - Each Player;
		All;
		McCree;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		Event Player.AbilityVariables[1] = 0;
		Set Move Speed(Event Player, 400);
		Set Ability Cooldown(Event Player, Button(Ability 1), 0);
		Set Ability Cooldown(Event Player, Button(Ability 2), 0);
	}
}

rule("[McCree] Ult Stats Reset")
{
	event
	{
		Ongoing - Each Player;
		All;
		McCree;
	}

	conditions
	{
		Is Using Ultimate(Event Player) != True;
	}

	actions
	{
		Set Move Speed(Event Player, 100);
	}
}

rule("[Hanzo] Shock Arrows")
{
	event
	{
		Ongoing - Each Player;
		All;
		Hanzo;
	}

	conditions
	{
		Is Button Held(Event Player, Primary Fire) == True;
		Is Using Ability 2(Event Player) == True;
	}

	actions
	{
		Set Damage Dealt(Event Player, 50);
		Event Player.IsStatsChanged = True;
		Event Player.AbilityVariables[1] = Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player)
			+ Facing Direction Of(Event Player) * 100, All Players(All Teams), Event Player, True);
		Play Effect(All Players(All Teams), Bad Explosion, Sky Blue, Event Player.AbilityVariables[1], 4);
		Damage(Players Within Radius(Event Player.AbilityVariables[1], 4, All Teams, Surfaces And Enemy Barriers), Event Player, 2);
		Event Player.IsUsingAbility[1] = True;
		Wait(0.300, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("[Hanzo] Stop firing arrow in var")
{
	event
	{
		Ongoing - Each Player;
		All;
		Hanzo;
	}

	conditions
	{
		Is Button Held(Event Player, Primary Fire) == False;
		Is Using Ability 2(Event Player) == True;
	}

	actions
	{
		Event Player.IsUsingAbility[1] = False;
	}
}

rule("[Hanzo] Set firing speed Shock")
{
	event
	{
		Ongoing - Each Player;
		All;
		Hanzo;
	}

	conditions
	{
		Is Using Ability 2(Event Player) == True;
	}

	actions
	{
		Set Projectile Speed(Event Player, 100 * 10000);
		Event Player.IsUsingAbility[2] = True;
	}
}

rule("[Hanzo] Set firing speed Out of time/Arrows")
{
	event
	{
		Ongoing - Each Player;
		All;
		Hanzo;
	}

	conditions
	{
		Event Player.IsUsingAbility[2] == True;
		Is Using Ability 2(Event Player) == False;
	}

	actions
	{
		If(Is Button Held(Event Player, Primary Fire) == True);
			Event Player.AbilityVariables[1] = Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player)
				+ Facing Direction Of(Event Player) * 100, All Players(All Teams), Event Player, True);
			Play Effect(All Players(All Teams), Bad Explosion, Sky Blue, Event Player.AbilityVariables[1], 4);
			Damage(Players Within Radius(Event Player.AbilityVariables[1], 4, All Teams, Surfaces And Enemy Barriers), Event Player, 1);
			Event Player.IsUsingAbility[1] = True;
			Wait(0.050, Ignore Condition);
		End;
		Event Player.IsUsingAbility[1] = False;
		Event Player.IsUsingAbility[2] = False;
		Set Damage Dealt(Event Player, 100);
		Set Projectile Speed(Event Player, 100);
		Wait(0.100, Ignore Condition);
	}
}

rule("[Hanzo] Shock Arrow Damage Calculations")
{
	event
	{
		Player Took Damage;
		All;
		All;
	}

	conditions
	{
		Hero Of(Attacker) == Hero(Hanzo);
		Event Damage <= 3;
	}

	actions
	{
		"Actual max damage = 35"
		Damage(Event Player, Attacker, (9 + (25 - Distance Between(Attacker.AbilityVariables[1], Position Of(Event Player)) / 4 * 25))
			/ 0.500);
	}
}

rule("[Pharah] Jump Jets Forward")
{
	event
	{
		Ongoing - Each Player;
		All;
		Pharah;
	}

	conditions
	{
		Is Using Ability 1(Event Player) == True;
	}

	actions
	{
		Apply Impulse(Event Player, Forward, 17.666, To Player, Incorporate Contrary Motion);
	}
}

rule("[Pharah] Rocket Jumps/Pogo-Jumping/C-Taps allow market garden")
{
	event
	{
		Player Received Knockback;
		All;
		Pharah;
	}

	conditions
	{
		Attacker == Event Player;
		Is Using Ultimate(Event Player) == False;
	}

	actions
	{
		Enable Inspector Recording;
		Set Move Speed(Event Player, 125);
		Event Player.IsStatsChanged = True;
		"If doing a rocket jump crouched"
		If(Is Button Held(Event Player, Crouch) == True);
			"Check for if C-tap hasnt been done yet then check for jump input"
			If(Event Player.AbilityVariables[1] == False);
				If(Is Button Held(Event Player, Jump) == True);
					"C-Tap"
					Apply Impulse(Event Player, Event Direction, 6, To World, Incorporate Contrary Motion);
					Event Player.AbilityVariables[1] = True;
				Else;
					"Pogo Jumps"
					Apply Impulse(Event Player, Up, 3, To World, Cancel Contrary Motion);
					Apply Impulse(Event Player, Forward, 3, To Player, Incorporate Contrary Motion);
				End;
			"If C-Tap has been done, perform secondary C-Tap jump"
			Else;
				Apply Impulse(Event Player, Event Direction, 6, To World, Incorporate Contrary Motion);
			End;
		"If not holding crouch"
		Else;
			"Check for jump input"
			If(Is Button Held(Event Player, Jump) == True);
				Apply Impulse(Event Player, Event Direction, 4, To World, Incorporate Contrary Motion);
			"Do normal small jump"
			Else;
				Apply Impulse(Event Player, Event Direction, 1, To World, Incorporate Contrary Motion);
			End;
		End;
		Disable Inspector Recording;
	}
}

rule("[Pharah] C-Tap/Strafe speed Reset on landing")
{
	event
	{
		Ongoing - Each Player;
		All;
		Pharah;
	}

	conditions
	{
		Is On Ground(Event Player) == True;
	}

	actions
	{
		Set Move Speed(Event Player, 100);
		Event Player.AbilityVariables[1] = Null;
	}
}

rule("[Pharah] Market Garden")
{
	event
	{
		Player Dealt Damage;
		All;
		Pharah;
	}

	conditions
	{
		Event Player.AbilityVariables[1] == True;
		Is Meleeing(Event Player) == True;
	}

	actions
	{
		"30 + this damage"
		Damage(Victim, Event Player, 165);
		Wait(1, Ignore Condition);
	}
}

rule("[Pharah] Rocket Jump Ray Cast for impulse positioning")
{
	event
	{
		Ongoing - Each Player;
		All;
		Pharah;
	}

	conditions
	{
		Is Firing Primary(Event Player) == True;
	}

	actions
	{
		Event Player.AbilityVariables[2] = Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player)
			+ Facing Direction Of(Event Player) * 15, All Players(All Teams), Event Player, True);
	}
}

rule("[Lucio] Damage Boost song replaces heal song")
{
	event
	{
		Ongoing - Each Player;
		All;
		Lúcio;
	}

	conditions
	{
		Is Using Ability 1(Event Player) == False;
		Is Using Ability 2(Event Player) == False;
	}

	actions
	{
		Set Damage Dealt(Event Player, 125);
		Event Player.IsUsingAbility[1] = False;
	}
}

rule("[Lucio] Amp Damage Boost")
{
	event
	{
		Ongoing - Each Player;
		All;
		Lúcio;
	}

	conditions
	{
		Is Using Ability 2(Event Player) == True;
		Is Using Ability 1(Event Player) == False;
	}

	actions
	{
		Event Player.IsUsingAbility[1] = False;
		Set Damage Dealt(Event Player, 150);
		Wait(0.016, Ignore Condition);
		Loop If Condition Is True;
		Skip If(Is Using Ability 1(Event Player) == False, 1);
		Set Damage Dealt(Event Player, 100);
	}
}

rule("[Lucio] Speed Boost disables Damage Boost")
{
	event
	{
		Ongoing - Each Player;
		All;
		Lúcio;
	}

	conditions
	{
		Is Using Ability 1(Event Player) == True;
	}

	actions
	{
		Set Damage Dealt(Event Player, 100);
		Event Player.IsUsingAbility[1] = True;
	}
}

rule("[Lucio] Ultimate")
{
	event
	{
		Ongoing - Each Player;
		All;
		Lúcio;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		Event Player.IsUsingAbility[2] = True;
		Wait(0.050, Ignore Condition);
		While(Is In Air(Event Player) == True);
			Wait(0.016, Ignore Condition);
			Abort If(Is Dead(Event Player) == True);
		End;
		Apply Impulse(Remove From Array(Players Within Radius(Event Player, 12, All Teams, Surfaces And All Barriers), Event Player),
			Vector(0, 1.300, 0), 11.500, To World, Cancel Contrary Motion);
		Damage(Remove From Array(Players Within Radius(Event Player, 12, All Teams, Surfaces And All Barriers), Event Player),
			Event Player, 25);
		Event Player.IsUsingAbility[2] = False;
	}
}

rule("[Ana] Jump Grenade")
{
	event
	{
		Ongoing - Each Player;
		All;
		Ana;
	}

	conditions
	{
		Is Using Ability 2(Event Player) == True;
		Is Using Ultimate(Event Player) == False;
		Is Jumping(Event Player) == True;
	}

	actions
	{
		Abort If(Vertical Facing Angle Of(Event Player) < 50);
		Abort If(Altitude Of(Event Player) > 2);
		Apply Impulse(Event Player, Up, 15, To World, Cancel Contrary Motion);
		Abort If(Event Player.IsUsingAbility[1] == True);
		Set Move Speed(Event Player, 133);
		Wait(2, Ignore Condition);
		Abort If(Is Using Ultimate(Event Player) == True);
		Abort If(Event Player.IsUsingAbility[1] == True);
		Set Move Speed(Event Player, 100);
	}
}

rule("[Ana] Sleep Dart Changes")
{
	event
	{
		Player Dealt Damage;
		All;
		Ana;
	}

	conditions
	{
		Event Damage <= 7.500;
	}

	actions
	{
		Wait(0.010, Abort When False);
		Abort If(Has Status(Victim, Asleep) == False);
		Disallow Button(Event Player, Ultimate);
		Event Player.IsUsingAbility[1] = True;
		Set Move Speed(Event Player, 140);
		Set Ability Cooldown(Event Player, Button(Ability 2), Ability Cooldown(Event Player, Button(Ability 2)) - 3);
		While(Has Status(Victim, Asleep) == True);
			Set Ability Cooldown(Event Player, Button(Ability 1), 9);
			Wait(0.010, Ignore Condition);
		End;
		Event Player.IsUsingAbility[1] = False;
		Set Ability Cooldown(Event Player, Button(Ability 1), 9);
		Set Move Speed(Event Player, 100);
		Allow Button(Event Player, Ultimate);
	}
}

rule("[Ana] Ultimate: Biotic Volley")
{
	event
	{
		Ongoing - Each Player;
		All;
		Ana;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		Set Secondary Fire Enabled(Event Player, False);
		Set Primary Fire Enabled(Event Player, False);
		Set Ability 1 Enabled(Event Player, False);
		Set Projectile Speed(Event Player, 140);
		Set Damage Dealt(Event Player, 35 / 90 * 100);
		Set Healing Dealt(Event Player, 15);
		Set Move Speed(Event Player, 150);
		While(Is Using Ultimate(Event Player) == True);
			Cancel Primary Action(Event Player);
			Set Ability Cooldown(Event Player, Button(Ability 2), 0);
			Wait(1 / 5, Ignore Condition);
			Press Button(Event Player, Ability 2);
		End;
		Set Secondary Fire Enabled(Event Player, True);
		Set Primary Fire Enabled(Event Player, True);
		Set Ability 1 Enabled(Event Player, True);
		Set Projectile Speed(Event Player, 100);
		Set Damage Dealt(Event Player, 100);
		Set Healing Dealt(Event Player, 100);
		Set Move Speed(Event Player, 100);
		Set Ability Cooldown(Event Player, Button(Ability 2), 0);
	}
}

rule("[Mei] Chilled Debuff Apply")
{
	event
	{
		Player Dealt Damage;
		All;
		Mei;
	}

	conditions
	{
		Victim.HEROMeiChilledPassive == Null;
	}

	actions
	{
		Start Damage Modification(All Players(All Teams), Victim, 88, Receivers Damagers and Damage Percent);
		Victim.HEROMeiChilledDebuff = Last Damage Modification ID;
		Create Effect(All Players(All Teams), Sparkles, Blue, Victim, 0.650, Visible To Position and Radius);
		Victim.HEROMeiChilledPassive = Last Created Entity;
	}
}

rule("[Mei] Chilled Debuff Remove")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.HEROMeiChilledPassive != Null;
	}

	actions
	{
		Wait(4, Ignore Condition);
		Stop Damage Modification(Event Player.HEROMeiChilledDebuff);
		Destroy Effect(Event Player.HEROMeiChilledPassive);
		Event Player.HEROMeiChilledDebuff = Null;
		Event Player.HEROMeiChilledPassive = Null;
	}
}

rule("[Mei] Detect IceWall Activation")
{
	event
	{
		Ongoing - Each Player;
		All;
		Mei;
	}

	conditions
	{
		Is Using Ability 2(Event Player) == True;
	}

	actions
	{
		Event Player.HEROMeiIceWall = 1;
		Start Rule(HEROMeiIceWallStats, Restart Rule);
	}
}

rule("[Mei] Detect Placement Deactivation")
{
	event
	{
		Ongoing - Each Player;
		All;
		Mei;
	}

	conditions
	{
		Is Using Ability 2(Event Player) == False;
	}

	actions
	{
		Event Player.HEROMeiIceWall = 0;
		Start Rule(HEROMeiIceWallStats, Restart Rule);
	}
}

rule("[Mei] IceWall Duration")
{
	event
	{
		Ongoing - Each Player;
		All;
		Mei;
	}

	conditions
	{
		Event Player.HEROMeiIceWall == Absolute Value(1);
		Is Button Held(Event Player, Primary Fire) == True;
	}

	actions
	{
		"Reset All"
		Set Max Health(Event Player, 100);
		"Divide effective HP vs actual max hp so Mei doesnt take more damage than usual"
		Set Damage Received(Event Player, 100);
		"Divide effective HP vs actual max hp so Mei doesnt take more healing than usual"
		Set Healing Received(Event Player, 100);
		Wait(4, Ignore Condition);
		Press Button(Event Player, Ability 2);
	}
}

rule("[Mei] IceBlock Duration")
{
	event
	{
		Ongoing - Each Player;
		All;
		Mei;
	}

	conditions
	{
		Is Using Ability 1(Event Player) == True;
	}

	actions
	{
		Wait(3, Abort When False);
		Press Button(Event Player, Primary Fire);
	}
}

rule("[Mei] IceWallHealthChecks")
{
	event
	{
		Subroutine;
		HEROMeiIceWallStats;
	}

	actions
	{
		If(Event Player.HEROMeiIceWall == True);
			Event Player.IsStatsChanged = True;
			"Make max hp of ice wall 250 from 560"
			Set Max Health(Event Player, 250 / 560 * 100);
			"Divide effective HP vs actual max hp so Mei doesnt take more damage than usual"
			Set Damage Received(Event Player, 156 / 350 * 100);
			"Divide effective HP vs actual max hp so Mei doesnt take more healing than usual"
			Set Healing Received(Event Player, 156 / 350 * 100);
		Else;
			"Reset All"
			Set Max Health(Event Player, 100);
			"Divide effective HP vs actual max hp so Mei doesnt take more damage than usual"
			Set Damage Received(Event Player, 100);
			"Divide effective HP vs actual max hp so Mei doesnt take more healing than usual"
			Set Healing Received(Event Player, 100);
	}
}
