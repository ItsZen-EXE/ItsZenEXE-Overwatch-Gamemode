variables
{
	global:
		0: DebugEnabled
		1: DmgTestBotSpawnerPos
		2: HostCheatsEnabled
		3: StatusTestBotSpawnerPos
		4: RulerEnabled

	player:
		0: HudText
		1: IsUsingAbility
		2: AbilityVariables
		3: AbilityVariableThruDeath
		4: AbilityEffects
		5: AbilityVariableChase_I
		6: AbilityVariableChase_II
		7: IsStatsChanged
		8: FastCooldownsToggle
		9: LoopForCounter
		10: PlayerInfoPrompt
		11: PlayerInfoArray
		12: RulerPointer
		13: RulerMode
		14: RulerState
		15: RulerPos1
		16: RulerPos2
		17: RulerPos3
		18: RulerAngle
		19: ThirdPerson
}

subroutines
{
	0: SpawnStatsReset
	1: EffectHandler
	2: HUDHandler
	4: PerHeroStatChanges
}

disabled rule("Toggle Third Person")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Melee)) == True;
	}

	actions
	{
		Event Player.ThirdPerson = !Event Player.ThirdPerson;
		If(Event Player.ThirdPerson);
			Start Camera(Event Player, Update Every Frame(Eye Position(Event Player) - Facing Direction Of(Event Player) * 3),
				Update Every Frame(Eye Position(Event Player)), 0);
		Else;
			Stop Camera(Event Player);
		End;
	}
}

rule("========================[] Debug")
{
	event
	{
		Ongoing - Global;
	}
}

rule("[Enable Debug On Workshop Maps & Check for if Debug needs Disabled due to number of players]")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		"Workshop Maps Required for Debug (Chamber, Expanse, or Island) "
		(Current Map == Map(Workshop Chamber) || Current Map == Map(Workshop Expanse) || Current Map == Map(Workshop Island)
			|| Current Map == Map(Workshop Expanse Night) || Current Map == Map(Workshop Island Night)) == True;
		Workshop Setting Toggle(Custom String("Debug"), Custom String("Debug Enabled"), False, -1) == True;
	}

	actions
	{
		Wait Until(Has Spawned(Host Player), 99999);
		Global.DebugEnabled = True;
		Big Message(All Players(All Teams), Custom String("DEBUG IS ON YO"));
	}
}

rule("[Toggleable Options and More] (most require debug scripts added)")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		If(Workshop Setting Toggle(Custom String("DEBUG OPTIONS"), Custom String("Disable Inspector"), True, 1) == True);
			Disable Inspector Recording;
		End;
		"Enable Host Cheats"
		Global.HostCheatsEnabled = Workshop Setting Toggle(Custom String("DEBUG OPTIONS"), Custom String("Enable Host Cheats"), False, 2);
		"Enable Ruler"
		Global.RulerEnabled = Workshop Setting Toggle(Custom String("DEBUG OPTIONS"), Custom String("Enable Ruler"), False, 3);
	}
}

rule("[Debug] Knockback/Damage bots position (B)")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		disabled Global.DebugEnabled == True;
	}

	actions
	{
		Global.DmgTestBotSpawnerPos[0] = Vector(-15.957, 0, -15.981);
		Create Effect(All Players(All Teams), Sphere, Color(Blue), Global.DmgTestBotSpawnerPos[0], 1, Visible To Position and Radius);
		Create In-World Text(All Players(All Teams), Custom String("Spawn Damage Testing Heroes {0} {1}", Hero Icon String(Hero(McCree)),
			Hero Icon String(Hero(Roadhog))), Global.DmgTestBotSpawnerPos[0] + Up, 1, Clip Against Surfaces,
			Visible To Position and String, Color(Red), Visible Always);
	}
}

rule("[Debug] Spawn Damage Bots")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		disabled Global.DebugEnabled == True;
		Is True For Any(Global.DmgTestBotSpawnerPos, Distance Between(Host Player, Current Array Element) <= 1.200) == True;
		Is Button Held(Host Player, Button(Interact)) == True;
	}

	actions
	{
		Stop Facing(All Players(All Teams));
		Play Effect(All Players(All Teams), Buff Explosion Sound, Color(White), All Players(All Teams), 100);
		Destroy All Dummy Bots;
		Wait(0.250, Ignore Condition);
		Create Dummy Bot(Hero(Soldier: 76), All Teams, 1, Vector(-17.568, 2, -11.259), Null);
		Start Facing(Players In Slot(1, All Teams), Direction Towards(Eye Position(Players In Slot(1, All Teams)), Host Player + Vector(0,
			0.400, 0)), 100, To World, Direction and Turn Rate);
		Create Dummy Bot(Hero(Roadhog), All Teams, 2, Vector(-11.766, 2, -18.699), Null);
		Start Facing(Players In Slot(2, All Teams), Direction Towards(Eye Position(Players In Slot(2, All Teams)), Host Player + Vector(0,
			0.400, 0)), 100, To World, Direction and Turn Rate);
		Wait(0.250, Ignore Condition);
		Create Dummy Bot(Hero(Reinhardt), All Teams, 3, Vector(-17.769, 2, -4.997), Null);
		Start Facing(Players In Slot(3, All Teams), Direction Towards(Eye Position(Players In Slot(3, All Teams)), Host Player + Vector(0,
			0.400, 0)), 100, To World, Direction and Turn Rate);
		Create Dummy Bot(Hero(Genji), All Teams, 4, Vector(-4.003, 2, -17.763), Null);
		Start Facing(Players In Slot(4, All Teams), Direction Towards(Eye Position(Players In Slot(4, All Teams)), Host Player + Vector(0,
			0.400, 0)), 100, To World, Direction and Turn Rate);
	}
}

rule("[Debug] Spawn Status/Ability Test Position (D)")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		disabled Global.DebugEnabled == True;
	}

	actions
	{
		Global.StatusTestBotSpawnerPos[0] = Vector(0, 0, 0);
		Create Effect(All Players(All Teams), Ring, Color(Sky Blue), Global.StatusTestBotSpawnerPos[0], 1, Visible To Position and Radius);
		Create In-World Text(All Players(All Teams), Custom String("Spawn Testing Bot"), Global.StatusTestBotSpawnerPos[0] + Up, 1,
			Clip Against Surfaces, Visible To Position and String, Color(Red), Visible Always);
	}
}

rule("[Debug] Spawn Status/Ability Test Bot")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		disabled Global.DebugEnabled == True;
		Is True For Any(Global.StatusTestBotSpawnerPos, Distance Between(Host Player, Current Array Element) <= 1.200) == True;
		Is Button Held(Host Player, Button(Interact)) == True;
	}

	actions
	{
		Stop Facing(All Players(All Teams));
		Play Effect(All Players(All Teams), Buff Explosion Sound, Color(White), All Players(All Teams), 100);
		Destroy All Dummy Bots;
		Wait(0.250, Ignore Condition);
		Create Dummy Bot(Hero(Widowmaker), All Teams, 1, Vector(17.043, 1.424, -0.038), Direction Towards(Eye Position(Players In Slot(1,
			All Teams)), Vector(-95.785, 33.918, 73.376)));
		Start Facing(Players In Slot(1, All Teams), Direction Towards(Eye Position(Players In Slot(1, All Teams)), Eye Position(
			Host Player)), 100, To World, Direction and Turn Rate);
		Wait(2, Ignore Condition);
		Set Ultimate Charge(All Players(All Teams), 100);
		Start Holding Button(Players In Slot(1, All Teams), Button(Ultimate));
		Create HUD Text(Host Player, Custom String("{0} / {1} HP", Health(Players In Slot(1, All Teams)), Max Health(Players In Slot(1,
			All Teams))), Null, Null, Top, 50, Color(White), Color(White), Color(White), Visible To and String, Default Visibility);
	}
}

rule("[Ruler] HUD text")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Global.RulerEnabled == True;
	}

	actions
	{
		Create HUD Text(Filtered Array(Event Player, Event Player.RulerMode == True), Null, Null, Custom String(
			"Interact = Enable/Disable Ruler Mode"), Left, -1, Color(White), Color(White), Color(White), Visible To and String,
			Default Visibility);
		"p1"
		Create HUD Text(Filtered Array(Event Player, Event Player.RulerMode == True), Event Player.RulerPos1, Custom String(
			"Primary Fire"), Custom String("p1"), Left, 1, Color(Orange), Color(Orange), Color(Orange), Visible To and String,
			Default Visibility);
		"p2"
		Create HUD Text(Filtered Array(Event Player, Event Player.RulerMode == True), Event Player.RulerPos2, Custom String(
			"Primary fire"), Custom String("p2"), Left, 2, Color(Aqua), Color(Aqua), Color(Aqua), Visible To and String,
			Default Visibility);
		"p3"
		Create HUD Text(Filtered Array(Event Player, Event Player.RulerMode == True), Event Player.RulerPos3, Custom String(
			"Secondary Fire"), Custom String("p3"), Left, 3, Color(Green), Color(Green), Color(Green), Visible To and String,
			Default Visibility);
		Create HUD Text(Filtered Array(Event Player, Event Player.RulerMode == True), Null, Custom String("Reload = p3 == p1 UP"), Null,
			Left, 4, Color(Green), Color(Green), Color(Green), Visible To and String, Default Visibility);
		Create HUD Text(Filtered Array(Event Player, Event Player.RulerMode == True), Null, Custom String(
			"Reload + Crouch = p3 == p1 DOWN"), Null, Left, 5, Color(Green), Color(Green), Color(Green), Visible To and String,
			Default Visibility);
		Create HUD Text(Filtered Array(Event Player, Event Player.RulerMode == True), Null, Custom String(
			"Melee = p3 on opposite wall of p1 & p2"), Null, Left, 6, Color(Green), Color(Green), Color(Green), Visible To and String,
			Default Visibility);
		"Dist"
		Create HUD Text(Filtered Array(Event Player, Event Player.RulerMode == True), Distance Between(Event Player.RulerPos1,
			Event Player.RulerPos2), Custom String("distance from"), Custom String("p1 to p2"), Top, 1, Color(White), Color(White), Color(
			White), Visible To and String, Default Visibility);
		Create HUD Text(Filtered Array(Event Player, Event Player.RulerMode == True), Distance Between(Event Player.RulerPos1,
			Event Player.RulerPos3), Custom String("distance from"), Custom String("p1 to p3"), Top, 2, Color(White), Color(White), Color(
			White), Visible To and String, Default Visibility);
		"angle"
		Create HUD Text(Filtered Array(Event Player, Event Player.RulerMode == True), Event Player.RulerAngle, Null, Custom String(
			"Angle"), Right, 0, Color(Orange), Color(White), Color(Orange), Visible To and String, Default Visibility);
		Create HUD Text(Filtered Array(Event Player, Event Player.RulerMode == True), Null, Custom String("Ability 1 = horizontal angle"),
			Null, Right, 1, Color(Orange), Color(Orange), Color(Orange), Visible To and String, Default Visibility);
		Create HUD Text(Filtered Array(Event Player, Event Player.RulerMode == True), Null, Custom String("Ability 2 = vertical angle"),
			Null, Right, 2, Color(Orange), Color(Orange), Color(Orange), Visible To and String, Default Visibility);
		Create HUD Text(Filtered Array(Event Player, Event Player.RulerMode == True), Null, Custom String("Ult = Set p2Y & p3Y == p1Y "),
			Null, Right, 3, Color(White), Color(White), Color(White), Visible To and String, Default Visibility);
	}
}

rule("[Ruler] Enable Ruler Mode")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.RulerMode == 0;
		Global.RulerEnabled == True;
	}

	actions
	{
		Wait(0.250, Ignore Condition);
		Loop If Condition Is True;
		Event Player.RulerMode = 1;
		Disallow Button(Event Player, Button(Primary Fire));
		Disallow Button(Event Player, Button(Secondary Fire));
		Disallow Button(Event Player, Button(Ability 1));
		Disallow Button(Event Player, Button(Ability 2));
		Disallow Button(Event Player, Button(Ultimate));
		Disallow Button(Event Player, Button(Melee));
	}
}

rule("[Ruler] Disable Ruler Mode")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.RulerMode == 1;
	}

	actions
	{
		Wait(0.250, Ignore Condition);
		Loop If Condition Is True;
		Event Player.RulerMode = 0;
		Allow Button(Event Player, Button(Primary Fire));
		Allow Button(Event Player, Button(Secondary Fire));
		Allow Button(Event Player, Button(Ability 1));
		Allow Button(Event Player, Button(Ability 2));
		Allow Button(Event Player, Button(Ultimate));
		Allow Button(Event Player, Button(Melee));
	}
}

rule("[Ruler] Turn Ruler On")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.RulerMode == 1;
		Is Button Held(Event Player, Button(Primary Fire)) == True;
		Event Player.RulerState == 0;
	}

	actions
	{
		Wait(0.250, Ignore Condition);
		Loop If Condition Is True;
		Event Player.RulerState = 1;
		Create Beam Effect(Filtered Array(Event Player, Event Player.RulerMode == True), Grapple Beam, Eye Position(Event Player) + Vector(
			Sine From Degrees(-90 + Horizontal Facing Angle Of(Event Player)), 0.500, Cosine From Degrees(-90 + Horizontal Facing Angle Of(
			Event Player))), Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player) + Facing Direction Of(
			Event Player) * 1000, All Players(All Teams), Event Player, True), Color(White), Visible To Position and Radius);
		Event Player.RulerPointer[0] = Last Created Entity;
		Create Effect(Filtered Array(All Players(All Teams), Event Player.RulerMode == True), Sphere, Color(White), Ray Cast Hit Position(
			Eye Position(Event Player), Eye Position(Event Player) + Facing Direction Of(Event Player) * 1000, All Players(All Teams),
			Event Player, True), 0.200, Visible To Position and Radius);
		Event Player.RulerPointer[1] = Last Created Entity;
	}
}

rule("[Ruler] Place p1")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.RulerMode == 1;
		Is Button Held(Event Player, Button(Primary Fire)) == True;
		Event Player.RulerState == 1;
	}

	actions
	{
		Wait(0.250, Ignore Condition);
		Loop If Condition Is True;
		Event Player.RulerPos1[0] = Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player) + Facing Direction Of(
			Event Player) * 1000, All Players(All Teams), Event Player, True);
		Event Player.RulerState = 2;
		Create Effect(Event Player, Orb, Color(Orange), Event Player.RulerPos1, 1, Visible To Position and Radius);
		Event Player.RulerPos1[2] = Last Created Entity;
	}
}

rule("[Ruler] Place p2")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.RulerMode == 1;
		Is Button Held(Event Player, Button(Primary Fire)) == True;
		Event Player.RulerState == 2;
	}

	actions
	{
		Wait(0.250, Ignore Condition);
		Loop If Condition Is True;
		Event Player.RulerPos2[0] = Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player) + Facing Direction Of(
			Event Player) * 1000, All Players(All Teams), Event Player, True);
		Event Player.RulerState = 3;
		Create Effect(Event Player, Orb, Color(Aqua), Event Player.RulerPos2, 1, Visible To Position and Radius);
		Event Player.RulerPos2[1] = Last Created Entity;
		Create Beam Effect(All Players(All Teams), Good Beam, Event Player.RulerPos1, Event Player.RulerPos2, Color(Aqua),
			Visible To Position and Radius);
		Event Player.RulerPos2[2] = Last Created Entity;
	}
}

rule("[Ruler] Destroy Ruler")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.RulerMode == 1;
		Is Button Held(Event Player, Button(Primary Fire)) == True;
		Event Player.RulerState == 3;
	}

	actions
	{
		Wait(0.250, Ignore Condition);
		Loop If Condition Is True;
		Destroy Effect(Event Player.RulerPos1[2]);
		Destroy Effect(Event Player.RulerPos2[1]);
		Destroy Effect(Event Player.RulerPos2[2]);
		Destroy Effect(Event Player.RulerPos3[1]);
		Destroy Effect(Event Player.RulerPos3[2]);
		Destroy Effect(Event Player.RulerPointer[0]);
		Destroy Effect(Event Player.RulerPointer[1]);
		Wait(0.016, Ignore Condition);
		Event Player.RulerState = 0;
		Event Player.RulerPos1 = Null;
		Event Player.RulerPos2 = Null;
		Event Player.RulerPos3 = Null;
		Event Player.RulerAngle = 0;
	}
}

rule("[Ruler] Set Y of p2 & p3 to Y of P1")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.RulerMode == 1;
		Is Button Held(Event Player, Button(Ultimate)) == True;
		Event Player.RulerState == 3;
	}

	actions
	{
		Wait(0.250, Ignore Condition);
		Loop If Condition Is True;
		Event Player.RulerPos2[0] = Vector(X Component Of(Event Player.RulerPos2), Y Component Of(Event Player.RulerPos1), Z Component Of(
			Event Player.RulerPos2));
		Event Player.RulerPos3[0] = Vector(X Component Of(Event Player.RulerPos3), Y Component Of(Event Player.RulerPos1), Z Component Of(
			Event Player.RulerPos3));
	}
}

rule("[Ruler] Place p3")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.RulerMode == 1;
		Is Button Held(Event Player, Button(Secondary Fire)) == True;
		Event Player.RulerState == 3;
	}

	actions
	{
		Wait(0.250, Ignore Condition);
		Loop If Condition Is True;
		Skip If(Event Player.RulerPos3 != Null, 4);
		Create Effect(Event Player, Orb, Color(Green), Event Player.RulerPos3, 1, Visible To Position and Radius);
		Event Player.RulerPos3[1] = Last Created Entity;
		Create Beam Effect(All Players(All Teams), Good Beam, Event Player.RulerPos1, Event Player.RulerPos3, Color(Green),
			Visible To Position and Radius);
		Event Player.RulerPos3[2] = Last Created Entity;
		Event Player.RulerPos3[0] = Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player) + Facing Direction Of(
			Event Player) * 1000, All Players(All Teams), Event Player, True);
	}
}

rule("[Ruler] Measure Angles Between p1 & p2")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.RulerMode == 1;
		Is Button Held(Event Player, Button(Ability 1)) == True;
		Event Player.RulerState == 3;
		Event Player.RulerPos3 != 0;
	}

	actions
	{
		Event Player.RulerAngle = Vertical Angle From Direction(Direction Towards(Event Player.RulerPos1, Event Player.RulerPos2))
			- Vertical Angle From Direction(Direction Towards(Event Player.RulerPos1, Event Player.RulerPos3));
	}
}

rule("[Ruler] Measure Angles (part 2)")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.RulerAngle < -0.001;
	}

	actions
	{
		Event Player.RulerAngle = Event Player.RulerAngle * -1;
	}
}

rule("[Ruler] Measure Angles Between p1 & p3")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.RulerMode == 1;
		Is Button Held(Event Player, Button(Ability 2)) == True;
		Event Player.RulerState == 3;
		Event Player.RulerPos3 != 0;
	}

	actions
	{
		Event Player.RulerAngle = Horizontal Angle From Direction(Direction Towards(Event Player.RulerPos1, Event Player.RulerPos2))
			- Horizontal Angle From Direction(Direction Towards(Event Player.RulerPos1, Event Player.RulerPos3));
	}
}

rule("[Ruler] Place p3 on opposite wall of p1 and p2")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.RulerMode == 1;
		Is Button Held(Event Player, Button(Melee)) == True;
		Event Player.RulerState == 3;
		Event Player.RulerPos3 != Null;
	}

	actions
	{
		Wait(0.250, Ignore Condition);
		Loop If Condition Is True;
		Event Player.RulerPos3[0] = Ray Cast Hit Position(Event Player.RulerPos1, Event Player.RulerPos1 + Direction From Angles(
			-90 + Horizontal Angle From Direction(Direction Towards(Event Player.RulerPos1, Event Player.RulerPos2)), 0) * 1000,
			All Players(All Teams), Event Player, True);
		disabled Create Effect(Event Player, Orb, Color(Green), Event Player.RulerPos3, 1, Visible To Position and Radius);
		disabled Create Beam Effect(All Players(All Teams), Good Beam, Event Player.RulerPos1, Event Player.RulerPos3, Color(Green),
			Visible To Position and Radius);
	}
}

rule("[Ruler] Place p3 on floor below p1")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.RulerMode == 1;
		Is Button Held(Event Player, Button(Reload)) == True;
		Event Player.RulerState == 3;
		Is Crouching(Event Player) == True;
		Event Player.RulerPos3 != Null;
	}

	actions
	{
		Wait(0.250, Ignore Condition);
		Loop If Condition Is True;
		disabled Create Effect(Event Player, Orb, Color(Green), Event Player.RulerPos3, 1, Visible To Position and Radius);
		disabled Create Beam Effect(All Players(All Teams), Good Beam, Event Player.RulerPos1, Event Player.RulerPos3, Color(Green),
			Visible To Position and Radius);
		Event Player.RulerPos3[0] = Ray Cast Hit Position(Event Player.RulerPos1, Event Player.RulerPos1 + Direction From Angles(0, 90)
			* 1000, All Players(All Teams), Event Player, True);
	}
}

rule("[Ruler] Place p3 on ceiling above p1")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.RulerMode == 1;
		Is Button Held(Event Player, Button(Reload)) == True;
		Event Player.RulerState == 3;
		Is Crouching(Event Player) == False;
		Event Player.RulerPos3 != Null;
	}

	actions
	{
		Wait(0.250, Ignore Condition);
		Loop If Condition Is True;
		disabled Create Effect(Event Player, Orb, Color(Green), Event Player.RulerPos3, 1, Visible To Position and Radius);
		disabled Create Beam Effect(All Players(All Teams), Good Beam, Event Player.RulerPos1, Event Player.RulerPos3, Color(Green),
			Visible To Position and Radius);
		Event Player.RulerPos3[0] = Ray Cast Hit Position(Event Player.RulerPos1, Event Player.RulerPos1 + Direction From Angles(0, -90)
			* 1000, All Players(All Teams), Event Player, True);
	}
}

rule("[ShortCooldowns] Enable/Disable using ult charge saying")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Communicating(Event Player, Ultimate Status) == True;
		Workshop Setting Toggle(Custom String("DEBUG OPTIONS"), Custom String("Enable Short Cooldowns"), False, 4) == True;
	}

	actions
	{
		If(Is In Spawn Room(Event Player));
			Small Message(Event Player, Custom String("Unable to enable short cooldowns (In Spawn)"));
		Else;
			If(Event Player.FastCooldownsToggle == False);
				Small Message(Event Player, Custom String("Short-Cooldowns Enabled (wait 4s to disable)"));
				Event Player.FastCooldownsToggle = True;
			Else;
				Event Player.FastCooldownsToggle = False;
				Small Message(Event Player, Custom String("Short-Cooldowns Disabled (wait 4s to enable)"));
	}
}

rule("[ShortCooldowns] secondary fire")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Ability Cooldown(Event Player, Button(Secondary Fire)) > 1.500;
		Event Player.FastCooldownsToggle == True;
	}

	actions
	{
		Set Ability Cooldown(Event Player, Button(Secondary Fire), 1);
		Wait(0.016, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("[ShortCooldowns] ability 1")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Ability Cooldown(Event Player, Button(Ability 1)) > 1.500;
		Event Player.FastCooldownsToggle == True;
	}

	actions
	{
		Set Ability Cooldown(Event Player, Button(Ability 1), 1);
		Wait(0.016, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("[ShortCooldowns] ability 2")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Ability Cooldown(Event Player, Button(Ability 2)) > 1.500;
		Event Player.FastCooldownsToggle == True;
	}

	actions
	{
		Set Ability Cooldown(Event Player, Button(Ability 2), 1);
		Wait(0.016, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("[ShortCooldowns] ult")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Ultimate Charge Percent(Event Player) != 100;
		Event Player.FastCooldownsToggle == True;
	}

	actions
	{
		Abort If Condition Is False;
		While(Is Using Ultimate(Event Player) == True);
			Wait(0.250, Ignore Condition);
		Else;
		End;
		Wait(1, Ignore Condition);
		Abort If Condition Is False;
		Set Ultimate Charge(Event Player, 100);
	}
}

rule("[ShortCooldowns] crouch")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Ability Cooldown(Event Player, Button(Crouch)) > 1.500;
		Event Player.FastCooldownsToggle == True;
	}

	actions
	{
		Set Ability Cooldown(Event Player, Button(Crouch), 1);
		Wait(0.016, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("[ShortCooldowns] Jump")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Ability Cooldown(Event Player, Button(Jump)) > 1.500;
		Event Player.FastCooldownsToggle == True;
	}

	actions
	{
		Set Ability Cooldown(Event Player, Button(Jump), 1);
		Wait(0.016, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("[Debug] HUD Per Player")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Workshop Setting Toggle(Custom String("DEBUG OPTIONS"), Custom String("Enable Debug HUD"), False, 5) == True;
	}

	actions
	{
		Create HUD Text(Event Player, Null, Custom String("Primary: {0}", Is Firing Primary(Event Player)), Null, Top, 10, Color(White),
			Color(White), Color(White), Visible To and String, Default Visibility);
		Create HUD Text(Event Player, Null, Custom String("Secondary: {0}", Is Firing Secondary(Event Player)), Null, Top, 10, Color(
			White), Color(White), Color(White), Visible To and String, Default Visibility);
		Create HUD Text(Event Player, Null, Custom String("1: {0}", Is Using Ability 1(Event Player)), Null, Top, 10, Color(White), Color(
			White), Color(White), Visible To and String, Default Visibility);
		Create HUD Text(Event Player, Null, Custom String("2: {0}", Is Using Ability 2(Event Player)), Null, Top, 10, Color(White), Color(
			White), Color(White), Visible To and String, Default Visibility);
		Create HUD Text(Event Player, Null, Custom String("ult: {0}", Is Using Ultimate(Event Player)), Null, Top, 10, Color(White), Color(
			White), Color(White), Visible To and String, Default Visibility);
		Create HUD Text(Event Player, Null, Custom String("Melee: {0}", Is Meleeing(Event Player)), Null, Top, 10, Color(White), Color(
			White), Color(White), Visible To and String, Default Visibility);
		Create HUD Text(Event Player, Null, Custom String("Reload: {0}", Is Button Held(Event Player, Button(Reload))), Null, Top, 10,
			Color(White), Color(White), Color(White), Visible To and String, Default Visibility);
		Create HUD Text(Host Player, Custom String("altitude: {0}", Altitude Of(Event Player)), Null, Null, Top, -10, Color(White), Color(
			White), Color(White), Visible To and String, Default Visibility);
		Create HUD Text(Event Player, Null, Custom String("Variable: {0}", Event Player.AbilityVariables), Null, Top, 10, Color(White),
			Color(White), Color(White), Visible To and String, Default Visibility);
	}
}

rule("[Debug] HUD")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Workshop Setting Toggle(Custom String("DEBUG OPTIONS"), Custom String("Enable Server Load Text"), False, 6) == True;
	}

	actions
	{
		Create HUD Text(Host Player, Custom String("Peak: {0}", Server Load Peak), Custom String("Average: {0}", Server Load Average),
			Custom String("Current: {0}", Server Load), Top, -30, Color(White), Color(White), Color(White), Visible To and String,
			Default Visibility);
		Create HUD Text(All Players(All Teams), Custom String("Throttle:{0} Velocity: {1} Speed of in Dir: {2}", Throttle Of(Event Player),
			Velocity Of(Event Player), Speed Of In Direction(Event Player, Vector(0, 0, 0))), Null, Null, Left, 0, Color(White), Color(
			White), Color(White), Visible To and String, Default Visibility);
	}
}

rule("[Debug] Hello = Death")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Communicating(Event Player, Hello) == True;
		Event Player == Host Player;
		Global.HostCheatsEnabled == True;
	}

	actions
	{
		Kill(Event Player, Event Player);
	}
}

rule("[Debug] Thanks = Healing")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Communicating(Event Player, Thanks) == True;
		Event Player == Host Player;
		Global.HostCheatsEnabled == True;
	}

	actions
	{
		Start Heal Over Time(Event Player, Event Player, 5, 20);
		Play Effect(Players Within Radius(Event Player, 0.200, All Teams, Surfaces), Buff Explosion Sound, Color(White),
			Players Within Radius(Event Player, 0.200, All Teams, Surfaces), 200);
	}
}

rule("[Debug] Need Healing = Damage Over Time")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Communicating(Event Player, Need Healing) == True;
		Event Player == Host Player;
		Global.HostCheatsEnabled == True;
	}

	actions
	{
		Play Effect(Players Within Radius(Event Player, 0.200, All Teams, Surfaces), Debuff Impact Sound, Color(White),
			Players Within Radius(Event Player, 0.200, All Teams, Surfaces), 200);
		Damage(Event Player, Null, Health(Event Player) - 10);
	}
}

rule("Tutorial: Initial Prompt")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
		Is Alive(Event Player) == True;
		Is Button Held(Event Player, Button(Interact)) == False;
	}

	actions
	{
		Enable Kill Feed(Event Player);
		Enable Game Mode HUD(Event Player);
		Destroy HUD Text(Event Player.PlayerInfoPrompt);
		Create HUD Text(Event Player, Null, Null, Custom String("Hold \"Interact\" to view gamemode and hero changes"), Top, -1, Color(
			Green), Color(Blue), Color(Orange), Visible To, Default Visibility);
		Event Player.PlayerInfoPrompt = Last Text ID;
		For Player Variable(Event Player, LoopForCounter, 0, Count Of(Event Player.PlayerInfoArray), 1);
			Destroy HUD Text(Event Player.PlayerInfoArray[Event Player.LoopForCounter]);
		End;
		Event Player.PlayerInfoArray = Empty Array;
	}
}

rule("Tutorial: Ult Warning")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Interact)) == True;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Disable Kill Feed(Event Player);
		Disable Game Mode HUD(Event Player);
		Destroy HUD Text(Event Player.PlayerInfoPrompt);
		Create HUD Text(Event Player, Null, Null, Custom String("Ult charge is reset upon death"), Left, 1, Color(White), Color(White),
			Color(Orange), Visible To, Default Visibility);
		Event Player.PlayerInfoArray[0] = Last Text ID;
	}
}

rule("Tutorial: Crouch")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Hero Of(Event Player) != Hero(Wrecking Ball);
		Is Button Held(Event Player, Button(Interact)) == True;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Create HUD Text(Event Player, Null, Null, Custom String("Knockback is resisted while Crouching."), Left, 2, Color(White), Color(
			White), Color(Lime Green), Visible To, Default Visibility);
		Event Player.PlayerInfoArray[2] = Last Text ID;
	}
}

rule("Tutorial: Hero Name/Icon")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Interact)) == True;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Create HUD Text(Event Player, Custom String("{0}{1}", Hero Icon String(Hero Of(Event Player)), Hero Of(Event Player)), Null, Null,
			Right, 4, Color(Sky Blue), Color(White), Color(Yellow), Visible To, Default Visibility);
		Event Player.PlayerInfoArray[3] = Last Text ID;
	}
}

rule("Tutorial: Ana")
{
	event
	{
		Ongoing - Each Player;
		All;
		Ana;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Interact)) == True;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Create HUD Text(Event Player, Null, Null, Custom String("{0} provides a large jump if thrown directly downwards while jumping",
			Ability Icon String(Hero(Ana), Button(Ability 2))), Right, 6, Color(White), Color(White), Color(Green), Visible To and String,
			Default Visibility);
		Event Player.PlayerInfoArray[4] = Last Text ID;
		Create HUD Text(Event Player, Null, Null, Custom String("{0} Scoped shots provide a small self-heal", Ability Icon String(Hero(
			Ana), Button(Primary Fire))), Right, 7, Color(White), Color(White), Color(Yellow), Visible To and String, Default Visibility);
		Event Player.PlayerInfoArray[5] = Last Text ID;
	}
}

rule("Tutorial: Ashe")
{
	event
	{
		Ongoing - Each Player;
		All;
		Ashe;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Interact)) == True;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Create HUD Text(Event Player, Null, Null, Custom String("You can use {0} twice!", Ability Icon String(Hero(Ashe), Button(
			Ability 1))), Right, 6, Color(White), Color(White), Color(White), Visible To and String, Default Visibility);
		Event Player.PlayerInfoArray[4] = Last Text ID;
		Create HUD Text(Event Player, Null, Null, Custom String("Cooldown starts automatically if second shot is not used"), Right, 7,
			Color(White), Color(White), Color(Red), Visible To and String, Default Visibility);
		Event Player.PlayerInfoArray[5] = Last Text ID;
	}
}

rule("Tutorial: Baptiste")
{
	event
	{
		Ongoing - Each Player;
		All;
		Baptiste;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Interact)) == True;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Create HUD Text(Event Player, Custom String("{0} : Window Of Opportunity...", Ability Icon String(Hero(Baptiste), Button(
			Secondary Fire))), Null, Null, Right, 6, Color(Sky Blue), Color(White), Color(White), Visible To and String,
			Default Visibility);
		Event Player.PlayerInfoArray[4] = Last Text ID;
		Create HUD Text(Event Player, Null, Null, Custom String(
			"{0} provides a matrix that triples your healing recieved, but shares a cooldown with {1}", Ability Icon String(Hero(Baptiste),
			Button(Secondary Fire)), Ability Icon String(Hero(Baptiste), Button(Ability 2))), Right, 7, Color(White), Color(White), Color(
			White), Visible To and String, Default Visibility);
		Event Player.PlayerInfoArray[5] = Last Text ID;
	}
}

rule("Tutorial: Bastion")
{
	event
	{
		Ongoing - Each Player;
		All;
		Bastion;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Interact)) == True;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Create HUD Text(Event Player, Null, Null, Custom String("{0} has limited ammo that regenerates outside of {0} form",
			Ability Icon String(Hero(Bastion), Button(Primary Fire))), Right, 6, Color(White), Color(White), Color(White),
			Visible To and String, Default Visibility);
		Event Player.PlayerInfoArray[4] = Last Text ID;
		Create HUD Text(Event Player, Null, Null, Custom String("You can only {0} after a set time based on how much ammo was used",
			Ability Icon String(Hero(Bastion), Button(Ability 1))), Right, 7, Color(White), Color(White), Color(Red),
			Visible To and String, Default Visibility);
		Event Player.PlayerInfoArray[5] = Last Text ID;
	}
}

rule("Tutorial: Brigitte")
{
	event
	{
		Ongoing - Each Player;
		All;
		Brigitte;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Interact)) == True;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Create HUD Text(Event Player, Null, Null, Custom String("{0} Repair pack is replaced with/represents new passive",
			Ability Icon String(Hero(Brigitte), Button(Ability 2))), Right, 5, Color(White), Color(White), Color(Green),
			Visible To and String, Default Visibility);
		Event Player.PlayerInfoArray[4] = Last Text ID;
		Create HUD Text(Event Player, Null, Null, Custom String("{0} activates on 3+ consecutive hits with {1}, providing a large heal",
			Ability Icon String(Hero(Brigitte), Button(Ability 2)), Ability Icon String(Hero(Brigitte), Button(Primary Fire))), Right, 6,
			Color(White), Color(White), Color(Yellow), Visible To and String, Default Visibility);
		Event Player.PlayerInfoArray[5] = Last Text ID;
		Create HUD Text(Event Player, Null, Null, Custom String(
			"{0} Additional consecutive hits at full health provide armor \"overheal\"", Ability Icon String(Hero(Brigitte), Button(
			Ability 2))), Right, 7, Color(White), Color(White), Color(Orange), Visible To and String, Default Visibility);
		Event Player.PlayerInfoArray[6] = Last Text ID;
	}
}

rule("Tutorial: Lucio")
{
	event
	{
		Ongoing - Each Player;
		All;
		Lúcio;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Interact)) == True;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Create HUD Text(Event Player, Null, Null, Custom String("Heal song has been replaced with Damage Boost song"), Right, 5, Color(
			White), Color(White), Color(White), Visible To and String, Default Visibility);
		Event Player.PlayerInfoArray[4] = Last Text ID;
		Create HUD Text(Event Player, Null, Null, Custom String("Landing knocks all enemies within your song radius upwards"), Right, 6,
			Color(White), Color(White), Color(White), Visible To and String, Default Visibility);
		Event Player.PlayerInfoArray[5] = Last Text ID;
	}
}

rule("Tutorial: Pharah")
{
	event
	{
		Ongoing - Each Player;
		All;
		Pharah;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Interact)) == True;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Create HUD Text(Event Player, Null, Null, Custom String("Pressing Crouch while using {0} blasts you forwards", Ability Icon String(
			Hero(Pharah), Button(Ability 1))), Right, 6, Color(White), Color(White), Color(White), Visible To and String,
			Default Visibility);
		Event Player.PlayerInfoArray[4] = Last Text ID;
	}
}

rule("Tutorial: Zarya")
{
	event
	{
		Ongoing - Each Player;
		All;
		Zarya;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Interact)) == True;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Create HUD Text(Event Player, Null, Null, Custom String("This hero can climb ledges. Face a ledge and hold Jump and Forward. "),
			Right, 5, Color(Sky Blue), Color(White), Color(White), Visible To, Default Visibility);
		Event Player.PlayerInfoArray[4] = Last Text ID;
		Create HUD Text(Event Player, Null, Null, Custom String("Converts Zarya's shields into ammo (2:1 ratio)"), Right, 6, Color(White),
			Color(White), Color(White), Visible To and String, Default Visibility);
		Event Player.PlayerInfoArray[5] = Last Text ID;
		Create HUD Text(Event Player, Null, Null, Custom String("Ammo above Max Ammo goes away after a visible timer"), Right, 7, Color(
			White), Color(White), Color(Red), Visible To and String, Default Visibility);
		Event Player.PlayerInfoArray[6] = Last Text ID;
		Create HUD Text(Event Player, Null, Null, Custom String("Cooldown starts after Ammo returns to under Max Ammo"), Right, 8, Color(
			White), Color(White), Color(Red), Visible To and String, Default Visibility);
		Event Player.PlayerInfoArray[7] = Last Text ID;
	}
}

rule("Tutorial: Soldier:76")
{
	event
	{
		Ongoing - Each Player;
		All;
		Soldier: 76;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Interact)) == True;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Create HUD Text(Event Player, Null, Null, Custom String("Your health will slowly regenerate over time"), Right, 6, Color(White),
			Color(White), Color(Sky Blue), Visible To and String, Default Visibility);
		Event Player.PlayerInfoArray[4] = Last Text ID;
		Create HUD Text(Event Player, Null, Null, Custom String(" [{1}] {0} Place a beacon that shows the last damaged enemy's location",
			Ability Icon String(Hero(Soldier: 76), Button(Ability 2)), Input Binding String(Button(Ability 2))), Right, 7, Color(White),
			Color(White), Color(Yellow), Visible To and String, Default Visibility);
		Event Player.PlayerInfoArray[5] = Last Text ID;
	}
}

rule("Tutorial: D.Va")
{
	event
	{
		Ongoing - Each Player;
		All;
		D.Va;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Interact)) == True;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Create HUD Text(Event Player, Null, Null, Custom String(
			"D.Va can climb ledges when outside of MEKA. Face a ledge and hold Jump and Forward. "), Right, 5, Color(Sky Blue), Color(
			White), Color(White), Visible To, Default Visibility);
		Event Player.PlayerInfoArray[4] = Last Text ID;
		Create HUD Text(Event Player, Null, Null, Custom String(
			"{0}Eject: Crouch+Interact to Eject from MEKA. Half of MEKA health is preserved as Call Mech charge (up to 50%).", Icon String(
			Warning)), Right, 6, Color(Sky Blue), Color(White), Color(Yellow), Visible To, Default Visibility);
		Event Player.PlayerInfoArray[5] = Last Text ID;
	}
}

rule("Tutorial: Doomfist")
{
	event
	{
		Ongoing - Each Player;
		All;
		Doomfist;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Interact)) == True;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Create HUD Text(Event Player, Null, Null, Custom String(
			"{0}Rocket Punch wall damage drops off based on distance travelled by victim. (Punch + Wall Damage at 10 meters = 150 damage).",
			Ability Icon String(Hero(Doomfist), Button(Secondary Fire))), Right, 6, Color(Sky Blue), Color(White), Color(Turquoise),
			Visible To, Default Visibility);
		Event Player.PlayerInfoArray[4] = Last Text ID;
		Create HUD Text(Event Player, Null, Null, Custom String("{0}Rising Uppercut cooldown begins when touching the ground (0.75s).",
			Ability Icon String(Hero(Doomfist), Button(Ability 1)), Ability Icon String(Hero(Doomfist), Button(Ability 2))), Right, 7,
			Color(Lime Green), Color(White), Color(Lime Green), Visible To, Default Visibility);
		Event Player.PlayerInfoArray[5] = Last Text ID;
		Create HUD Text(Event Player, Null, Null, Custom String("Best Defense no longer triggers on {0}Rising Uppercut",
			Ability Icon String(Hero(Doomfist), Button(Ability 1)), Ability Icon String(Hero(Doomfist), Button(Ability 2))), Right, 8,
			Color(Sky Blue), Color(White), Color(Lime Green), Visible To, Default Visibility);
		Event Player.PlayerInfoArray[6] = Last Text ID;
	}
}

rule("Tutorial: McCree")
{
	event
	{
		Ongoing - Each Player;
		All;
		McCree;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Interact)) == True;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Create HUD Text(Event Player, Null, Null, Custom String(
			"{0}Your shots have stopping power and recoil pusback. Slower fire rate on primary.", Ability Icon String(Hero(McCree), Button(
			Primary Fire))), Right, 6, Color(Sky Blue), Color(White), Color(Aqua), Visible To, Default Visibility);
		Event Player.PlayerInfoArray[4] = Last Text ID;
		Create HUD Text(Event Player, Null, Null, Custom String("{0}Fan the Hammer is automatic and can be interrupted manually.",
			Ability Icon String(Hero(McCree), Button(Secondary Fire))), Right, 7, Color(Sky Blue), Color(White), Color(Aqua), Visible To,
			Default Visibility);
		Event Player.PlayerInfoArray[5] = Last Text ID;
		Create HUD Text(Event Player, Null, Null, Custom String(
			"{0}Combat Roll has extended potential distance. Press Crouch while rolling to 'Combat Duck'.", Ability Icon String(Hero(
			McCree), Button(Ability 1))), Right, 8, Color(Sky Blue), Color(White), Color(Lime Green), Visible To, Default Visibility);
		Event Player.PlayerInfoArray[6] = Last Text ID;
		Create HUD Text(Event Player, Null, Null, Custom String(
			"{0}Combat roll cooldown gets shortened by one second for each critical hit.", Ability Icon String(Hero(McCree), Button(
			Ability 1))), Right, 9, Color(Sky Blue), Color(White), Color(Lime Green), Visible To, Default Visibility);
		Event Player.PlayerInfoArray[7] = Last Text ID;
	}
}

rule("Tutorial: Reinhardt")
{
	event
	{
		Ongoing - Each Player;
		All;
		Reinhardt;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Interact)) == True;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Create HUD Text(Event Player, Null, Null, Custom String("{0}Charge can be cancelled with Melee. Can Jump during Charge.",
			Ability Icon String(Hero(Reinhardt), Button(Ability 1))), Right, 6, Color(Sky Blue), Color(White), Color(Lime Green),
			Visible To, Default Visibility);
		Event Player.PlayerInfoArray[5] = Last Text ID;
	}
}

rule("Tutorial: Zenyatta")
{
	event
	{
		Ongoing - Each Player;
		All;
		Zenyatta;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Interact)) == True;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Create HUD Text(Event Player, Null, Null, Custom String(
			"{0}Passive: Have decreased personal gravity while holding Jump. Increased gravity while holding Crouch.", Ability Icon String(
			Hero(Zenyatta), Button(Ultimate))), Right, 6, Color(Sky Blue), Color(White), Color(Yellow), Visible To, Default Visibility);
		Event Player.PlayerInfoArray[4] = Last Text ID;
	}
}

rule("========================[] Gamemode")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}
}

rule("!!! Anti Crash !!!")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Server Load > 185;
	}

	actions
	{
		Log To Inspector(Custom String("Server Overloaded Here!"));
		Wait(0.200, Abort When False);
		Small Message(All Players(All Teams), Custom String("Anti crash system activated"));
		Set Slow Motion(10);
		Wait Until(Server Load < 175, 99999);
		Set Slow Motion(100);
	}
}

rule("[SUB] SpawnStatsReset")
{
	event
	{
		Subroutine;
		SpawnStatsReset;
	}

	actions
	{
		Log To Inspector(Custom String("{0} Starting Spawn Reset Stats", Event Player));
		Remove All Health Pools From Player(Event Player);
		Start Scaling Player(Event Player, 1, False);
		Start Scaling Barriers(Event Player, 1, False);
		Event Player.AbilityVariables = Empty Array;
		"Reset abilities (Cannot be detected by workshop code yet, so activate on every character)"
		Set Primary Fire Enabled(Event Player, True);
		Set Reload Enabled(Event Player, True);
		Set Secondary Fire Enabled(Event Player, True);
		Set Ability 1 Enabled(Event Player, True);
		Set Ability 2 Enabled(Event Player, True);
		Set Ultimate Ability Enabled(Event Player, True);
		Allow Button(Event Player, Button(Primary Fire));
		Allow Button(Event Player, Button(Secondary Fire));
		Allow Button(Event Player, Button(Ability 1));
		Allow Button(Event Player, Button(Ability 2));
		Allow Button(Event Player, Button(Ultimate));
		"If a stats change is in effect on the current player, then reset stats"
		If(Event Player.IsStatsChanged == True);
			Set Max Health(Event Player, 100);
			Set Damage Dealt(Event Player, 100);
			Set Damage Received(Event Player, 100);
			Set Healing Dealt(Event Player, 100);
			Set Projectile Speed(Event Player, 100);
			Set Projectile Gravity(Event Player, 100);
			Set Move Speed(Event Player, 100);
			Set Gravity(Event Player, 100);
			Set Invisible(Event Player, None);
		End;
		"If ANY custom abilities are in-use"
		If(Is True For Any(Event Player.IsUsingAbility, Current Array Element != False));
			Event Player.IsUsingAbility[1] = False;
			Event Player.IsUsingAbility[2] = False;
			Event Player.IsUsingAbility[3] = False;
			Event Player.IsUsingAbility[4] = False;
		End;
		"If any chase variables are not null, stop them and set to null"
		If((Event Player.AbilityVariableChase_I || Event Player.AbilityVariableChase_II) != Null);
			Stop Chasing Player Variable(Event Player, AbilityVariableChase_I);
			Stop Chasing Player Variable(Event Player, AbilityVariableChase_II);
			Event Player.AbilityVariableChase_I = Null;
			Event Player.AbilityVariableChase_II = Null;
		End;
		"Status Effect Apocolypse"
		If(Has Status(Event Player, Hacked) || Has Status(Event Player, Burning) || Has Status(Event Player, Knocked Down) || Has Status(
			Event Player, Asleep) || Has Status(Event Player, Frozen) || Has Status(Event Player, Unkillable) || Has Status(Event Player,
			Invincible) || Has Status(Event Player, Phased Out) || Has Status(Event Player, Rooted) || Has Status(Event Player, Stunned)
			== True);
			Clear Status(Event Player, Hacked);
			Clear Status(Event Player, Burning);
			Clear Status(Event Player, Knocked Down);
			Clear Status(Event Player, Asleep);
			Clear Status(Event Player, Frozen);
			Clear Status(Event Player, Unkillable);
			Clear Status(Event Player, Invincible);
			Clear Status(Event Player, Phased Out);
			Clear Status(Event Player, Rooted);
			Clear Status(Event Player, Stunned);
		End;
		Log To Inspector(Custom String("{0} Finished Spawn Reset Stats", Event Player));
	}
}

rule("[SUB] EffectHandler")
{
	event
	{
		Subroutine;
		EffectHandler;
	}

	actions
	{
		Log To Inspector(Custom String("{0} Starting Effect Despawns", Event Player));
		"Erase all previous effects"
		While(Event Player.AbilityEffects[0] != 0);
			Destroy Effect(Last Of(Event Player.AbilityEffects));
			Destroy Icon(Last Of(Event Player.AbilityEffects));
			Modify Player Variable(Event Player, AbilityEffects, Remove From Array By Value, Last Of(Event Player.AbilityEffects));
			Event Player.AbilityEffects[0] -= 1;
			If(Event Player.AbilityEffects[0] != 0);
				Continue;
			End;
		End;
		Log To Inspector(Custom String("{0} Finished Effect Despawns", Event Player));
		Skip If(Is Alive(Event Player) == True, 1);
		Wait Until(Is Alive(Event Player), 99999);
		Log To Inspector(Custom String("{0} Starting Effect Spawns", Event Player));
		"Lucio Custom Effects"
		If((Hero Of(Event Player) == Hero(Lúcio) || Hero Being Duplicated(Event Player) == Hero(Lúcio)) == True);
			Create Effect(Filtered Array(Filtered Array(Event Player, Is Alive(Event Player) == True), Is Using Ability 1(Event Player)
				!= True), Ring, Color(Blue), Update Every Frame(Position Of(Event Player)), 12, Visible To Position and Radius);
			Modify Player Variable(Event Player, AbilityEffects, Append To Array, Last Created Entity);
			Create Effect(Filtered Array(All Players(All Teams), Event Player.IsUsingAbility[1] == False), Mercy Damage Boosted Effect, Color(
				White), Event Player, 4, Visible To Position and Radius);
			Modify Player Variable(Event Player, AbilityEffects, Append To Array, Last Created Entity);
			Create Effect(Filtered Array(All Players(All Teams), Event Player.IsUsingAbility[2] == True), Ring, Color(Green),
				Update Every Frame(Vector(X Component Of(Position Of(Event Player)), Y Component Of(Position Of(Event Player)) - Altitude Of(
				Event Player), Z Component Of(Position Of(Event Player)))), 12, Visible To Position and Radius);
			Modify Player Variable(Event Player, AbilityEffects, Append To Array, Last Created Entity);
			Create Effect(Filtered Array(Remove From Array(All Players(All Teams), Event Player), Event Player.IsUsingAbility[2] == True),
				Wrecking Ball Piledriver Fire Effect, Color(Team 1), Update Every Frame(Position Of(Event Player)), 12,
				Visible To Position and Radius);
			Modify Player Variable(Event Player, AbilityEffects, Append To Array, Last Created Entity);
			Event Player.AbilityEffects[0] += 4;
		Else If((Hero Of(Event Player) == Hero(Baptiste) || Hero Being Duplicated(Event Player) == Hero(Baptiste)) == True);
			Create Effect(Filtered Array(All Players(All Teams), Event Player.IsUsingAbility[1] == True),
				Baptiste Immortality Field Protected Effect, Color(White), Event Player, 75, Visible To Position and Radius);
			Modify Player Variable(Event Player, AbilityEffects, Append To Array, Last Created Entity);
			Create Effect(Filtered Array(All Players(All Teams), Event Player.IsUsingAbility[1] == True),
				Baptiste Immortality Field Protected Sound, Color(White), Event Player, 75, Visible To Position and Radius);
			Modify Player Variable(Event Player, AbilityEffects, Append To Array, Last Created Entity);
			Create Effect(Filtered Array(All Players(All Teams), Event Player.IsUsingAbility[1] == True),
				Ana Biotic Grenade Increased Healing Effect, Color(White), Event Player, 200, Visible To Position and Radius);
			Modify Player Variable(Event Player, AbilityEffects, Append To Array, Last Created Entity);
			Event Player.AbilityEffects[0] += 3;
		Else If((Hero Of(Event Player) == Hero(Brigitte) || Hero Being Duplicated(Event Player) == Hero(Brigitte)) == True);
			Create Effect(Filtered Array(Players Within Radius(Event Player, 5, All Teams, Surfaces), Event Player.IsUsingAbility[1] == True),
				Ring, Color(Yellow), Event Player, 1, Visible To Position and Radius);
			Modify Player Variable(Event Player, AbilityEffects, Append To Array, Last Created Entity);
			Create Effect(Filtered Array(Event Player, Event Player.IsUsingAbility[1] == True), Beacon Sound, Color(Yellow), Event Player, 150,
				Visible To Position and Radius);
			Modify Player Variable(Event Player, AbilityEffects, Append To Array, Last Created Entity);
			Event Player.AbilityEffects[0] += 2;
		Else If((Hero Of(Event Player) == Hero(Zarya) || Hero Being Duplicated(Event Player) == Hero(Zarya)) == True);
			Create Effect(Filtered Array(All Players(All Teams), Event Player.IsUsingAbility[1] == True), Sigma Gravitic Flux Target Effect,
				Color(Team 1), Event Player, 1, Visible To Position and Radius);
			Modify Player Variable(Event Player, AbilityEffects, Append To Array, Last Created Entity);
			Create Effect(Filtered Array(Players Within Radius(Event Player, 20, All Teams, Surfaces), Event Player.IsUsingAbility[1] == True),
				Energy Sound, Color(Purple), Event Player, 80, Visible To Position and Radius);
			Modify Player Variable(Event Player, AbilityEffects, Append To Array, Last Created Entity);
			Event Player.AbilityEffects[0] += 2;
		Else If((Hero Of(Event Player) == Hero(Soldier: 76) || Hero Being Duplicated(Event Player) == Hero(Soldier: 76)) == True);
			Start Forcing Player Outlines(Event Player.AbilityVariables, Filtered Array(Filtered Array(Event Player,
				Event Player.AbilityVariables != Null), Is Using Ability 2(Event Player) == True), True, Color(Green), Always);
		End;
		Global.DebugEnabled = 0;
		Log To Inspector(Custom String("{0} Finished Effect Spawns", Event Player));
	}
}

rule("[SUB] HUDHandler")
{
	event
	{
		Subroutine;
		HUDHandler;
	}

	actions
	{
		Log To Inspector(Custom String("{0} Starting HUD Despawns", Event Player));
		Skip If(Event Player.HudText[0] == 0, 7);
		"Erase all previous effects"
		While(Event Player.HudText[0] != 0);
			Destroy Progress Bar HUD Text(Last Of(Event Player.HudText));
			Destroy HUD Text(Last Of(Event Player.HudText));
			Modify Player Variable(Event Player, HudText, Remove From Array By Value, Last Of(Event Player.HudText));
			Event Player.HudText[0] -= 1;
			If(Event Player.HudText[0] != 0);
				Continue;
			End;
		End;
		Log To Inspector(Custom String("{0} Finished HUD Despawns", Event Player));
		Skip If(Is Alive(Event Player) == True, 1);
		Wait Until(Is Alive(Event Player), 99999);
		Log To Inspector(Custom String("{0} Starting HUD Handler", Event Player));
		Wait(0.016, Ignore Condition);
		"HEROES"
		If((Hero Of(Event Player) == Hero(Ashe) || Hero Being Duplicated(Event Player) == Hero(Ashe)) == True);
			Create Progress Bar HUD Text(Filtered Array(Event Player, Event Player.AbilityVariableChase_I != 0),
				Event Player.AbilityVariableChase_I, Custom String("Coach Gun Timer"), Left, 0, Color(Blue), Color(Blue),
				Visible To Values and Color, Default Visibility);
			Modify Player Variable(Event Player, HudText, Append To Array, Last Text ID);
			Event Player.HudText[0] = 1;
		Else If(Hero Of(Event Player) == Hero(Bastion));
			Create Progress Bar HUD Text(Filtered Array(Filtered Array(Event Player, Event Player.IsUsingAbility[1] == True), Hero Of(
				Event Player) == Hero(Bastion)), Ammo(Event Player, 1) / Max Ammo(Event Player, 1) * 100, Custom String(
				"Cooldown will be {0}s", (160 - Ammo(Event Player, 1)) / 10), Top, 0, Color(Red), Color(Red), Visible To Values and Color,
				Default Visibility);
			Modify Player Variable(Event Player, HudText, Append To Array, Last Text ID);
			Event Player.HudText[0] = 1;
		Else If(Hero Of(Event Player) == Hero(McCree));
			Create Progress Bar HUD Text(Filtered Array(Event Player, Event Player.AbilityVariableChase_I != 0),
				Event Player.AbilityVariableChase_I, Custom String("Roll 20 Timer"), Left, 0, Color(Blue), Color(Blue),
				Visible To Values and Color, Default Visibility);
			Modify Player Variable(Event Player, HudText, Append To Array, Last Text ID);
			Event Player.HudText[0] = 1;
		End;
		Log To Inspector(Custom String("{0} Finished HUD Handler", Event Player));
	}
}

rule("[SUB] Per Hero Stats")
{
	event
	{
		Subroutine;
		PerHeroStatChanges;
	}

	actions
	{
		Log To Inspector(Custom String("{0} Starting Per Hero Stats", Event Player));
		Skip If(Is Alive(Event Player) == True, 1);
		Wait Until(Is Alive(Event Player), 99999);
		Set Ultimate Charge(Event Player, 0);
		"Lucio Custom Effects"
		If((Hero Of(Event Player) == Hero(Ashe) || Hero Being Duplicated(Event Player) == Hero(Ashe)) == True);
			Event Player.AbilityVariables[1] = 2;
			Event Player.AbilityVariables[2] = 100;
		Else If((Hero Of(Event Player) == Hero(Baptiste) || Hero Being Duplicated(Event Player) == Hero(Baptiste)) == True);
			Set Secondary Fire Enabled(Event Player, False);
		Else If((Hero Of(Event Player) == Hero(Brigitte) || Hero Being Duplicated(Event Player) == Hero(Brigitte)) == True);
			Start Scaling Player(Event Player, 1.200, True);
			Start Scaling Barriers(Event Player, 1.230, True);
			Set Damage Dealt(Event Player, 40 / 35 * 100);
			Set Healing Dealt(Event Player, 0);
			Set Ability 2 Enabled(Event Player, False);
			Event Player.IsStatsChanged = True;
		Else If((Hero Of(Event Player) == Hero(Lúcio) || Hero Being Duplicated(Event Player) == Hero(Lúcio)) == True);
			Set Healing Dealt(Event Player, 0);
			Event Player.IsStatsChanged = True;
			Event Player.IsUsingAbility[1] = True;
		Else If((Hero Of(Event Player) == Hero(Soldier: 76) || Hero Being Duplicated(Event Player) == Hero(Soldier: 76)) == True);
			Set Healing Dealt(Event Player, 0);
			Set Max Health(Event Player, 25);
			Add Health Pool To Player(Event Player, Shields, 175, True, True);
			Event Player.IsStatsChanged = True;
		Else If((Hero Of(Event Player) == Hero(Genji) || Hero Being Duplicated(Event Player) == Hero(Genji)) == True);
			Event Player.IsStatsChanged = True;
			Add Health Pool To Player(Event Player, Shields, 50, True, True);
		Else If((Hero Of(Event Player) == Hero(Orisa) || Hero Being Duplicated(Event Player) == Hero(Orisa)) == True);
			Set Damage Dealt(Event Player, 10 / 11 * 100);
			Set Max Health(Event Player, 400 / 600 * 100);
			Add Health Pool To Player(Event Player, Health, 2 / 3 + 41, True, True);
			Add Health Pool To Player(Event Player, Armor, 1 / 3 + 8, True, True);
			Event Player.IsStatsChanged = True;
		Else If((Hero Of(Event Player) == Hero(Wrecking Ball) || Hero Being Duplicated(Event Player) == Hero(Wrecking Ball)) == True);
			disabled Start Scaling Player(Event Player, 0.850, True);
		End;
		Log To Inspector(Custom String("{0} Finished Per Hero Stats", Event Player));
	}
}

rule("Player Dies (Erase previous modifiers/Wait for new spawn)")
{
	event
	{
		Player Died;
		All;
		All;
	}

	actions
	{
		"Reset ULT charge to 0"
		Set Ultimate Charge(Event Player, 0);
		"Reset stats as needed"
		Call Subroutine(SpawnStatsReset);
		"Spawn hero-specific effects"
		Call Subroutine(EffectHandler);
		"Reset hero-specific HUDs"
		Call Subroutine(HUDHandler);
		"Reset hero-specific Info HUDs"
		Call Subroutine(PerHeroStatChanges);
	}
}

rule("Player Joins Game (Initialize hero stats)")
{
	event
	{
		Player Joined Match;
		All;
		All;
	}

	conditions
	{
		disabled Is Alive(Event Player) == True;
		disabled Has Spawned(Event Player) == True;
		disabled Health(Event Player) != 0;
	}

	actions
	{
		Wait Until(Has Spawned(Event Player), 99999);
		"Reset ULT charge to 0"
		Set Ultimate Charge(Event Player, 0);
		"Reset stats as needed"
		Start Rule(SpawnStatsReset, Do Nothing);
		"Spawn hero-specific effects"
		Start Rule(EffectHandler, Do Nothing);
		"Reset hero-specific HUDs"
		Start Rule(HUDHandler, Do Nothing);
		"Reset hero-specific Info HUDs"
		Start Rule(PerHeroStatChanges, Do Nothing);
		Abort If(Has Spawned(Event Player) == False);
	}
}

rule("Player Leaves Game (Erase previous modifiers/Effects)")
{
	event
	{
		Player Left Match;
		All;
		All;
	}

	actions
	{
		"Reset ULT charge to 0"
		Set Ultimate Charge(Event Player, 0);
		"Reset stats as needed"
		Call Subroutine(SpawnStatsReset);
		"Spawn hero-specific effects"
		Call Subroutine(EffectHandler);
		"Reset hero-specific HUDs"
		Call Subroutine(HUDHandler);
		"Reset hero-specific Info HUDs"
		Call Subroutine(PerHeroStatChanges);
	}
}

rule("[Ashe] Coach Gun")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		(Hero Of(Event Player) == Hero(Ashe) || Hero Being Duplicated(Event Player) == Hero(Ashe)) == True;
		Is Using Ability 1(Event Player) == True;
	}

	actions
	{
		Stop Chasing Player Variable(Event Player, AbilityVariableChase_I);
		Event Player.AbilityVariableChase_I = 0;
		Event Player.AbilityVariables[1] -= 1;
		"If ammo is still in the clip, then..."
		If(Event Player.AbilityVariables[1] > 0);
			"WAIT FOR ABILITY TO END"
			Wait Until(!Is Using Ability 1(Event Player), 1);
			"Set Cooldown to 0 for second shot"
			Set Ability Cooldown(Event Player, Button(Ability 1), 0);
			Event Player.AbilityVariableChase_I = 100;
			Chase Player Variable Over Time(Event Player, AbilityVariableChase_I, 0, 2.250, Destination and Duration);
			Wait(2.250, Restart When True);
			Abort If(Is Dead(Event Player) == True);
			"Abort if already shot"
			Abort If(Event Player.AbilityVariables[1] == 0);
			"Remove extra shot"
			Event Player.AbilityVariables[1] = 0;
			Set Ability Cooldown(Event Player, Button(Ability 1), 10);
		"If out of ammo"
		Else If(Event Player.AbilityVariables[1] == 0);
			Wait Until(Is Using Ability 1(Event Player) == False, 99999);
			Set Ability Cooldown(Event Player, Button(Ability 1), 10);
		End;
	}
}

rule("[Ashe] Coach Gun (Cooldown at 0)")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		(Hero Of(Event Player) == Hero(Ashe) || Hero Being Duplicated(Event Player) == Hero(Ashe)) == True;
		Ability Cooldown(Event Player, Button(Ability 1)) == 0;
		Event Player.AbilityVariables[1] == 0;
	}

	actions
	{
		Wait(0.016, Abort When False);
		Event Player.AbilityVariables[1] = 2;
	}
}

rule("[Lucio] Damage Boost song replaces heal song")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		(Hero Of(Event Player) == Hero(Lúcio) || Hero Being Duplicated(Event Player) == Hero(Lúcio)) == True;
		Is Using Ability 1(Event Player) == False;
		Is Using Ability 2(Event Player) == False;
	}

	actions
	{
		Event Player.IsUsingAbility[1] = False;
		Set Damage Dealt(Event Player, 125);
		Set Knockback Dealt(Event Player, 125);
	}
}

rule("[Lucio] Amp Damage Boost")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		(Hero Of(Event Player) == Hero(Lúcio) || Hero Being Duplicated(Event Player) == Hero(Lúcio)) == True;
		Is Using Ability 2(Event Player) == True;
		Is Using Ability 1(Event Player) == False;
	}

	actions
	{
		Event Player.IsUsingAbility[1] = False;
		Set Damage Dealt(Event Player, 150);
		Set Knockback Dealt(Event Player, 150);
		Wait Until((Is Using Ability 2(Event Player) == False || Is Using Ability 1(Event Player)) == True, 99999);
		Skip If(Is Using Ability 1(Event Player) == False, 1);
		Set Damage Dealt(Event Player, 100);
		Set Knockback Dealt(Event Player, 100);
	}
}

rule("[Lucio] Speed Boost disables Damage Boost")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		(Hero Of(Event Player) == Hero(Lúcio) || Hero Being Duplicated(Event Player) == Hero(Lúcio)) == True;
		Is Using Ability 1(Event Player) == True;
	}

	actions
	{
		Set Damage Dealt(Event Player, 100);
		Set Knockback Dealt(Event Player, 100);
		Event Player.IsUsingAbility[1] = True;
	}
}

rule("[Lucio] Soundwave Self-Blast")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		(Hero Of(Event Player) == Hero(Lúcio) || Hero Being Duplicated(Event Player) == Hero(Lúcio)) == True;
		Is Firing Secondary(Event Player) == True;
	}

	actions
	{
		Apply Impulse(Event Player, Facing Direction Of(Event Player) * -1, 10, To World, Cancel Contrary Motion XYZ);
	}
}

rule("[Lucio] Ultimate")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		(Hero Of(Event Player) == Hero(Lúcio) || Hero Being Duplicated(Event Player) == Hero(Lúcio)) == True;
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		Event Player.IsUsingAbility[2] = True;
		Wait(0.050, Ignore Condition);
		Wait Until(Is On Ground(Event Player), 99999);
		Abort If(Is Dead(Event Player) == True);
		End;
		Play Effect(All Players(All Teams), Doomfist Meteor Strike Impact Effect, Color(White), Position Of(Event Player), 20);
		Apply Impulse(Remove From Array(Players Within Radius(Event Player, 12, All Teams, Surfaces And All Barriers), Event Player),
			Vector(0, 1.300, 0), 11.500, To World, Cancel Contrary Motion);
		Set Status(Remove From Array(Players Within Radius(Event Player, 12, All Teams, Surfaces And All Barriers), Event Player),
			Event Player, Knocked Down, 0.750);
		Damage(Remove From Array(Players Within Radius(Event Player, 12, All Teams, Surfaces And All Barriers), Event Player),
			Event Player, 25);
		Event Player.IsUsingAbility[2] = False;
	}
}

rule("[Ana] Jump Grenade")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		(Hero Of(Event Player) == Hero(Ana) || Hero Being Duplicated(Event Player) == Hero(Ana)) == True;
		Is Using Ability 2(Event Player) == True;
		Is Jumping(Event Player) == True;
		Vertical Facing Angle Of(Event Player) >= 50;
		Altitude Of(Event Player) <= 2;
	}

	actions
	{
		Play Effect(All Players(All Teams), Pharah Concussive Blast Effect, Color(Team 1), Position Of(Event Player), 4);
		Play Effect(Event Player, Pharah Concussive Blast Sound, Color(Team 2), Position Of(Event Player), 200);
		Apply Impulse(Event Player, Up, 15, To World, Cancel Contrary Motion);
		Abort If(Event Player.IsUsingAbility[1] == True);
		Set Move Speed(Event Player, 133);
		Wait(2, Ignore Condition);
		Abort If(Is Using Ultimate(Event Player) == True);
		Abort If(Event Player.IsUsingAbility[1] == True);
		Set Move Speed(Event Player, 100);
	}
}

rule("[Pharah] Jump Jets Forward")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		(Hero Of(Event Player) == Hero(Pharah) || Hero Being Duplicated(Event Player) == Hero(Pharah)) == True;
		Is Using Ability 1(Event Player) == True;
	}

	actions
	{
		If(Is Button Held(Event Player, Button(Crouch)) == True);
			Apply Impulse(Event Player, Vector(0, -1.250, 2), 17.666, To Player, Incorporate Contrary Motion);
			Set Ability Cooldown(Event Player, Button(Ability 1), 6);
		Else;
		End;
	}
}

rule("[Baptiste] Window Of Opportunity... Secondary Fire")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		(Hero Of(Event Player) == Hero(Baptiste) || Hero Being Duplicated(Event Player) == Hero(Baptiste)) == True;
		Is Button Held(Event Player, Button(Secondary Fire)) == True;
		Ability Cooldown(Event Player, Button(Ability 2)) == 0;
		Is Using Ability 2(Event Player) == False;
		Is Alive(Event Player) == True;
		Is Communicating Any Emote(Event Player) == False;
	}

	actions
	{
		Set Ability Cooldown(Event Player, Button(Ability 2), Ability Cooldown(Event Player, Button(Ability 2)) + 20);
		Event Player.IsUsingAbility[1] = True;
		Event Player.IsStatsChanged = True;
		Set Healing Received(Event Player, 300);
		Play Effect(Event Player, Buff Explosion Sound, Color(White), Event Player, 100);
		Wait(5.500, Ignore Condition);
		Set Healing Received(Event Player, 100);
		Event Player.IsUsingAbility[1] = Null;
		Event Player.IsStatsChanged = False;
	}
}

rule("[Zarya] Ability 2 start")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		(Hero Of(Event Player) == Hero(Zarya) || Hero Being Duplicated(Event Player) == Hero(Zarya)) == True;
		Is Button Held(Event Player, Button(Ability 2)) == True;
		Ability Cooldown(Event Player, Button(Ability 2)) == 0;
		Is Using Ability 1(Event Player) == False;
		Has Spawned(Event Player) == True;
		Health Of Type(Event Player, Shields) >= 50;
	}

	actions
	{
		"cooldown management"
		Set Ability 2 Enabled(Event Player, False);
		Set Ammo(Event Player, 0, Ammo(Event Player, 0) + Health Of Type(Event Player, Shields) * (1 / 2));
		Damage(Event Player, Null, Health Of Type(Event Player, Shields));
		Play Effect(All Players(All Teams), Ring Explosion, Color(Purple), Event Player, 8);
		Wait(0.100, Ignore Condition);
		If(Ammo(Event Player, 0) > Max Ammo(Event Player, 0));
			Set Ability Cooldown(Event Player, Button(Ability 2), 7);
		Else If(Ammo(Event Player, 0) <= Max Ammo(Event Player, 0));
			Set Ability Cooldown(Event Player, Button(Ability 2), 15.900);
	}
}

rule("[Zarya] Cooldown starts upon less than max ammo")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		(Hero Of(Event Player) == Hero(Zarya) || Hero Being Duplicated(Event Player) == Hero(Zarya)) == True;
		Ammo(Event Player, 0) > Max Ammo(Event Player, 0);
		Is Alive(Event Player) == True;
	}

	actions
	{
		Event Player.IsUsingAbility[1] = True;
		While(Ammo(Event Player, 0) > Max Ammo(Event Player, 0));
			Wait(0.016, Ignore Condition);
			Abort If(Is Alive(Event Player) == False);
		End;
		Set Ability Cooldown(Event Player, Button(Ability 2), 16);
		Event Player.IsUsingAbility[1] = False;
		Play Effect(Event Player, Debuff Impact Sound, Color(White), Event Player, 25);
		Set Ability 2 Enabled(Event Player, True);
	}
}

rule("[Zarya] \"Overheal Ammo\" goes away after time")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		(Hero Of(Event Player) == Hero(Zarya) || Hero Being Duplicated(Event Player) == Hero(Zarya)) == True;
		Ammo(Event Player, 0) > Max Ammo(Event Player, 0);
		Is Alive(Event Player) == True;
	}

	actions
	{
		Wait(7, Abort When False);
		Set Ammo(Event Player, 0, Max Ammo(Event Player, 0));
		Play Effect(Event Player, Debuff Impact Sound, Color(White), Event Player, 200);
	}
}

rule("[Zarya] Ability 2 disabled by Ability 1")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		(Hero Of(Event Player) == Hero(Zarya) || Hero Being Duplicated(Event Player) == Hero(Zarya)) == True;
		Is Using Ability 1(Event Player) == True;
	}

	actions
	{
		Set Ability 2 Enabled(Event Player, False);
	}
}

rule("[Zarya] Ability 2 disabled by too low HP")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		(Hero Of(Event Player) == Hero(Zarya) || Hero Being Duplicated(Event Player) == Hero(Zarya)) == True;
		Ability Cooldown(Event Player, Button(Ability 2)) == 0;
		Is Using Ability 1(Event Player) == False;
		Health Of Type(Event Player, Shields) < 50;
	}

	actions
	{
		Set Ability 2 Enabled(Event Player, False);
	}
}

rule("[Zarya] Ability 2 enabled when Ability 1 is over AND HP is high enough")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		(Hero Of(Event Player) == Hero(Zarya) || Hero Being Duplicated(Event Player) == Hero(Zarya)) == True;
		Ability Cooldown(Event Player, Button(Ability 2)) == 0;
		Is Using Ability 1(Event Player) == False;
		Health Of Type(Event Player, Shields) >= 50;
	}

	actions
	{
		Set Ability 2 Enabled(Event Player, True);
	}
}

rule("[D.va] Eject Button")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		(Hero Of(Event Player) == Hero(D.Va) || Hero Being Duplicated(Event Player) == Hero(D.Va)) == True;
		Is Button Held(Event Player, Button(Interact)) == True;
		Is Button Held(Event Player, Button(Crouch)) == True;
		disabled Max Health(Event Player) >= 600;
		disabled Has Status(Event Player, Hacked) == False;
		Is In Alternate Form(Event Player) != True;
	}

	actions
	{
		Event Player.AbilityVariables = Health(Event Player);
		Kill(Event Player, Null);
		Wait Until(Is In Alternate Form(Event Player), 3);
		Set Ultimate Charge(Event Player, Event Player.AbilityVariables / 12);
		Clear Status(Event Player, Hacked);
	}
}

rule("[Doomfist] Rising Uppercut Disabled after use.")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		(Hero Of(Event Player) == Hero(Doomfist) || Hero Being Duplicated(Event Player) == Hero(Doomfist)) == True;
		Is Using Ability 1(Event Player) == True;
	}

	actions
	{
		Wait(0.200, Ignore Condition);
		Set Ability 1 Enabled(Event Player, False);
		Wait Until(Is On Ground(Event Player), 99999);
		Set Ability Cooldown(Event Player, Button(Ability 1), 0.750);
		Set Ability 1 Enabled(Event Player, True);
	}
}

rule("[Doomfist] Slam Cancel with Melee")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		(Hero Of(Event Player) == Hero(Doomfist) || Hero Being Duplicated(Event Player) == Hero(Doomfist)) == True;
		Is Using Ability 2(Event Player) == True;
		Is Button Held(Event Player, Button(Melee)) == True;
	}

	actions
	{
		Set Melee Enabled(Event Player, False);
		Wait(0.016, Ignore Condition);
		Cancel Primary Action(Event Player);
		Wait(0.750, Ignore Condition);
		Set Melee Enabled(Event Player, True);
	}
}

rule("[Reinhardt] Charge Cancellable with Quick Melee")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		(Hero Of(Event Player) == Hero(Reinhardt) || Hero Being Duplicated(Event Player) == Hero(Reinhardt)) == True;
		Is Using Ability 1(Event Player) == True;
		Is Button Held(Event Player, Button(Melee)) == True;
	}

	actions
	{
		Cancel Primary Action(Event Player);
	}
}

rule("[Reinhardt] Jump While Charging")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		(Hero Of(Event Player) == Hero(Reinhardt) || Hero Being Duplicated(Event Player) == Hero(Reinhardt)) == True;
		Is Using Ability 1(Event Player) == True;
		Is Button Held(Event Player, Button(Jump)) == True;
		Is On Ground(Event Player) == True;
	}

	actions
	{
		Apply Impulse(Event Player, Up, 5, To World, Incorporate Contrary Motion);
	}
}

rule("[Echo] check for that one thing that I know im going to forget about and be happy i did so here")
{
	event
	{
		Ongoing - Each Player;
		All;
		Echo;
	}

	conditions
	{
		Is Duplicating(Event Player) != True;
	}

	actions
	{
		"Reset stats as needed"
		Call Subroutine(SpawnStatsReset);
		"Spawn hero-specific effects"
		Call Subroutine(EffectHandler);
		"Reset hero-specific HUDs"
		Call Subroutine(HUDHandler);
		"Reset hero-specific Info HUDs"
		Call Subroutine(PerHeroStatChanges);
	}
}

rule("[Echo] duplicating spawn stats")
{
	event
	{
		Ongoing - Each Player;
		All;
		Echo;
	}

	conditions
	{
		Is Duplicating(Event Player) == True;
	}

	actions
	{
		"Reset stats as needed"
		Call Subroutine(SpawnStatsReset);
		"Spawn hero-specific effects"
		Call Subroutine(EffectHandler);
		"Reset hero-specific HUDs"
		Call Subroutine(HUDHandler);
		"Reset hero-specific Info HUDs"
		Call Subroutine(PerHeroStatChanges);
	}
}

rule("Brig abillity 2")
{
	event
	{
		Player Dealt Damage;
		All;
		All;
	}

	conditions
	{
		(Hero Of(Event Player) == Hero(Brigitte) || Hero Being Duplicated(Event Player) == Hero(Brigitte)) == True;
		Event Ability == Button(Primary Fire);
		Is Firing Secondary(Event Player) == False;
		Is Using Ultimate(Event Player) == False;
		disabled Ability Charge(Event Player, Button(Ability 2)) >= 1;
		disabled Ability Charge(Event Player, Button(Ability 2)) < 2;
	}

	actions
	{
		If(Ability Charge(Event Player, Button(Ability 2)) >= 2);
			Set Ability Charge(Event Player, Button(Ability 2), Ability Charge(Event Player, Button(Ability 2)) - 1);
		Else If(Ability Charge(Event Player, Button(Ability 2)) >= 1);
			Start Heal Over Time(Event Player, Event Player, 3, 25);
			Set Ability Charge(Event Player, Button(Ability 2), 0);
			Play Effect(All Players(All Teams), Ring Explosion, Color(Yellow), Event Player, 5);
		Else;
			If(Normalized Health(Event Player) < 1);
				Start Heal Over Time(Event Player, Event Player, 1.200, 15);
			Else If(Max Health(Event Player) < 250);
				Start Heal Over Time(Event Player, Event Player, 0.650, 15);
				Add Health Pool To Player(Event Player, Armor, 12.500, False, False);
			End;
		End;
		Wait(0.810, Restart When True);
		Set Ability Charge(Event Player, Button(Ability 2), 0);
		Play Effect(Event Player, Debuff Impact Sound, Color(White), Event Player, 200);
		Wait(2, Ignore Condition);
		Remove All Health Pools From Player(Event Player);
		Wait(1.500, Ignore Condition);
		Set Ability Charge(Event Player, Button(Ability 2), 3);
	}
}

rule("Brig no health pools")
{
	event
	{
		Player Dealt Damage;
		All;
		All;
	}

	conditions
	{
		(Hero Of(Event Player) == Hero(Brigitte) || Hero Being Duplicated(Event Player) == Hero(Brigitte)) == True;
		Is Using Ultimate(Event Player) == False;
		Max Health(Event Player) >= 250;
	}

	actions
	{
		Remove All Health Pools From Player(Event Player);
		Add Health Pool To Player(Event Player, Armor, 50, False, False);
		Wait(0.050, Restart When True);
	}
}

rule("Brig Heal")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		(Hero Of(Event Player) == Hero(Brigitte) || Hero Being Duplicated(Event Player) == Hero(Brigitte)) == True;
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		Set Healing Dealt(Event Player, 100);
	}
}

rule("Brig no heal")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		(Hero Of(Event Player) == Hero(Brigitte) || Hero Being Duplicated(Event Player) == Hero(Brigitte)) == True;
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		Set Healing Dealt(Event Player, 0);
	}
}

rule("[Wrecking Ball] Bouncy Ball")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Vertical Speed Of(Event Player) <= -30;
		Distance Between(Event Player, Closest Player To(Event Player, All Teams)) <= 3;
		(Hero Of(Event Player) == Hero(Wrecking Ball) || Hero Being Duplicated(Event Player) == Hero(Wrecking Ball)) == True;
	}

	actions
	{
		Damage(Filtered Array(Players Within Radius(Event Player, 3, All Teams, Off), Current Array Element != Event Player), Event Player,
			30);
		Apply Impulse(Filtered Array(Players Within Radius(Event Player, 3, All Teams, Off), Current Array Element != Event Player), Down,
			50, To Player, Cancel Contrary Motion XYZ);
		Set Status(Filtered Array(Players Within Radius(Event Player, 3, All Teams, Off), Current Array Element != Event Player),
			Event Player, Knocked Down, 0.500);
		Cancel Primary Action(Event Player);
		Apply Impulse(Event Player, Up, 10, To Player, Cancel Contrary Motion XYZ);
	}
}

rule("[McCree] Headshot reduces cooldowns")
{
	event
	{
		Player Dealt Damage;
		All;
		All;
	}

	conditions
	{
		Event Was Critical Hit == True;
		(Hero Of(Event Player) == Hero(McCree) || Hero Being Duplicated(Event Player) == Hero(McCree)) == True;
	}

	actions
	{
		Wait(0.016, Ignore Condition);
		If(!Is Dead(Event Player));
			Set Ability Cooldown(Event Player, Button(Ability 1), Ability Cooldown(Event Player, Button(Ability 1)) - 1);
		Else;
			Set Ability Cooldown(Event Player, Button(Ability 1), Ability Cooldown(Event Player, Button(Ability 1)) - 2);
	}
}

rule("[McCree] Fan the Hammer Overhaul")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		(Hero Of(Event Player) == Hero(McCree) || Hero Being Duplicated(Event Player) == Hero(McCree)) == True;
		Is Firing Secondary(Event Player) == True;
		Is Button Held(Event Player, Button(Secondary Fire)) == False;
	}

	actions
	{
		Set Primary Fire Enabled(Event Player, False);
		Wait Until(!Is Button Held(Event Player, Button(Secondary Fire)), 4);
		Cancel Primary Action(Event Player);
		Wait(0.400, Restart When True);
		Set Primary Fire Enabled(Event Player, True);
	}
}

rule("[Sombra] Hack Hides HUD")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Has Status(Event Player, Hacked) == True;
	}

	actions
	{
		Disable Hero HUD(Event Player);
		Disable Nameplates(All Players(All Teams), Event Player);
		Wait Until(!Has Status(Event Player, Hacked), 99999);
		Enable Hero HUD(Event Player);
		Enable Nameplates(All Players(All Teams), Event Player);
	}
}

rule("[Orisa] Primary Fire no speed penalty")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		(Hero Of(Event Player) == Hero(Orisa) || Hero Being Duplicated(Event Player) == Hero(Orisa)) == True;
		Is Firing Primary(Event Player) == True;
		!Is Using Ability 1(Event Player) == True;
	}

	actions
	{
		Set Move Speed(Event Player, 1 / 0.700 * 100);
		Wait Until(!Is Firing Primary(Event Player) || Is Using Ability 1(Event Player), 99999);
		Set Move Speed(Event Player, 100);
	}
}

rule("[Orisa] Reload Overhaul [Code by WetHarmonica#8673, slightly modified by me]")
{
	event
	{
		Ongoing - Each Player;
		All;
		Orisa;
	}

	conditions
	{
		(Hero Of(Event Player) == Hero(Orisa) || Hero Being Duplicated(Event Player) == Hero(Orisa)) == True;
		Is Reloading(Event Player) == True;
	}

	actions
	{
		Skip If(Ammo(Event Player, 0) > 0, 4);
		Set Primary Fire Enabled(Event Player, False);
		Wait(0.016, Ignore Condition);
		Set Ammo(Event Player, 0, Ammo(Event Player, 0) + 1);
		Press Button(Event Player, Button(Reload));
		Wait(0.950, Ignore Condition);
		Set Primary Fire Enabled(Event Player, True);
		While(Is Reloading(Event Player) == True);
			If(Ammo(Event Player, 0) < Max Ammo(Event Player, 0));
				Set Ammo(Event Player, 0, Ammo(Event Player, 0) + 1);
			End;
			If(Is Button Held(Event Player, Button(Primary Fire)) == True);
				Skip If(Ammo(Event Player, 0) < 8, 1);
				Cancel Primary Action(Event Player);
			End;
			Wait(0.040, Abort When False);
		End;
	}
}

rule("[D.Va] Primary Fire lower speed penalty")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		(Hero Of(Event Player) == Hero(D.Va) || Hero Being Duplicated(Event Player) == Hero(D.Va)) == True;
		Is In Alternate Form(Event Player) == False;
		Is Firing Primary(Event Player) == True;
		!Is Using Ability 1(Event Player) == True;
	}

	actions
	{
		Set Move Speed(Event Player, 80 / 60 * 100);
		Wait Until(Is In Alternate Form(Event Player) || !Is Firing Primary(Event Player) || Is Using Ability 1(Event Player), 99999);
		Set Move Speed(Event Player, 100);
	}
}

rule("[Roadhog] Take a Breather QMC")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		(Hero Of(Event Player) == Hero(Roadhog) || Hero Being Duplicated(Event Player) == Hero(Roadhog)) == True;
		Is Using Ability 2(Event Player) == True;
		Is Button Held(Event Player, Button(Melee)) == True;
	}

	actions
	{
		Cancel Primary Action(Event Player);
	}
}

rule("[Roadhog] Take a Breather reload skip on full")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		(Hero Of(Event Player) == Hero(Roadhog) || Hero Being Duplicated(Event Player) == Hero(Roadhog)) == True;
		Is Using Ability 2(Event Player) == True;
	}

	actions
	{
		Wait(2, Abort When False);
		Set Ammo(Event Player, 0, Max Ammo(Event Player, 0));
	}
}

rule("[Roadhog] Hook provides extra shot at empty clip")
{
	event
	{
		Player Took Damage;
		All;
		All;
	}

	conditions
	{
		(Hero Of(Attacker) == Hero(Roadhog) || Hero Being Duplicated(Attacker) == Hero(Roadhog)) == True;
		Event Ability == Button(Ability 1);
		Ammo(Attacker, 0) == 0;
	}

	actions
	{
		Set Ammo(Attacker, 0, Ammo(Attacker, 0) + 1);
	}
}

rule("[Lucio] Damage Boost song boop longer cooldown")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		(Hero Of(Event Player) == Hero(Lúcio) || Hero Being Duplicated(Event Player) == Hero(Lúcio)) == True;
		Is Using Ability 1(Event Player) == False;
		Is Firing Secondary(Event Player) == True;
	}

	actions
	{
		Set Ability Cooldown(Event Player, Button(Secondary Fire), 7);
	}
}

rule("[Soldier: 76] Clean Sweep")
{
	event
	{
		Player Dealt Damage;
		All;
		All;
	}

	conditions
	{
		(Hero Of(Event Player) == Hero(Soldier: 76) || Hero Being Duplicated(Event Player) == Hero(Soldier: 76)) == True;
		Event Was Environment == False;
		Victim != Event Player;
	}

	actions
	{
		Skip If(Is Dead(Victim) == True, 1);
		If(Event Player.AbilityVariableThruDeath != Victim);
			Stop Forcing Player Outlines(Event Player.AbilityVariableThruDeath, Event Player);
		End;
		Event Player.AbilityVariableThruDeath = Victim;
		Wait(25, Restart When True);
		Event Player.AbilityVariableThruDeath = Null;
	}
}

rule("[Soldier: 76] Clean Sweep disable on death")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		(Hero Of(Event Player) == Hero(Soldier: 76) || Hero Being Duplicated(Event Player) == Hero(Soldier: 76)) == True;
		(Is Dead(Event Player.AbilityVariableThruDeath) || Is Dead(Event Player)) == True;
	}

	actions
	{
		disabled Wait(0.016, Abort When False);
		Stop Forcing Player Outlines(Event Player.AbilityVariableThruDeath, Event Player);
		Event Player.AbilityVariableThruDeath = Null;
	}
}

rule("[Soldier: 76] Clean Sweep activation")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		(Hero Of(Event Player) == Hero(Soldier: 76) || Hero Being Duplicated(Event Player) == Hero(Soldier: 76)) == True;
		Is Using Ability 2(Event Player) == True;
		Event Player.AbilityVariableThruDeath != Null;
	}

	actions
	{
		Play Effect(All Players(All Teams), Hanzo Sonic Arrow Initial Pulse Effect, Color(Team 2), Position Of(Event Player), 200);
		Play Effect(All Players(All Teams), Hanzo Sonic Arrow Initial Pulse Effect, Color(Team 2), Position Of(Event Player), 200);
		Play Effect(All Players(All Teams), Hanzo Sonic Arrow Initial Pulse Effect, Color(Team 2), Position Of(
			Event Player.AbilityVariableThruDeath), 200);
		Start Forcing Player Outlines(Event Player.AbilityVariableThruDeath, Event Player, True, Color(Yellow), Always);
		Wait Until(Is Dead(Event Player) || Is Dead(Event Player.AbilityVariableThruDeath) || !Is Using Ability 2(Event Player), 20);
		Stop Forcing Player Outlines(Event Player.AbilityVariableThruDeath, Event Player);
	}
}

rule("[Soldier: 76] Clean Sweep switch targets")
{
	event
	{
		Player Dealt Damage;
		All;
		All;
	}

	conditions
	{
		(Hero Of(Event Player) == Hero(Soldier: 76) || Hero Being Duplicated(Event Player) == Hero(Soldier: 76)) == True;
		Is Using Ability 2(Event Player) == True;
	}

	actions
	{
		Wait(0.050, Restart When True);
		Event Player.AbilityVariableThruDeath = Victim;
		Start Forcing Player Outlines(Event Player.AbilityVariableThruDeath, Event Player, True, Color(Yellow), Always);
		disabled Wait Until(Is Dead(Event Player) || Is Dead(Event Player.AbilityVariableThruDeath) || !Is Using Ability 2(Event Player), 20);
		disabled Stop Forcing Player Outlines(Event Player.AbilityVariableThruDeath, Event Player);
	}
}

rule("Rule 106")
{
	event
	{
		Ongoing - Global;
	}
}
